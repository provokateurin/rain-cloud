// Package themingapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package themingapi

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/go-chi/chi/v5"
)

const (
	Basic_authScopes  = "basic_auth.Scopes"
	Bearer_authScopes = "bearer_auth.Scopes"
)

// Background defines model for Background.
type Background struct {
	BackgroundColor string  `json:"backgroundColor"`
	BackgroundImage *string `json:"backgroundImage"`
	Version         int64   `json:"version"`
}

// OCSMeta defines model for OCSMeta.
type OCSMeta struct {
	Itemsperpage *string `json:"itemsperpage,omitempty"`
	Message      *string `json:"message,omitempty"`
	Status       string  `json:"status"`
	Statuscode   int     `json:"statuscode"`
	Totalitems   *string `json:"totalitems,omitempty"`
}

// UserThemeGetBackgroundParams defines parameters for UserThemeGetBackground.
type UserThemeGetBackgroundParams struct {
	OCSAPIRequest string `json:"OCS-APIRequest"`
}

// UserThemeDeleteBackgroundParams defines parameters for UserThemeDeleteBackground.
type UserThemeDeleteBackgroundParams struct {
	OCSAPIRequest string `json:"OCS-APIRequest"`
}

// UserThemeSetBackgroundParams defines parameters for UserThemeSetBackground.
type UserThemeSetBackgroundParams struct {
	// Value Path of the background image
	Value *string `form:"value,omitempty" json:"value,omitempty"`

	// Color Color for the background
	Color         *string `form:"color,omitempty" json:"color,omitempty"`
	OCSAPIRequest string  `json:"OCS-APIRequest"`
}

// ThemingGetImageParams defines parameters for ThemingGetImage.
type ThemingGetImageParams struct {
	// UseSvg Return image as SVG
	UseSvg *int `form:"useSvg,omitempty" json:"useSvg,omitempty"`
}

// ThemingGetThemeStylesheetParams defines parameters for ThemingGetThemeStylesheet.
type ThemingGetThemeStylesheetParams struct {
	// Plain Let the browser decide the CSS priority
	Plain *int `form:"plain,omitempty" json:"plain,omitempty"`

	// WithCustomCss Include custom CSS
	WithCustomCss *int `form:"withCustomCss,omitempty" json:"withCustomCss,omitempty"`
}

// UserThemeDisableThemeParams defines parameters for UserThemeDisableTheme.
type UserThemeDisableThemeParams struct {
	OCSAPIRequest string `json:"OCS-APIRequest"`
}

// UserThemeEnableThemeParams defines parameters for UserThemeEnableTheme.
type UserThemeEnableThemeParams struct {
	OCSAPIRequest string `json:"OCS-APIRequest"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get the background image
	// (GET /apps/theming/background)
	UserThemeGetBackground(w http.ResponseWriter, r *http.Request, params UserThemeGetBackgroundParams)
	// Delete the background
	// (DELETE /apps/theming/background/custom)
	UserThemeDeleteBackground(w http.ResponseWriter, r *http.Request, params UserThemeDeleteBackgroundParams)
	// Set the background
	// (POST /apps/theming/background/{type})
	UserThemeSetBackground(w http.ResponseWriter, r *http.Request, pType string, params UserThemeSetBackgroundParams)
	// Return a 32x32 favicon as png
	// (GET /apps/theming/favicon/{app})
	IconGetFavicon(w http.ResponseWriter, r *http.Request, app string)
	// Return a 512x512 icon for touch devices
	// (GET /apps/theming/icon/{app})
	IconGetTouchIcon(w http.ResponseWriter, r *http.Request, app string)
	// Get an image
	// (GET /apps/theming/image/{key})
	ThemingGetImage(w http.ResponseWriter, r *http.Request, key string, params ThemingGetImageParams)
	// Get a themed icon
	// (GET /apps/theming/img/{app}/{image})
	IconGetThemedIcon(w http.ResponseWriter, r *http.Request, app string, image string)
	// Get the manifest for an app
	// (GET /apps/theming/manifest/{app})
	ThemingGetManifest(w http.ResponseWriter, r *http.Request, app string)
	// Get the CSS stylesheet for a theme
	// (GET /apps/theming/theme/{themeId}.css)
	ThemingGetThemeStylesheet(w http.ResponseWriter, r *http.Request, themeId string, params ThemingGetThemeStylesheetParams)
	// Disable theme
	// (DELETE /ocs/v2.php/apps/theming/api/v1/theme/{themeId})
	UserThemeDisableTheme(w http.ResponseWriter, r *http.Request, themeId string, params UserThemeDisableThemeParams)
	// Enable theme
	// (PUT /ocs/v2.php/apps/theming/api/v1/theme/{themeId}/enable)
	UserThemeEnableTheme(w http.ResponseWriter, r *http.Request, themeId string, params UserThemeEnableThemeParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// UserThemeGetBackground operation middleware
func (siw *ServerInterfaceWrapper) UserThemeGetBackground(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UserThemeGetBackgroundParams

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserThemeGetBackground(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UserThemeDeleteBackground operation middleware
func (siw *ServerInterfaceWrapper) UserThemeDeleteBackground(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UserThemeDeleteBackgroundParams

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserThemeDeleteBackground(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UserThemeSetBackground operation middleware
func (siw *ServerInterfaceWrapper) UserThemeSetBackground(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "type" -------------
	var pType string

	err = runtime.BindStyledParameterWithLocation("simple", false, "type", runtime.ParamLocationPath, chi.URLParam(r, "type"), &pType)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "type", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UserThemeSetBackgroundParams

	// ------------- Optional query parameter "value" -------------

	err = runtime.BindQueryParameter("form", true, false, "value", r.URL.Query(), &params.Value)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "value", Err: err})
		return
	}

	// ------------- Optional query parameter "color" -------------

	err = runtime.BindQueryParameter("form", true, false, "color", r.URL.Query(), &params.Color)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "color", Err: err})
		return
	}

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserThemeSetBackground(w, r, pType, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// IconGetFavicon operation middleware
func (siw *ServerInterfaceWrapper) IconGetFavicon(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "app" -------------
	var app string

	err = runtime.BindStyledParameterWithLocation("simple", false, "app", runtime.ParamLocationPath, chi.URLParam(r, "app"), &app)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "app", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.IconGetFavicon(w, r, app)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// IconGetTouchIcon operation middleware
func (siw *ServerInterfaceWrapper) IconGetTouchIcon(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "app" -------------
	var app string

	err = runtime.BindStyledParameterWithLocation("simple", false, "app", runtime.ParamLocationPath, chi.URLParam(r, "app"), &app)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "app", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.IconGetTouchIcon(w, r, app)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ThemingGetImage operation middleware
func (siw *ServerInterfaceWrapper) ThemingGetImage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithLocation("simple", false, "key", runtime.ParamLocationPath, chi.URLParam(r, "key"), &key)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "key", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ThemingGetImageParams

	// ------------- Optional query parameter "useSvg" -------------

	err = runtime.BindQueryParameter("form", true, false, "useSvg", r.URL.Query(), &params.UseSvg)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "useSvg", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ThemingGetImage(w, r, key, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// IconGetThemedIcon operation middleware
func (siw *ServerInterfaceWrapper) IconGetThemedIcon(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "app" -------------
	var app string

	err = runtime.BindStyledParameterWithLocation("simple", false, "app", runtime.ParamLocationPath, chi.URLParam(r, "app"), &app)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "app", Err: err})
		return
	}

	// ------------- Path parameter "image" -------------
	var image string

	err = runtime.BindStyledParameterWithLocation("simple", false, "image", runtime.ParamLocationPath, chi.URLParam(r, "image"), &image)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "image", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.IconGetThemedIcon(w, r, app, image)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ThemingGetManifest operation middleware
func (siw *ServerInterfaceWrapper) ThemingGetManifest(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "app" -------------
	var app string

	err = runtime.BindStyledParameterWithLocation("simple", false, "app", runtime.ParamLocationPath, chi.URLParam(r, "app"), &app)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "app", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ThemingGetManifest(w, r, app)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ThemingGetThemeStylesheet operation middleware
func (siw *ServerInterfaceWrapper) ThemingGetThemeStylesheet(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "themeId" -------------
	var themeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "themeId", runtime.ParamLocationPath, chi.URLParam(r, "themeId"), &themeId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "themeId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ThemingGetThemeStylesheetParams

	// ------------- Optional query parameter "plain" -------------

	err = runtime.BindQueryParameter("form", true, false, "plain", r.URL.Query(), &params.Plain)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "plain", Err: err})
		return
	}

	// ------------- Optional query parameter "withCustomCss" -------------

	err = runtime.BindQueryParameter("form", true, false, "withCustomCss", r.URL.Query(), &params.WithCustomCss)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "withCustomCss", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ThemingGetThemeStylesheet(w, r, themeId, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UserThemeDisableTheme operation middleware
func (siw *ServerInterfaceWrapper) UserThemeDisableTheme(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "themeId" -------------
	var themeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "themeId", runtime.ParamLocationPath, chi.URLParam(r, "themeId"), &themeId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "themeId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UserThemeDisableThemeParams

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserThemeDisableTheme(w, r, themeId, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UserThemeEnableTheme operation middleware
func (siw *ServerInterfaceWrapper) UserThemeEnableTheme(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "themeId" -------------
	var themeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "themeId", runtime.ParamLocationPath, chi.URLParam(r, "themeId"), &themeId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "themeId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UserThemeEnableThemeParams

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserThemeEnableTheme(w, r, themeId, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/apps/theming/background", wrapper.UserThemeGetBackground)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/apps/theming/background/custom", wrapper.UserThemeDeleteBackground)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/apps/theming/background/{type}", wrapper.UserThemeSetBackground)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/apps/theming/favicon/{app}", wrapper.IconGetFavicon)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/apps/theming/icon/{app}", wrapper.IconGetTouchIcon)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/apps/theming/image/{key}", wrapper.ThemingGetImage)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/apps/theming/img/{app}/{image}", wrapper.IconGetThemedIcon)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/apps/theming/manifest/{app}", wrapper.ThemingGetManifest)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/apps/theming/theme/{themeId}.css", wrapper.ThemingGetThemeStylesheet)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/ocs/v2.php/apps/theming/api/v1/theme/{themeId}", wrapper.UserThemeDisableTheme)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/ocs/v2.php/apps/theming/api/v1/theme/{themeId}/enable", wrapper.UserThemeEnableTheme)
	})

	return r
}

type UserThemeGetBackgroundRequestObject struct {
	Params UserThemeGetBackgroundParams
}

type UserThemeGetBackgroundResponseObject interface {
	VisitUserThemeGetBackgroundResponse(w http.ResponseWriter) error
}

type UserThemeGetBackground200ResponseHeaders struct {
	ContentDisposition string
}

type UserThemeGetBackground200AsteriskResponse struct {
	Body          io.Reader
	Headers       UserThemeGetBackground200ResponseHeaders
	ContentType   string
	ContentLength int64
}

func (response UserThemeGetBackground200AsteriskResponse) VisitUserThemeGetBackgroundResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Disposition", fmt.Sprint(response.Headers.ContentDisposition))
	w.Header().Set("Content-Type", response.ContentType)
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type UserThemeGetBackground404TexthtmlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response UserThemeGetBackground404TexthtmlResponse) VisitUserThemeGetBackgroundResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(404)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type UserThemeDeleteBackgroundRequestObject struct {
	Params UserThemeDeleteBackgroundParams
}

type UserThemeDeleteBackgroundResponseObject interface {
	VisitUserThemeDeleteBackgroundResponse(w http.ResponseWriter) error
}

type UserThemeDeleteBackground200JSONResponse Background

func (response UserThemeDeleteBackground200JSONResponse) VisitUserThemeDeleteBackgroundResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UserThemeSetBackgroundRequestObject struct {
	Type   string `json:"type"`
	Params UserThemeSetBackgroundParams
}

type UserThemeSetBackgroundResponseObject interface {
	VisitUserThemeSetBackgroundResponse(w http.ResponseWriter) error
}

type UserThemeSetBackground200JSONResponse Background

func (response UserThemeSetBackground200JSONResponse) VisitUserThemeSetBackgroundResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UserThemeSetBackground400JSONResponse struct {
	Error string `json:"error"`
}

func (response UserThemeSetBackground400JSONResponse) VisitUserThemeSetBackgroundResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UserThemeSetBackground500JSONResponse struct {
	Error string `json:"error"`
}

func (response UserThemeSetBackground500JSONResponse) VisitUserThemeSetBackgroundResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type IconGetFaviconRequestObject struct {
	App string `json:"app"`
}

type IconGetFaviconResponseObject interface {
	VisitIconGetFaviconResponse(w http.ResponseWriter) error
}

type IconGetFavicon200ResponseHeaders struct {
	ContentDisposition string
}

type IconGetFavicon200ImagexIconResponse struct {
	Body          io.Reader
	Headers       IconGetFavicon200ResponseHeaders
	ContentLength int64
}

func (response IconGetFavicon200ImagexIconResponse) VisitIconGetFaviconResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Disposition", fmt.Sprint(response.Headers.ContentDisposition))
	w.Header().Set("Content-Type", "image/x-icon")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type IconGetFavicon404TexthtmlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response IconGetFavicon404TexthtmlResponse) VisitIconGetFaviconResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(404)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type IconGetFavicon500TextResponse string

func (response IconGetFavicon500TextResponse) VisitIconGetFaviconResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

type IconGetTouchIconRequestObject struct {
	App string `json:"app"`
}

type IconGetTouchIconResponseObject interface {
	VisitIconGetTouchIconResponse(w http.ResponseWriter) error
}

type IconGetTouchIcon200ResponseHeaders struct {
	ContentDisposition string
}

type IconGetTouchIcon200ImagepngResponse struct {
	Body          io.Reader
	Headers       IconGetTouchIcon200ResponseHeaders
	ContentLength int64
}

func (response IconGetTouchIcon200ImagepngResponse) VisitIconGetTouchIconResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Disposition", fmt.Sprint(response.Headers.ContentDisposition))
	w.Header().Set("Content-Type", "image/png")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type IconGetTouchIcon200ImagexIconResponse struct {
	Body          io.Reader
	Headers       IconGetTouchIcon200ResponseHeaders
	ContentLength int64
}

func (response IconGetTouchIcon200ImagexIconResponse) VisitIconGetTouchIconResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Disposition", fmt.Sprint(response.Headers.ContentDisposition))
	w.Header().Set("Content-Type", "image/x-icon")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type IconGetTouchIcon404TexthtmlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response IconGetTouchIcon404TexthtmlResponse) VisitIconGetTouchIconResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(404)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type IconGetTouchIcon500TextResponse string

func (response IconGetTouchIcon500TextResponse) VisitIconGetTouchIconResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

type ThemingGetImageRequestObject struct {
	Key    string `json:"key"`
	Params ThemingGetImageParams
}

type ThemingGetImageResponseObject interface {
	VisitThemingGetImageResponse(w http.ResponseWriter) error
}

type ThemingGetImage200ResponseHeaders struct {
	ContentDisposition string
}

type ThemingGetImage200AsteriskResponse struct {
	Body          io.Reader
	Headers       ThemingGetImage200ResponseHeaders
	ContentType   string
	ContentLength int64
}

func (response ThemingGetImage200AsteriskResponse) VisitThemingGetImageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Disposition", fmt.Sprint(response.Headers.ContentDisposition))
	w.Header().Set("Content-Type", response.ContentType)
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type ThemingGetImage404TexthtmlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response ThemingGetImage404TexthtmlResponse) VisitThemingGetImageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(404)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type ThemingGetImage500TextResponse string

func (response ThemingGetImage500TextResponse) VisitThemingGetImageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

type IconGetThemedIconRequestObject struct {
	App   string `json:"app"`
	Image string `json:"image"`
}

type IconGetThemedIconResponseObject interface {
	VisitIconGetThemedIconResponse(w http.ResponseWriter) error
}

type IconGetThemedIcon200ResponseHeaders struct {
	ContentDisposition string
}

type IconGetThemedIcon200ImagesvgXmlResponse struct {
	Body          io.Reader
	Headers       IconGetThemedIcon200ResponseHeaders
	ContentLength int64
}

func (response IconGetThemedIcon200ImagesvgXmlResponse) VisitIconGetThemedIconResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Disposition", fmt.Sprint(response.Headers.ContentDisposition))
	w.Header().Set("Content-Type", "image/svg+xml")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type IconGetThemedIcon404TexthtmlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response IconGetThemedIcon404TexthtmlResponse) VisitIconGetThemedIconResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(404)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type IconGetThemedIcon500TextResponse string

func (response IconGetThemedIcon500TextResponse) VisitIconGetThemedIconResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

type ThemingGetManifestRequestObject struct {
	App string `json:"app"`
}

type ThemingGetManifestResponseObject interface {
	VisitThemingGetManifestResponse(w http.ResponseWriter) error
}

type ThemingGetManifest200JSONResponse struct {
	BackgroundColor string `json:"background_color"`
	Description     string `json:"description"`
	Display         string `json:"display"`
	Icons           []struct {
		Sizes string `json:"sizes"`
		Src   string `json:"src"`
		Type  string `json:"type"`
	} `json:"icons"`
	Name       string `json:"name"`
	ShortName  string `json:"short_name"`
	StartUrl   string `json:"start_url"`
	ThemeColor string `json:"theme_color"`
}

func (response ThemingGetManifest200JSONResponse) VisitThemingGetManifestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ThemingGetThemeStylesheetRequestObject struct {
	ThemeId string `json:"themeId"`
	Params  ThemingGetThemeStylesheetParams
}

type ThemingGetThemeStylesheetResponseObject interface {
	VisitThemingGetThemeStylesheetResponse(w http.ResponseWriter) error
}

type ThemingGetThemeStylesheet200ResponseHeaders struct {
	ContentDisposition string
}

type ThemingGetThemeStylesheet200TextcssResponse struct {
	Body          io.Reader
	Headers       ThemingGetThemeStylesheet200ResponseHeaders
	ContentLength int64
}

func (response ThemingGetThemeStylesheet200TextcssResponse) VisitThemingGetThemeStylesheetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Disposition", fmt.Sprint(response.Headers.ContentDisposition))
	w.Header().Set("Content-Type", "text/css")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type ThemingGetThemeStylesheet404TexthtmlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response ThemingGetThemeStylesheet404TexthtmlResponse) VisitThemingGetThemeStylesheetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(404)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type UserThemeDisableThemeRequestObject struct {
	ThemeId string `json:"themeId"`
	Params  UserThemeDisableThemeParams
}

type UserThemeDisableThemeResponseObject interface {
	VisitUserThemeDisableThemeResponse(w http.ResponseWriter) error
}

type UserThemeDisableTheme200JSONResponse struct {
	Ocs struct {
		Data map[string]interface{} `json:"data"`
		Meta OCSMeta                `json:"meta"`
	} `json:"ocs"`
}

func (response UserThemeDisableTheme200JSONResponse) VisitUserThemeDisableThemeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UserThemeDisableTheme400TextResponse string

func (response UserThemeDisableTheme400TextResponse) VisitUserThemeDisableThemeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(400)

	_, err := w.Write([]byte(response))
	return err
}

type UserThemeDisableTheme500TextResponse string

func (response UserThemeDisableTheme500TextResponse) VisitUserThemeDisableThemeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

type UserThemeEnableThemeRequestObject struct {
	ThemeId string `json:"themeId"`
	Params  UserThemeEnableThemeParams
}

type UserThemeEnableThemeResponseObject interface {
	VisitUserThemeEnableThemeResponse(w http.ResponseWriter) error
}

type UserThemeEnableTheme200JSONResponse struct {
	Ocs struct {
		Data map[string]interface{} `json:"data"`
		Meta OCSMeta                `json:"meta"`
	} `json:"ocs"`
}

func (response UserThemeEnableTheme200JSONResponse) VisitUserThemeEnableThemeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UserThemeEnableTheme400TextResponse string

func (response UserThemeEnableTheme400TextResponse) VisitUserThemeEnableThemeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(400)

	_, err := w.Write([]byte(response))
	return err
}

type UserThemeEnableTheme500TextResponse string

func (response UserThemeEnableTheme500TextResponse) VisitUserThemeEnableThemeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get the background image
	// (GET /apps/theming/background)
	UserThemeGetBackground(ctx context.Context, request UserThemeGetBackgroundRequestObject) (UserThemeGetBackgroundResponseObject, error)
	// Delete the background
	// (DELETE /apps/theming/background/custom)
	UserThemeDeleteBackground(ctx context.Context, request UserThemeDeleteBackgroundRequestObject) (UserThemeDeleteBackgroundResponseObject, error)
	// Set the background
	// (POST /apps/theming/background/{type})
	UserThemeSetBackground(ctx context.Context, request UserThemeSetBackgroundRequestObject) (UserThemeSetBackgroundResponseObject, error)
	// Return a 32x32 favicon as png
	// (GET /apps/theming/favicon/{app})
	IconGetFavicon(ctx context.Context, request IconGetFaviconRequestObject) (IconGetFaviconResponseObject, error)
	// Return a 512x512 icon for touch devices
	// (GET /apps/theming/icon/{app})
	IconGetTouchIcon(ctx context.Context, request IconGetTouchIconRequestObject) (IconGetTouchIconResponseObject, error)
	// Get an image
	// (GET /apps/theming/image/{key})
	ThemingGetImage(ctx context.Context, request ThemingGetImageRequestObject) (ThemingGetImageResponseObject, error)
	// Get a themed icon
	// (GET /apps/theming/img/{app}/{image})
	IconGetThemedIcon(ctx context.Context, request IconGetThemedIconRequestObject) (IconGetThemedIconResponseObject, error)
	// Get the manifest for an app
	// (GET /apps/theming/manifest/{app})
	ThemingGetManifest(ctx context.Context, request ThemingGetManifestRequestObject) (ThemingGetManifestResponseObject, error)
	// Get the CSS stylesheet for a theme
	// (GET /apps/theming/theme/{themeId}.css)
	ThemingGetThemeStylesheet(ctx context.Context, request ThemingGetThemeStylesheetRequestObject) (ThemingGetThemeStylesheetResponseObject, error)
	// Disable theme
	// (DELETE /ocs/v2.php/apps/theming/api/v1/theme/{themeId})
	UserThemeDisableTheme(ctx context.Context, request UserThemeDisableThemeRequestObject) (UserThemeDisableThemeResponseObject, error)
	// Enable theme
	// (PUT /ocs/v2.php/apps/theming/api/v1/theme/{themeId}/enable)
	UserThemeEnableTheme(ctx context.Context, request UserThemeEnableThemeRequestObject) (UserThemeEnableThemeResponseObject, error)
}

type StrictHandlerFunc = runtime.StrictHttpHandlerFunc
type StrictMiddlewareFunc = runtime.StrictHttpMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// UserThemeGetBackground operation middleware
func (sh *strictHandler) UserThemeGetBackground(w http.ResponseWriter, r *http.Request, params UserThemeGetBackgroundParams) {
	var request UserThemeGetBackgroundRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UserThemeGetBackground(ctx, request.(UserThemeGetBackgroundRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UserThemeGetBackground")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UserThemeGetBackgroundResponseObject); ok {
		if err := validResponse.VisitUserThemeGetBackgroundResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// UserThemeDeleteBackground operation middleware
func (sh *strictHandler) UserThemeDeleteBackground(w http.ResponseWriter, r *http.Request, params UserThemeDeleteBackgroundParams) {
	var request UserThemeDeleteBackgroundRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UserThemeDeleteBackground(ctx, request.(UserThemeDeleteBackgroundRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UserThemeDeleteBackground")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UserThemeDeleteBackgroundResponseObject); ok {
		if err := validResponse.VisitUserThemeDeleteBackgroundResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// UserThemeSetBackground operation middleware
func (sh *strictHandler) UserThemeSetBackground(w http.ResponseWriter, r *http.Request, pType string, params UserThemeSetBackgroundParams) {
	var request UserThemeSetBackgroundRequestObject

	request.Type = pType
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UserThemeSetBackground(ctx, request.(UserThemeSetBackgroundRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UserThemeSetBackground")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UserThemeSetBackgroundResponseObject); ok {
		if err := validResponse.VisitUserThemeSetBackgroundResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// IconGetFavicon operation middleware
func (sh *strictHandler) IconGetFavicon(w http.ResponseWriter, r *http.Request, app string) {
	var request IconGetFaviconRequestObject

	request.App = app

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.IconGetFavicon(ctx, request.(IconGetFaviconRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "IconGetFavicon")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(IconGetFaviconResponseObject); ok {
		if err := validResponse.VisitIconGetFaviconResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// IconGetTouchIcon operation middleware
func (sh *strictHandler) IconGetTouchIcon(w http.ResponseWriter, r *http.Request, app string) {
	var request IconGetTouchIconRequestObject

	request.App = app

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.IconGetTouchIcon(ctx, request.(IconGetTouchIconRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "IconGetTouchIcon")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(IconGetTouchIconResponseObject); ok {
		if err := validResponse.VisitIconGetTouchIconResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// ThemingGetImage operation middleware
func (sh *strictHandler) ThemingGetImage(w http.ResponseWriter, r *http.Request, key string, params ThemingGetImageParams) {
	var request ThemingGetImageRequestObject

	request.Key = key
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ThemingGetImage(ctx, request.(ThemingGetImageRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ThemingGetImage")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ThemingGetImageResponseObject); ok {
		if err := validResponse.VisitThemingGetImageResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// IconGetThemedIcon operation middleware
func (sh *strictHandler) IconGetThemedIcon(w http.ResponseWriter, r *http.Request, app string, image string) {
	var request IconGetThemedIconRequestObject

	request.App = app
	request.Image = image

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.IconGetThemedIcon(ctx, request.(IconGetThemedIconRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "IconGetThemedIcon")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(IconGetThemedIconResponseObject); ok {
		if err := validResponse.VisitIconGetThemedIconResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// ThemingGetManifest operation middleware
func (sh *strictHandler) ThemingGetManifest(w http.ResponseWriter, r *http.Request, app string) {
	var request ThemingGetManifestRequestObject

	request.App = app

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ThemingGetManifest(ctx, request.(ThemingGetManifestRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ThemingGetManifest")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ThemingGetManifestResponseObject); ok {
		if err := validResponse.VisitThemingGetManifestResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// ThemingGetThemeStylesheet operation middleware
func (sh *strictHandler) ThemingGetThemeStylesheet(w http.ResponseWriter, r *http.Request, themeId string, params ThemingGetThemeStylesheetParams) {
	var request ThemingGetThemeStylesheetRequestObject

	request.ThemeId = themeId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ThemingGetThemeStylesheet(ctx, request.(ThemingGetThemeStylesheetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ThemingGetThemeStylesheet")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ThemingGetThemeStylesheetResponseObject); ok {
		if err := validResponse.VisitThemingGetThemeStylesheetResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// UserThemeDisableTheme operation middleware
func (sh *strictHandler) UserThemeDisableTheme(w http.ResponseWriter, r *http.Request, themeId string, params UserThemeDisableThemeParams) {
	var request UserThemeDisableThemeRequestObject

	request.ThemeId = themeId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UserThemeDisableTheme(ctx, request.(UserThemeDisableThemeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UserThemeDisableTheme")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UserThemeDisableThemeResponseObject); ok {
		if err := validResponse.VisitUserThemeDisableThemeResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// UserThemeEnableTheme operation middleware
func (sh *strictHandler) UserThemeEnableTheme(w http.ResponseWriter, r *http.Request, themeId string, params UserThemeEnableThemeParams) {
	var request UserThemeEnableThemeRequestObject

	request.ThemeId = themeId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UserThemeEnableTheme(ctx, request.(UserThemeEnableThemeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UserThemeEnableTheme")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UserThemeEnableThemeResponseObject); ok {
		if err := validResponse.VisitUserThemeEnableThemeResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}
