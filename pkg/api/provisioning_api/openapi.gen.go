// Package provisioning_apiapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package provisioning_apiapi

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/go-chi/chi/v5"
)

const (
	Basic_authScopes  = "basic_auth.Scopes"
	Bearer_authScopes = "bearer_auth.Scopes"
)

// AppInfo defines model for AppInfo.
type AppInfo struct {
	Active             *bool                   `json:"active"`
	Activity           *map[string]interface{} `json:"activity"`
	Author             *map[string]interface{} `json:"author"`
	BackgroundJobs     *map[string]interface{} `json:"background-jobs"`
	Bugs               *map[string]interface{} `json:"bugs"`
	Category           *map[string]interface{} `json:"category"`
	Collaboration      *map[string]interface{} `json:"collaboration"`
	Commands           *map[string]interface{} `json:"commands"`
	DefaultEnable      *map[string]interface{} `json:"default_enable"`
	Dependencies       *map[string]interface{} `json:"dependencies"`
	Description        string                  `json:"description"`
	Discussion         *map[string]interface{} `json:"discussion"`
	Documentation      *map[string]interface{} `json:"documentation"`
	Groups             *map[string]interface{} `json:"groups"`
	Id                 string                  `json:"id"`
	Info               *map[string]interface{} `json:"info"`
	Internal           *bool                   `json:"internal"`
	Level              *int64                  `json:"level"`
	Licence            *map[string]interface{} `json:"licence"`
	Name               string                  `json:"name"`
	Namespace          *map[string]interface{} `json:"namespace"`
	Navigations        *map[string]interface{} `json:"navigations"`
	Preview            *map[string]interface{} `json:"preview"`
	PreviewAsIcon      *bool                   `json:"previewAsIcon"`
	Public             *map[string]interface{} `json:"public"`
	Remote             *map[string]interface{} `json:"remote"`
	Removable          *bool                   `json:"removable"`
	RepairSteps        *map[string]interface{} `json:"repair-steps"`
	Repository         *map[string]interface{} `json:"repository"`
	Sabre              *map[string]interface{} `json:"sabre"`
	Screenshot         *map[string]interface{} `json:"screenshot"`
	Settings           *map[string]interface{} `json:"settings"`
	Summary            string                  `json:"summary"`
	Trash              *map[string]interface{} `json:"trash"`
	TwoFactorProviders *map[string]interface{} `json:"two-factor-providers"`
	Types              *map[string]interface{} `json:"types"`
	Version            string                  `json:"version"`
	Versions           *map[string]interface{} `json:"versions"`
	Website            *map[string]interface{} `json:"website"`
}

// GroupDetails defines model for GroupDetails.
type GroupDetails struct {
	CanAdd      bool                   `json:"canAdd"`
	CanRemove   bool                   `json:"canRemove"`
	Disabled    GroupDetails_Disabled  `json:"disabled"`
	Displayname string                 `json:"displayname"`
	Id          string                 `json:"id"`
	Usercount   GroupDetails_Usercount `json:"usercount"`
}

// GroupDetailsDisabled0 defines model for .
type GroupDetailsDisabled0 = bool

// GroupDetailsDisabled1 defines model for .
type GroupDetailsDisabled1 = int64

// GroupDetails_Disabled defines model for GroupDetails.Disabled.
type GroupDetails_Disabled struct {
	union json.RawMessage
}

// GroupDetailsUsercount0 defines model for .
type GroupDetailsUsercount0 = bool

// GroupDetailsUsercount1 defines model for .
type GroupDetailsUsercount1 = int64

// GroupDetails_Usercount defines model for GroupDetails.Usercount.
type GroupDetails_Usercount struct {
	union json.RawMessage
}

// OCSMeta defines model for OCSMeta.
type OCSMeta struct {
	Itemsperpage *string `json:"itemsperpage,omitempty"`
	Message      *string `json:"message,omitempty"`
	Status       string  `json:"status"`
	Statuscode   int     `json:"statuscode"`
	Totalitems   *string `json:"totalitems,omitempty"`
}

// UserDetails defines model for UserDetails.
type UserDetails struct {
	AdditionalMail      []string  `json:"additional_mail"`
	AdditionalMailScope *[]string `json:"additional_mailScope"`
	Address             string    `json:"address"`
	AddressScope        *string   `json:"addressScope"`
	AvatarScope         *string   `json:"avatarScope"`
	Backend             string    `json:"backend"`
	BackendCapabilities struct {
		SetDisplayName bool `json:"setDisplayName"`
		SetPassword    bool `json:"setPassword"`
	} `json:"backendCapabilities"`
	Biography           string   `json:"biography"`
	BiographyScope      *string  `json:"biographyScope"`
	DisplayName         string   `json:"display-name"`
	Displayname         string   `json:"displayname"`
	DisplaynameScope    *string  `json:"displaynameScope"`
	Email               *string  `json:"email"`
	EmailScope          *string  `json:"emailScope"`
	Enabled             *bool    `json:"enabled"`
	Fediverse           *string  `json:"fediverse"`
	FediverseScope      *string  `json:"fediverseScope"`
	Groups              []string `json:"groups"`
	Headline            string   `json:"headline"`
	HeadlineScope       *string  `json:"headlineScope"`
	Id                  string   `json:"id"`
	Language            string   `json:"language"`
	LastLogin           int64    `json:"lastLogin"`
	Locale              string   `json:"locale"`
	NotifyEmail         *string  `json:"notify_email"`
	Organisation        string   `json:"organisation"`
	OrganisationScope   *string  `json:"organisationScope"`
	Phone               string   `json:"phone"`
	PhoneScope          *string  `json:"phoneScope"`
	ProfileEnabled      string   `json:"profile_enabled"`
	ProfileEnabledScope *string  `json:"profile_enabledScope"`
	Quota               struct {
		Free     *int64                  `json:"free"`
		Quota    UserDetails_Quota_Quota `json:"quota"`
		Relative *float32                `json:"relative"`
		Total    *int64                  `json:"total"`
		Used     int64                   `json:"used"`
	} `json:"quota"`
	Role            string   `json:"role"`
	RoleScope       *string  `json:"roleScope"`
	StorageLocation *string  `json:"storageLocation"`
	Subadmin        []string `json:"subadmin"`
	Twitter         string   `json:"twitter"`
	TwitterScope    *string  `json:"twitterScope"`
	Website         string   `json:"website"`
	WebsiteScope    *string  `json:"websiteScope"`
}

// UserDetailsQuotaQuota0 defines model for .
type UserDetailsQuotaQuota0 = string

// UserDetailsQuotaQuota1 defines model for .
type UserDetailsQuotaQuota1 = int64

// UserDetailsQuotaQuota2 defines model for .
type UserDetailsQuotaQuota2 = bool

// UserDetails_Quota_Quota defines model for UserDetails.Quota.Quota.
type UserDetails_Quota_Quota struct {
	union json.RawMessage
}

// AppConfigGetAppsParams defines parameters for AppConfigGetApps.
type AppConfigGetAppsParams struct {
	OCSAPIRequest string `json:"OCS-APIRequest"`
}

// AppConfigGetKeysParams defines parameters for AppConfigGetKeys.
type AppConfigGetKeysParams struct {
	OCSAPIRequest string `json:"OCS-APIRequest"`
}

// AppConfigDeleteKeyParams defines parameters for AppConfigDeleteKey.
type AppConfigDeleteKeyParams struct {
	OCSAPIRequest string `json:"OCS-APIRequest"`
}

// AppConfigGetValueParams defines parameters for AppConfigGetValue.
type AppConfigGetValueParams struct {
	// DefaultValue Default returned value if the value is empty
	DefaultValue  *string `form:"defaultValue,omitempty" json:"defaultValue,omitempty"`
	OCSAPIRequest string  `json:"OCS-APIRequest"`
}

// AppConfigSetValueParams defines parameters for AppConfigSetValue.
type AppConfigSetValueParams struct {
	// Value New value for the key
	Value         string `form:"value" json:"value"`
	OCSAPIRequest string `json:"OCS-APIRequest"`
}

// PreferencesDeleteMultiplePreferenceParams defines parameters for PreferencesDeleteMultiplePreference.
type PreferencesDeleteMultiplePreferenceParams struct {
	// ConfigKeys Keys to delete
	ConfigKeys    string `form:"configKeys" json:"configKeys"`
	OCSAPIRequest string `json:"OCS-APIRequest"`
}

// PreferencesSetMultiplePreferencesParams defines parameters for PreferencesSetMultiplePreferences.
type PreferencesSetMultiplePreferencesParams struct {
	// Configs Key-value pairs of the preferences
	Configs       string `form:"configs" json:"configs"`
	OCSAPIRequest string `json:"OCS-APIRequest"`
}

// PreferencesDeletePreferenceParams defines parameters for PreferencesDeletePreference.
type PreferencesDeletePreferenceParams struct {
	OCSAPIRequest string `json:"OCS-APIRequest"`
}

// PreferencesSetPreferenceParams defines parameters for PreferencesSetPreference.
type PreferencesSetPreferenceParams struct {
	// ConfigValue New value
	ConfigValue   string `form:"configValue" json:"configValue"`
	OCSAPIRequest string `json:"OCS-APIRequest"`
}

// AppsGetAppsParams defines parameters for AppsGetApps.
type AppsGetAppsParams struct {
	// Filter Filter for enabled or disabled apps
	Filter        *string `form:"filter,omitempty" json:"filter,omitempty"`
	OCSAPIRequest string  `json:"OCS-APIRequest"`
}

// AppsDisableParams defines parameters for AppsDisable.
type AppsDisableParams struct {
	OCSAPIRequest string `json:"OCS-APIRequest"`
}

// AppsGetAppInfoParams defines parameters for AppsGetAppInfo.
type AppsGetAppInfoParams struct {
	OCSAPIRequest string `json:"OCS-APIRequest"`
}

// AppsEnableParams defines parameters for AppsEnable.
type AppsEnableParams struct {
	OCSAPIRequest string `json:"OCS-APIRequest"`
}

// GroupsGetGroupsParams defines parameters for GroupsGetGroups.
type GroupsGetGroupsParams struct {
	// Search Text to search for
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Limit Limit the amount of groups returned
	Limit *int64 `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Offset for searching for groups
	Offset        *int64 `form:"offset,omitempty" json:"offset,omitempty"`
	OCSAPIRequest string `json:"OCS-APIRequest"`
}

// GroupsAddGroupParams defines parameters for GroupsAddGroup.
type GroupsAddGroupParams struct {
	// Groupid ID of the group
	Groupid string `form:"groupid" json:"groupid"`

	// Displayname Display name of the group
	Displayname   *string `form:"displayname,omitempty" json:"displayname,omitempty"`
	OCSAPIRequest string  `json:"OCS-APIRequest"`
}

// GroupsGetGroupsDetailsParams defines parameters for GroupsGetGroupsDetails.
type GroupsGetGroupsDetailsParams struct {
	// Search Text to search for
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Limit Limit the amount of groups returned
	Limit *int64 `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Offset for searching for groups
	Offset        *int64 `form:"offset,omitempty" json:"offset,omitempty"`
	OCSAPIRequest string `json:"OCS-APIRequest"`
}

// GroupsDeleteGroupParams defines parameters for GroupsDeleteGroup.
type GroupsDeleteGroupParams struct {
	OCSAPIRequest string `json:"OCS-APIRequest"`
}

// GroupsGetGroupParams defines parameters for GroupsGetGroup.
type GroupsGetGroupParams struct {
	OCSAPIRequest string `json:"OCS-APIRequest"`
}

// GroupsUpdateGroupParams defines parameters for GroupsUpdateGroup.
type GroupsUpdateGroupParams struct {
	// Key Key to update, only 'displayname'
	Key string `form:"key" json:"key"`

	// Value New value for the key
	Value         string `form:"value" json:"value"`
	OCSAPIRequest string `json:"OCS-APIRequest"`
}

// GroupsGetSubAdminsOfGroupParams defines parameters for GroupsGetSubAdminsOfGroup.
type GroupsGetSubAdminsOfGroupParams struct {
	OCSAPIRequest string `json:"OCS-APIRequest"`
}

// GroupsGetGroupUsersParams defines parameters for GroupsGetGroupUsers.
type GroupsGetGroupUsersParams struct {
	OCSAPIRequest string `json:"OCS-APIRequest"`
}

// GroupsGetGroupUsersDetailsParams defines parameters for GroupsGetGroupUsersDetails.
type GroupsGetGroupUsersDetailsParams struct {
	// Search Text to search for
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Limit Limit the amount of groups returned
	Limit *int64 `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Offset for searching for groups
	Offset        *int64 `form:"offset,omitempty" json:"offset,omitempty"`
	OCSAPIRequest string `json:"OCS-APIRequest"`
}

// UsersGetCurrentUserParams defines parameters for UsersGetCurrentUser.
type UsersGetCurrentUserParams struct {
	OCSAPIRequest string `json:"OCS-APIRequest"`
}

// UsersGetEditableFieldsParams defines parameters for UsersGetEditableFields.
type UsersGetEditableFieldsParams struct {
	OCSAPIRequest string `json:"OCS-APIRequest"`
}

// UsersGetEditableFieldsForUserParams defines parameters for UsersGetEditableFieldsForUser.
type UsersGetEditableFieldsForUserParams struct {
	OCSAPIRequest string `json:"OCS-APIRequest"`
}

// UsersGetUsersParams defines parameters for UsersGetUsers.
type UsersGetUsersParams struct {
	// Search Text to search for
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Limit Limit the amount of groups returned
	Limit *int64 `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Offset for searching for groups
	Offset        *int64 `form:"offset,omitempty" json:"offset,omitempty"`
	OCSAPIRequest string `json:"OCS-APIRequest"`
}

// UsersAddUserParams defines parameters for UsersAddUser.
type UsersAddUserParams struct {
	// Userid ID of the user
	Userid string `form:"userid" json:"userid"`

	// Password Password of the user
	Password *string `form:"password,omitempty" json:"password,omitempty"`

	// DisplayName Display name of the user
	DisplayName *string `form:"displayName,omitempty" json:"displayName,omitempty"`

	// Email Email of the user
	Email *string `form:"email,omitempty" json:"email,omitempty"`

	// Groups Groups of the user
	Groups *string `form:"groups,omitempty" json:"groups,omitempty"`

	// Subadmin Groups where the user is subadmin
	Subadmin *string `form:"subadmin,omitempty" json:"subadmin,omitempty"`

	// Quota Quota of the user
	Quota *string `form:"quota,omitempty" json:"quota,omitempty"`

	// Language Language of the user
	Language *string `form:"language,omitempty" json:"language,omitempty"`

	// Manager Manager of the user
	Manager       *string `form:"manager,omitempty" json:"manager,omitempty"`
	OCSAPIRequest string  `json:"OCS-APIRequest"`
}

// UsersGetUsersDetailsParams defines parameters for UsersGetUsersDetails.
type UsersGetUsersDetailsParams struct {
	// Search Text to search for
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Limit Limit the amount of groups returned
	Limit *int64 `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Offset for searching for groups
	Offset        *int64 `form:"offset,omitempty" json:"offset,omitempty"`
	OCSAPIRequest string `json:"OCS-APIRequest"`
}

// UsersSearchByPhoneNumbersParams defines parameters for UsersSearchByPhoneNumbers.
type UsersSearchByPhoneNumbersParams struct {
	// Location Location of the phone number (for country code)
	Location string `form:"location" json:"location"`

	// Search Phone numbers to search for
	Search        string `form:"search" json:"search"`
	OCSAPIRequest string `json:"OCS-APIRequest"`
}

// UsersDeleteUserParams defines parameters for UsersDeleteUser.
type UsersDeleteUserParams struct {
	OCSAPIRequest string `json:"OCS-APIRequest"`
}

// UsersGetUserParams defines parameters for UsersGetUser.
type UsersGetUserParams struct {
	OCSAPIRequest string `json:"OCS-APIRequest"`
}

// UsersEditUserParams defines parameters for UsersEditUser.
type UsersEditUserParams struct {
	// Key Key that will be updated
	Key string `form:"key" json:"key"`

	// Value New value for the key
	Value         string `form:"value" json:"value"`
	OCSAPIRequest string `json:"OCS-APIRequest"`
}

// UsersDisableUserParams defines parameters for UsersDisableUser.
type UsersDisableUserParams struct {
	OCSAPIRequest string `json:"OCS-APIRequest"`
}

// UsersEnableUserParams defines parameters for UsersEnableUser.
type UsersEnableUserParams struct {
	OCSAPIRequest string `json:"OCS-APIRequest"`
}

// UsersRemoveFromGroupParams defines parameters for UsersRemoveFromGroup.
type UsersRemoveFromGroupParams struct {
	// Groupid ID of the group
	Groupid       string `form:"groupid" json:"groupid"`
	OCSAPIRequest string `json:"OCS-APIRequest"`
}

// UsersGetUsersGroupsParams defines parameters for UsersGetUsersGroups.
type UsersGetUsersGroupsParams struct {
	OCSAPIRequest string `json:"OCS-APIRequest"`
}

// UsersAddToGroupParams defines parameters for UsersAddToGroup.
type UsersAddToGroupParams struct {
	// Groupid ID of the group
	Groupid       *string `form:"groupid,omitempty" json:"groupid,omitempty"`
	OCSAPIRequest string  `json:"OCS-APIRequest"`
}

// UsersRemoveSubAdminParams defines parameters for UsersRemoveSubAdmin.
type UsersRemoveSubAdminParams struct {
	// Groupid ID of the group
	Groupid       string `form:"groupid" json:"groupid"`
	OCSAPIRequest string `json:"OCS-APIRequest"`
}

// UsersGetUserSubAdminGroupsParams defines parameters for UsersGetUserSubAdminGroups.
type UsersGetUserSubAdminGroupsParams struct {
	OCSAPIRequest string `json:"OCS-APIRequest"`
}

// UsersAddSubAdminParams defines parameters for UsersAddSubAdmin.
type UsersAddSubAdminParams struct {
	// Groupid ID of the group
	Groupid       string `form:"groupid" json:"groupid"`
	OCSAPIRequest string `json:"OCS-APIRequest"`
}

// UsersResendWelcomeMessageParams defines parameters for UsersResendWelcomeMessage.
type UsersResendWelcomeMessageParams struct {
	OCSAPIRequest string `json:"OCS-APIRequest"`
}

// UsersWipeUserDevicesParams defines parameters for UsersWipeUserDevices.
type UsersWipeUserDevicesParams struct {
	OCSAPIRequest string `json:"OCS-APIRequest"`
}

// UsersEditUserMultiValueParams defines parameters for UsersEditUserMultiValue.
type UsersEditUserMultiValueParams struct {
	// Key Key that will be updated
	Key string `form:"key" json:"key"`

	// Value New value for the key
	Value         string `form:"value" json:"value"`
	OCSAPIRequest string `json:"OCS-APIRequest"`
}

// AsGroupDetailsDisabled0 returns the union data inside the GroupDetails_Disabled as a GroupDetailsDisabled0
func (t GroupDetails_Disabled) AsGroupDetailsDisabled0() (GroupDetailsDisabled0, error) {
	var body GroupDetailsDisabled0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGroupDetailsDisabled0 overwrites any union data inside the GroupDetails_Disabled as the provided GroupDetailsDisabled0
func (t *GroupDetails_Disabled) FromGroupDetailsDisabled0(v GroupDetailsDisabled0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGroupDetailsDisabled0 performs a merge with any union data inside the GroupDetails_Disabled, using the provided GroupDetailsDisabled0
func (t *GroupDetails_Disabled) MergeGroupDetailsDisabled0(v GroupDetailsDisabled0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsGroupDetailsDisabled1 returns the union data inside the GroupDetails_Disabled as a GroupDetailsDisabled1
func (t GroupDetails_Disabled) AsGroupDetailsDisabled1() (GroupDetailsDisabled1, error) {
	var body GroupDetailsDisabled1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGroupDetailsDisabled1 overwrites any union data inside the GroupDetails_Disabled as the provided GroupDetailsDisabled1
func (t *GroupDetails_Disabled) FromGroupDetailsDisabled1(v GroupDetailsDisabled1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGroupDetailsDisabled1 performs a merge with any union data inside the GroupDetails_Disabled, using the provided GroupDetailsDisabled1
func (t *GroupDetails_Disabled) MergeGroupDetailsDisabled1(v GroupDetailsDisabled1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t GroupDetails_Disabled) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GroupDetails_Disabled) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsGroupDetailsUsercount0 returns the union data inside the GroupDetails_Usercount as a GroupDetailsUsercount0
func (t GroupDetails_Usercount) AsGroupDetailsUsercount0() (GroupDetailsUsercount0, error) {
	var body GroupDetailsUsercount0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGroupDetailsUsercount0 overwrites any union data inside the GroupDetails_Usercount as the provided GroupDetailsUsercount0
func (t *GroupDetails_Usercount) FromGroupDetailsUsercount0(v GroupDetailsUsercount0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGroupDetailsUsercount0 performs a merge with any union data inside the GroupDetails_Usercount, using the provided GroupDetailsUsercount0
func (t *GroupDetails_Usercount) MergeGroupDetailsUsercount0(v GroupDetailsUsercount0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsGroupDetailsUsercount1 returns the union data inside the GroupDetails_Usercount as a GroupDetailsUsercount1
func (t GroupDetails_Usercount) AsGroupDetailsUsercount1() (GroupDetailsUsercount1, error) {
	var body GroupDetailsUsercount1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGroupDetailsUsercount1 overwrites any union data inside the GroupDetails_Usercount as the provided GroupDetailsUsercount1
func (t *GroupDetails_Usercount) FromGroupDetailsUsercount1(v GroupDetailsUsercount1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGroupDetailsUsercount1 performs a merge with any union data inside the GroupDetails_Usercount, using the provided GroupDetailsUsercount1
func (t *GroupDetails_Usercount) MergeGroupDetailsUsercount1(v GroupDetailsUsercount1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t GroupDetails_Usercount) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GroupDetails_Usercount) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsUserDetailsQuotaQuota0 returns the union data inside the UserDetails_Quota_Quota as a UserDetailsQuotaQuota0
func (t UserDetails_Quota_Quota) AsUserDetailsQuotaQuota0() (UserDetailsQuotaQuota0, error) {
	var body UserDetailsQuotaQuota0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUserDetailsQuotaQuota0 overwrites any union data inside the UserDetails_Quota_Quota as the provided UserDetailsQuotaQuota0
func (t *UserDetails_Quota_Quota) FromUserDetailsQuotaQuota0(v UserDetailsQuotaQuota0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUserDetailsQuotaQuota0 performs a merge with any union data inside the UserDetails_Quota_Quota, using the provided UserDetailsQuotaQuota0
func (t *UserDetails_Quota_Quota) MergeUserDetailsQuotaQuota0(v UserDetailsQuotaQuota0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsUserDetailsQuotaQuota1 returns the union data inside the UserDetails_Quota_Quota as a UserDetailsQuotaQuota1
func (t UserDetails_Quota_Quota) AsUserDetailsQuotaQuota1() (UserDetailsQuotaQuota1, error) {
	var body UserDetailsQuotaQuota1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUserDetailsQuotaQuota1 overwrites any union data inside the UserDetails_Quota_Quota as the provided UserDetailsQuotaQuota1
func (t *UserDetails_Quota_Quota) FromUserDetailsQuotaQuota1(v UserDetailsQuotaQuota1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUserDetailsQuotaQuota1 performs a merge with any union data inside the UserDetails_Quota_Quota, using the provided UserDetailsQuotaQuota1
func (t *UserDetails_Quota_Quota) MergeUserDetailsQuotaQuota1(v UserDetailsQuotaQuota1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsUserDetailsQuotaQuota2 returns the union data inside the UserDetails_Quota_Quota as a UserDetailsQuotaQuota2
func (t UserDetails_Quota_Quota) AsUserDetailsQuotaQuota2() (UserDetailsQuotaQuota2, error) {
	var body UserDetailsQuotaQuota2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUserDetailsQuotaQuota2 overwrites any union data inside the UserDetails_Quota_Quota as the provided UserDetailsQuotaQuota2
func (t *UserDetails_Quota_Quota) FromUserDetailsQuotaQuota2(v UserDetailsQuotaQuota2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUserDetailsQuotaQuota2 performs a merge with any union data inside the UserDetails_Quota_Quota, using the provided UserDetailsQuotaQuota2
func (t *UserDetails_Quota_Quota) MergeUserDetailsQuotaQuota2(v UserDetailsQuotaQuota2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t UserDetails_Quota_Quota) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *UserDetails_Quota_Quota) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of apps
	// (GET /ocs/v2.php/apps/provisioning_api/api/v1/config/apps)
	AppConfigGetApps(w http.ResponseWriter, r *http.Request, params AppConfigGetAppsParams)
	// Get the config keys of an app
	// (GET /ocs/v2.php/apps/provisioning_api/api/v1/config/apps/{app})
	AppConfigGetKeys(w http.ResponseWriter, r *http.Request, app string, params AppConfigGetKeysParams)
	// Delete a config key of an app
	// (DELETE /ocs/v2.php/apps/provisioning_api/api/v1/config/apps/{app}/{key})
	AppConfigDeleteKey(w http.ResponseWriter, r *http.Request, app string, key string, params AppConfigDeleteKeyParams)
	// Get a the config value of an app
	// (GET /ocs/v2.php/apps/provisioning_api/api/v1/config/apps/{app}/{key})
	AppConfigGetValue(w http.ResponseWriter, r *http.Request, app string, key string, params AppConfigGetValueParams)
	// Update the config value of an app
	// (POST /ocs/v2.php/apps/provisioning_api/api/v1/config/apps/{app}/{key})
	AppConfigSetValue(w http.ResponseWriter, r *http.Request, app string, key string, params AppConfigSetValueParams)
	// Delete multiple preferences for an app
	// (DELETE /ocs/v2.php/apps/provisioning_api/api/v1/config/users/{appId})
	PreferencesDeleteMultiplePreference(w http.ResponseWriter, r *http.Request, appId string, params PreferencesDeleteMultiplePreferenceParams)
	// Update multiple preference values of an app
	// (POST /ocs/v2.php/apps/provisioning_api/api/v1/config/users/{appId})
	PreferencesSetMultiplePreferences(w http.ResponseWriter, r *http.Request, appId string, params PreferencesSetMultiplePreferencesParams)
	// Delete a preference for an app
	// (DELETE /ocs/v2.php/apps/provisioning_api/api/v1/config/users/{appId}/{configKey})
	PreferencesDeletePreference(w http.ResponseWriter, r *http.Request, appId string, configKey string, params PreferencesDeletePreferenceParams)
	// Update a preference value of an app
	// (POST /ocs/v2.php/apps/provisioning_api/api/v1/config/users/{appId}/{configKey})
	PreferencesSetPreference(w http.ResponseWriter, r *http.Request, appId string, configKey string, params PreferencesSetPreferenceParams)
	// Get a list of installed apps
	// (GET /ocs/v2.php/cloud/apps)
	AppsGetApps(w http.ResponseWriter, r *http.Request, params AppsGetAppsParams)
	// Disable an app
	// (DELETE /ocs/v2.php/cloud/apps/{app})
	AppsDisable(w http.ResponseWriter, r *http.Request, app string, params AppsDisableParams)
	// Get the app info for an app
	// (GET /ocs/v2.php/cloud/apps/{app})
	AppsGetAppInfo(w http.ResponseWriter, r *http.Request, app string, params AppsGetAppInfoParams)
	// Enable an app
	// (POST /ocs/v2.php/cloud/apps/{app})
	AppsEnable(w http.ResponseWriter, r *http.Request, app string, params AppsEnableParams)
	// Get a list of groups
	// (GET /ocs/v2.php/cloud/groups)
	GroupsGetGroups(w http.ResponseWriter, r *http.Request, params GroupsGetGroupsParams)
	// Create a new group
	// (POST /ocs/v2.php/cloud/groups)
	GroupsAddGroup(w http.ResponseWriter, r *http.Request, params GroupsAddGroupParams)
	// Get a list of groups details
	// (GET /ocs/v2.php/cloud/groups/details)
	GroupsGetGroupsDetails(w http.ResponseWriter, r *http.Request, params GroupsGetGroupsDetailsParams)
	// Delete a group
	// (DELETE /ocs/v2.php/cloud/groups/{groupId})
	GroupsDeleteGroup(w http.ResponseWriter, r *http.Request, groupId string, params GroupsDeleteGroupParams)
	// Get a list of users in the specified group
	// (GET /ocs/v2.php/cloud/groups/{groupId})
	GroupsGetGroup(w http.ResponseWriter, r *http.Request, groupId string, params GroupsGetGroupParams)
	// Update a group
	// (PUT /ocs/v2.php/cloud/groups/{groupId})
	GroupsUpdateGroup(w http.ResponseWriter, r *http.Request, groupId string, params GroupsUpdateGroupParams)
	// Get the list of user IDs that are a subadmin of the group
	// (GET /ocs/v2.php/cloud/groups/{groupId}/subadmins)
	GroupsGetSubAdminsOfGroup(w http.ResponseWriter, r *http.Request, groupId string, params GroupsGetSubAdminsOfGroupParams)
	// Get a list of users in the specified group
	// (GET /ocs/v2.php/cloud/groups/{groupId}/users)
	GroupsGetGroupUsers(w http.ResponseWriter, r *http.Request, groupId string, params GroupsGetGroupUsersParams)
	// Get a list of users details in the specified group
	// (GET /ocs/v2.php/cloud/groups/{groupId}/users/details)
	GroupsGetGroupUsersDetails(w http.ResponseWriter, r *http.Request, groupId string, params GroupsGetGroupUsersDetailsParams)
	// Get the details of the current user
	// (GET /ocs/v2.php/cloud/user)
	UsersGetCurrentUser(w http.ResponseWriter, r *http.Request, params UsersGetCurrentUserParams)
	// Get a list of fields that are editable for the current user
	// (GET /ocs/v2.php/cloud/user/fields)
	UsersGetEditableFields(w http.ResponseWriter, r *http.Request, params UsersGetEditableFieldsParams)
	// Get a list of fields that are editable for a user
	// (GET /ocs/v2.php/cloud/user/fields/{userId})
	UsersGetEditableFieldsForUser(w http.ResponseWriter, r *http.Request, userId string, params UsersGetEditableFieldsForUserParams)
	// Get a list of users
	// (GET /ocs/v2.php/cloud/users)
	UsersGetUsers(w http.ResponseWriter, r *http.Request, params UsersGetUsersParams)
	// Create a new user
	// (POST /ocs/v2.php/cloud/users)
	UsersAddUser(w http.ResponseWriter, r *http.Request, params UsersAddUserParams)
	// Get a list of users and their details
	// (GET /ocs/v2.php/cloud/users/details)
	UsersGetUsersDetails(w http.ResponseWriter, r *http.Request, params UsersGetUsersDetailsParams)
	// Search users by their phone numbers
	// (POST /ocs/v2.php/cloud/users/search/by-phone)
	UsersSearchByPhoneNumbers(w http.ResponseWriter, r *http.Request, params UsersSearchByPhoneNumbersParams)
	// Delete a user
	// (DELETE /ocs/v2.php/cloud/users/{userId})
	UsersDeleteUser(w http.ResponseWriter, r *http.Request, userId string, params UsersDeleteUserParams)
	// Get the details of a user
	// (GET /ocs/v2.php/cloud/users/{userId})
	UsersGetUser(w http.ResponseWriter, r *http.Request, userId string, params UsersGetUserParams)
	// Update a value of the user's details
	// (PUT /ocs/v2.php/cloud/users/{userId})
	UsersEditUser(w http.ResponseWriter, r *http.Request, userId string, params UsersEditUserParams)
	// Disable a user
	// (PUT /ocs/v2.php/cloud/users/{userId}/disable)
	UsersDisableUser(w http.ResponseWriter, r *http.Request, userId string, params UsersDisableUserParams)
	// Enable a user
	// (PUT /ocs/v2.php/cloud/users/{userId}/enable)
	UsersEnableUser(w http.ResponseWriter, r *http.Request, userId string, params UsersEnableUserParams)
	// Remove a user from a group
	// (DELETE /ocs/v2.php/cloud/users/{userId}/groups)
	UsersRemoveFromGroup(w http.ResponseWriter, r *http.Request, userId string, params UsersRemoveFromGroupParams)
	// Get a list of groups the user belongs to
	// (GET /ocs/v2.php/cloud/users/{userId}/groups)
	UsersGetUsersGroups(w http.ResponseWriter, r *http.Request, userId string, params UsersGetUsersGroupsParams)
	// Add a user to a group
	// (POST /ocs/v2.php/cloud/users/{userId}/groups)
	UsersAddToGroup(w http.ResponseWriter, r *http.Request, userId string, params UsersAddToGroupParams)
	// Remove a user from the subadmins of a group
	// (DELETE /ocs/v2.php/cloud/users/{userId}/subadmins)
	UsersRemoveSubAdmin(w http.ResponseWriter, r *http.Request, userId string, params UsersRemoveSubAdminParams)
	// Get the groups a user is a subadmin of
	// (GET /ocs/v2.php/cloud/users/{userId}/subadmins)
	UsersGetUserSubAdminGroups(w http.ResponseWriter, r *http.Request, userId string, params UsersGetUserSubAdminGroupsParams)
	// Make a user a subadmin of a group
	// (POST /ocs/v2.php/cloud/users/{userId}/subadmins)
	UsersAddSubAdmin(w http.ResponseWriter, r *http.Request, userId string, params UsersAddSubAdminParams)
	// Resend the welcome message
	// (POST /ocs/v2.php/cloud/users/{userId}/welcome)
	UsersResendWelcomeMessage(w http.ResponseWriter, r *http.Request, userId string, params UsersResendWelcomeMessageParams)
	// Wipe all devices of a user
	// (POST /ocs/v2.php/cloud/users/{userId}/wipe)
	UsersWipeUserDevices(w http.ResponseWriter, r *http.Request, userId string, params UsersWipeUserDevicesParams)
	// Update multiple values of the user's details
	// (PUT /ocs/v2.php/cloud/users/{userId}/{collectionName})
	UsersEditUserMultiValue(w http.ResponseWriter, r *http.Request, userId string, collectionName string, params UsersEditUserMultiValueParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// AppConfigGetApps operation middleware
func (siw *ServerInterfaceWrapper) AppConfigGetApps(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params AppConfigGetAppsParams

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AppConfigGetApps(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AppConfigGetKeys operation middleware
func (siw *ServerInterfaceWrapper) AppConfigGetKeys(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "app" -------------
	var app string

	err = runtime.BindStyledParameterWithLocation("simple", false, "app", runtime.ParamLocationPath, chi.URLParam(r, "app"), &app)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "app", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params AppConfigGetKeysParams

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AppConfigGetKeys(w, r, app, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AppConfigDeleteKey operation middleware
func (siw *ServerInterfaceWrapper) AppConfigDeleteKey(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "app" -------------
	var app string

	err = runtime.BindStyledParameterWithLocation("simple", false, "app", runtime.ParamLocationPath, chi.URLParam(r, "app"), &app)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "app", Err: err})
		return
	}

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithLocation("simple", false, "key", runtime.ParamLocationPath, chi.URLParam(r, "key"), &key)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "key", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params AppConfigDeleteKeyParams

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AppConfigDeleteKey(w, r, app, key, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AppConfigGetValue operation middleware
func (siw *ServerInterfaceWrapper) AppConfigGetValue(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "app" -------------
	var app string

	err = runtime.BindStyledParameterWithLocation("simple", false, "app", runtime.ParamLocationPath, chi.URLParam(r, "app"), &app)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "app", Err: err})
		return
	}

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithLocation("simple", false, "key", runtime.ParamLocationPath, chi.URLParam(r, "key"), &key)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "key", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params AppConfigGetValueParams

	// ------------- Optional query parameter "defaultValue" -------------

	err = runtime.BindQueryParameter("form", true, false, "defaultValue", r.URL.Query(), &params.DefaultValue)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "defaultValue", Err: err})
		return
	}

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AppConfigGetValue(w, r, app, key, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AppConfigSetValue operation middleware
func (siw *ServerInterfaceWrapper) AppConfigSetValue(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "app" -------------
	var app string

	err = runtime.BindStyledParameterWithLocation("simple", false, "app", runtime.ParamLocationPath, chi.URLParam(r, "app"), &app)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "app", Err: err})
		return
	}

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithLocation("simple", false, "key", runtime.ParamLocationPath, chi.URLParam(r, "key"), &key)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "key", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params AppConfigSetValueParams

	// ------------- Required query parameter "value" -------------

	if paramValue := r.URL.Query().Get("value"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "value"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "value", r.URL.Query(), &params.Value)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "value", Err: err})
		return
	}

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AppConfigSetValue(w, r, app, key, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PreferencesDeleteMultiplePreference operation middleware
func (siw *ServerInterfaceWrapper) PreferencesDeleteMultiplePreference(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "appId" -------------
	var appId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "appId", runtime.ParamLocationPath, chi.URLParam(r, "appId"), &appId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "appId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PreferencesDeleteMultiplePreferenceParams

	// ------------- Required query parameter "configKeys" -------------

	if paramValue := r.URL.Query().Get("configKeys"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "configKeys"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "configKeys", r.URL.Query(), &params.ConfigKeys)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "configKeys", Err: err})
		return
	}

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PreferencesDeleteMultiplePreference(w, r, appId, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PreferencesSetMultiplePreferences operation middleware
func (siw *ServerInterfaceWrapper) PreferencesSetMultiplePreferences(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "appId" -------------
	var appId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "appId", runtime.ParamLocationPath, chi.URLParam(r, "appId"), &appId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "appId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PreferencesSetMultiplePreferencesParams

	// ------------- Required query parameter "configs" -------------

	if paramValue := r.URL.Query().Get("configs"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "configs"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "configs", r.URL.Query(), &params.Configs)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "configs", Err: err})
		return
	}

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PreferencesSetMultiplePreferences(w, r, appId, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PreferencesDeletePreference operation middleware
func (siw *ServerInterfaceWrapper) PreferencesDeletePreference(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "appId" -------------
	var appId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "appId", runtime.ParamLocationPath, chi.URLParam(r, "appId"), &appId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "appId", Err: err})
		return
	}

	// ------------- Path parameter "configKey" -------------
	var configKey string

	err = runtime.BindStyledParameterWithLocation("simple", false, "configKey", runtime.ParamLocationPath, chi.URLParam(r, "configKey"), &configKey)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "configKey", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PreferencesDeletePreferenceParams

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PreferencesDeletePreference(w, r, appId, configKey, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PreferencesSetPreference operation middleware
func (siw *ServerInterfaceWrapper) PreferencesSetPreference(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "appId" -------------
	var appId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "appId", runtime.ParamLocationPath, chi.URLParam(r, "appId"), &appId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "appId", Err: err})
		return
	}

	// ------------- Path parameter "configKey" -------------
	var configKey string

	err = runtime.BindStyledParameterWithLocation("simple", false, "configKey", runtime.ParamLocationPath, chi.URLParam(r, "configKey"), &configKey)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "configKey", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PreferencesSetPreferenceParams

	// ------------- Required query parameter "configValue" -------------

	if paramValue := r.URL.Query().Get("configValue"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "configValue"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "configValue", r.URL.Query(), &params.ConfigValue)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "configValue", Err: err})
		return
	}

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PreferencesSetPreference(w, r, appId, configKey, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AppsGetApps operation middleware
func (siw *ServerInterfaceWrapper) AppsGetApps(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params AppsGetAppsParams

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", r.URL.Query(), &params.Filter)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter", Err: err})
		return
	}

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AppsGetApps(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AppsDisable operation middleware
func (siw *ServerInterfaceWrapper) AppsDisable(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "app" -------------
	var app string

	err = runtime.BindStyledParameterWithLocation("simple", false, "app", runtime.ParamLocationPath, chi.URLParam(r, "app"), &app)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "app", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params AppsDisableParams

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AppsDisable(w, r, app, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AppsGetAppInfo operation middleware
func (siw *ServerInterfaceWrapper) AppsGetAppInfo(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "app" -------------
	var app string

	err = runtime.BindStyledParameterWithLocation("simple", false, "app", runtime.ParamLocationPath, chi.URLParam(r, "app"), &app)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "app", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params AppsGetAppInfoParams

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AppsGetAppInfo(w, r, app, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AppsEnable operation middleware
func (siw *ServerInterfaceWrapper) AppsEnable(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "app" -------------
	var app string

	err = runtime.BindStyledParameterWithLocation("simple", false, "app", runtime.ParamLocationPath, chi.URLParam(r, "app"), &app)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "app", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params AppsEnableParams

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AppsEnable(w, r, app, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GroupsGetGroups operation middleware
func (siw *ServerInterfaceWrapper) GroupsGetGroups(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GroupsGetGroupsParams

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GroupsGetGroups(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GroupsAddGroup operation middleware
func (siw *ServerInterfaceWrapper) GroupsAddGroup(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GroupsAddGroupParams

	// ------------- Required query parameter "groupid" -------------

	if paramValue := r.URL.Query().Get("groupid"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "groupid"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "groupid", r.URL.Query(), &params.Groupid)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupid", Err: err})
		return
	}

	// ------------- Optional query parameter "displayname" -------------

	err = runtime.BindQueryParameter("form", true, false, "displayname", r.URL.Query(), &params.Displayname)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "displayname", Err: err})
		return
	}

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GroupsAddGroup(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GroupsGetGroupsDetails operation middleware
func (siw *ServerInterfaceWrapper) GroupsGetGroupsDetails(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GroupsGetGroupsDetailsParams

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GroupsGetGroupsDetails(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GroupsDeleteGroup operation middleware
func (siw *ServerInterfaceWrapper) GroupsDeleteGroup(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "groupId" -------------
	var groupId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "groupId", runtime.ParamLocationPath, chi.URLParam(r, "groupId"), &groupId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GroupsDeleteGroupParams

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GroupsDeleteGroup(w, r, groupId, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GroupsGetGroup operation middleware
func (siw *ServerInterfaceWrapper) GroupsGetGroup(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "groupId" -------------
	var groupId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "groupId", runtime.ParamLocationPath, chi.URLParam(r, "groupId"), &groupId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GroupsGetGroupParams

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GroupsGetGroup(w, r, groupId, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GroupsUpdateGroup operation middleware
func (siw *ServerInterfaceWrapper) GroupsUpdateGroup(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "groupId" -------------
	var groupId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "groupId", runtime.ParamLocationPath, chi.URLParam(r, "groupId"), &groupId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GroupsUpdateGroupParams

	// ------------- Required query parameter "key" -------------

	if paramValue := r.URL.Query().Get("key"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "key"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "key", r.URL.Query(), &params.Key)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "key", Err: err})
		return
	}

	// ------------- Required query parameter "value" -------------

	if paramValue := r.URL.Query().Get("value"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "value"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "value", r.URL.Query(), &params.Value)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "value", Err: err})
		return
	}

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GroupsUpdateGroup(w, r, groupId, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GroupsGetSubAdminsOfGroup operation middleware
func (siw *ServerInterfaceWrapper) GroupsGetSubAdminsOfGroup(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "groupId" -------------
	var groupId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "groupId", runtime.ParamLocationPath, chi.URLParam(r, "groupId"), &groupId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GroupsGetSubAdminsOfGroupParams

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GroupsGetSubAdminsOfGroup(w, r, groupId, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GroupsGetGroupUsers operation middleware
func (siw *ServerInterfaceWrapper) GroupsGetGroupUsers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "groupId" -------------
	var groupId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "groupId", runtime.ParamLocationPath, chi.URLParam(r, "groupId"), &groupId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GroupsGetGroupUsersParams

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GroupsGetGroupUsers(w, r, groupId, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GroupsGetGroupUsersDetails operation middleware
func (siw *ServerInterfaceWrapper) GroupsGetGroupUsersDetails(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "groupId" -------------
	var groupId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "groupId", runtime.ParamLocationPath, chi.URLParam(r, "groupId"), &groupId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GroupsGetGroupUsersDetailsParams

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GroupsGetGroupUsersDetails(w, r, groupId, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UsersGetCurrentUser operation middleware
func (siw *ServerInterfaceWrapper) UsersGetCurrentUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UsersGetCurrentUserParams

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UsersGetCurrentUser(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UsersGetEditableFields operation middleware
func (siw *ServerInterfaceWrapper) UsersGetEditableFields(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UsersGetEditableFieldsParams

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UsersGetEditableFields(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UsersGetEditableFieldsForUser operation middleware
func (siw *ServerInterfaceWrapper) UsersGetEditableFieldsForUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, chi.URLParam(r, "userId"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UsersGetEditableFieldsForUserParams

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UsersGetEditableFieldsForUser(w, r, userId, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UsersGetUsers operation middleware
func (siw *ServerInterfaceWrapper) UsersGetUsers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UsersGetUsersParams

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UsersGetUsers(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UsersAddUser operation middleware
func (siw *ServerInterfaceWrapper) UsersAddUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UsersAddUserParams

	// ------------- Required query parameter "userid" -------------

	if paramValue := r.URL.Query().Get("userid"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "userid"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "userid", r.URL.Query(), &params.Userid)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userid", Err: err})
		return
	}

	// ------------- Optional query parameter "password" -------------

	err = runtime.BindQueryParameter("form", true, false, "password", r.URL.Query(), &params.Password)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "password", Err: err})
		return
	}

	// ------------- Optional query parameter "displayName" -------------

	err = runtime.BindQueryParameter("form", true, false, "displayName", r.URL.Query(), &params.DisplayName)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "displayName", Err: err})
		return
	}

	// ------------- Optional query parameter "email" -------------

	err = runtime.BindQueryParameter("form", true, false, "email", r.URL.Query(), &params.Email)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "email", Err: err})
		return
	}

	// ------------- Optional query parameter "groups" -------------

	err = runtime.BindQueryParameter("form", true, false, "groups", r.URL.Query(), &params.Groups)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groups", Err: err})
		return
	}

	// ------------- Optional query parameter "subadmin" -------------

	err = runtime.BindQueryParameter("form", true, false, "subadmin", r.URL.Query(), &params.Subadmin)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subadmin", Err: err})
		return
	}

	// ------------- Optional query parameter "quota" -------------

	err = runtime.BindQueryParameter("form", true, false, "quota", r.URL.Query(), &params.Quota)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "quota", Err: err})
		return
	}

	// ------------- Optional query parameter "language" -------------

	err = runtime.BindQueryParameter("form", true, false, "language", r.URL.Query(), &params.Language)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "language", Err: err})
		return
	}

	// ------------- Optional query parameter "manager" -------------

	err = runtime.BindQueryParameter("form", true, false, "manager", r.URL.Query(), &params.Manager)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "manager", Err: err})
		return
	}

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UsersAddUser(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UsersGetUsersDetails operation middleware
func (siw *ServerInterfaceWrapper) UsersGetUsersDetails(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UsersGetUsersDetailsParams

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UsersGetUsersDetails(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UsersSearchByPhoneNumbers operation middleware
func (siw *ServerInterfaceWrapper) UsersSearchByPhoneNumbers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UsersSearchByPhoneNumbersParams

	// ------------- Required query parameter "location" -------------

	if paramValue := r.URL.Query().Get("location"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "location"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "location", r.URL.Query(), &params.Location)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "location", Err: err})
		return
	}

	// ------------- Required query parameter "search" -------------

	if paramValue := r.URL.Query().Get("search"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "search"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UsersSearchByPhoneNumbers(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UsersDeleteUser operation middleware
func (siw *ServerInterfaceWrapper) UsersDeleteUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, chi.URLParam(r, "userId"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UsersDeleteUserParams

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UsersDeleteUser(w, r, userId, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UsersGetUser operation middleware
func (siw *ServerInterfaceWrapper) UsersGetUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, chi.URLParam(r, "userId"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UsersGetUserParams

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UsersGetUser(w, r, userId, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UsersEditUser operation middleware
func (siw *ServerInterfaceWrapper) UsersEditUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, chi.URLParam(r, "userId"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UsersEditUserParams

	// ------------- Required query parameter "key" -------------

	if paramValue := r.URL.Query().Get("key"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "key"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "key", r.URL.Query(), &params.Key)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "key", Err: err})
		return
	}

	// ------------- Required query parameter "value" -------------

	if paramValue := r.URL.Query().Get("value"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "value"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "value", r.URL.Query(), &params.Value)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "value", Err: err})
		return
	}

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UsersEditUser(w, r, userId, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UsersDisableUser operation middleware
func (siw *ServerInterfaceWrapper) UsersDisableUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, chi.URLParam(r, "userId"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UsersDisableUserParams

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UsersDisableUser(w, r, userId, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UsersEnableUser operation middleware
func (siw *ServerInterfaceWrapper) UsersEnableUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, chi.URLParam(r, "userId"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UsersEnableUserParams

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UsersEnableUser(w, r, userId, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UsersRemoveFromGroup operation middleware
func (siw *ServerInterfaceWrapper) UsersRemoveFromGroup(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, chi.URLParam(r, "userId"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UsersRemoveFromGroupParams

	// ------------- Required query parameter "groupid" -------------

	if paramValue := r.URL.Query().Get("groupid"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "groupid"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "groupid", r.URL.Query(), &params.Groupid)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupid", Err: err})
		return
	}

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UsersRemoveFromGroup(w, r, userId, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UsersGetUsersGroups operation middleware
func (siw *ServerInterfaceWrapper) UsersGetUsersGroups(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, chi.URLParam(r, "userId"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UsersGetUsersGroupsParams

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UsersGetUsersGroups(w, r, userId, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UsersAddToGroup operation middleware
func (siw *ServerInterfaceWrapper) UsersAddToGroup(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, chi.URLParam(r, "userId"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UsersAddToGroupParams

	// ------------- Optional query parameter "groupid" -------------

	err = runtime.BindQueryParameter("form", true, false, "groupid", r.URL.Query(), &params.Groupid)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupid", Err: err})
		return
	}

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UsersAddToGroup(w, r, userId, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UsersRemoveSubAdmin operation middleware
func (siw *ServerInterfaceWrapper) UsersRemoveSubAdmin(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, chi.URLParam(r, "userId"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UsersRemoveSubAdminParams

	// ------------- Required query parameter "groupid" -------------

	if paramValue := r.URL.Query().Get("groupid"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "groupid"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "groupid", r.URL.Query(), &params.Groupid)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupid", Err: err})
		return
	}

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UsersRemoveSubAdmin(w, r, userId, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UsersGetUserSubAdminGroups operation middleware
func (siw *ServerInterfaceWrapper) UsersGetUserSubAdminGroups(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, chi.URLParam(r, "userId"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UsersGetUserSubAdminGroupsParams

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UsersGetUserSubAdminGroups(w, r, userId, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UsersAddSubAdmin operation middleware
func (siw *ServerInterfaceWrapper) UsersAddSubAdmin(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, chi.URLParam(r, "userId"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UsersAddSubAdminParams

	// ------------- Required query parameter "groupid" -------------

	if paramValue := r.URL.Query().Get("groupid"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "groupid"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "groupid", r.URL.Query(), &params.Groupid)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupid", Err: err})
		return
	}

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UsersAddSubAdmin(w, r, userId, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UsersResendWelcomeMessage operation middleware
func (siw *ServerInterfaceWrapper) UsersResendWelcomeMessage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, chi.URLParam(r, "userId"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UsersResendWelcomeMessageParams

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UsersResendWelcomeMessage(w, r, userId, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UsersWipeUserDevices operation middleware
func (siw *ServerInterfaceWrapper) UsersWipeUserDevices(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, chi.URLParam(r, "userId"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UsersWipeUserDevicesParams

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UsersWipeUserDevices(w, r, userId, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UsersEditUserMultiValue operation middleware
func (siw *ServerInterfaceWrapper) UsersEditUserMultiValue(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, chi.URLParam(r, "userId"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	// ------------- Path parameter "collectionName" -------------
	var collectionName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "collectionName", runtime.ParamLocationPath, chi.URLParam(r, "collectionName"), &collectionName)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "collectionName", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UsersEditUserMultiValueParams

	// ------------- Required query parameter "key" -------------

	if paramValue := r.URL.Query().Get("key"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "key"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "key", r.URL.Query(), &params.Key)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "key", Err: err})
		return
	}

	// ------------- Required query parameter "value" -------------

	if paramValue := r.URL.Query().Get("value"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "value"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "value", r.URL.Query(), &params.Value)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "value", Err: err})
		return
	}

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UsersEditUserMultiValue(w, r, userId, collectionName, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/ocs/v2.php/apps/provisioning_api/api/v1/config/apps", wrapper.AppConfigGetApps)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/ocs/v2.php/apps/provisioning_api/api/v1/config/apps/{app}", wrapper.AppConfigGetKeys)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/ocs/v2.php/apps/provisioning_api/api/v1/config/apps/{app}/{key}", wrapper.AppConfigDeleteKey)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/ocs/v2.php/apps/provisioning_api/api/v1/config/apps/{app}/{key}", wrapper.AppConfigGetValue)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/ocs/v2.php/apps/provisioning_api/api/v1/config/apps/{app}/{key}", wrapper.AppConfigSetValue)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/ocs/v2.php/apps/provisioning_api/api/v1/config/users/{appId}", wrapper.PreferencesDeleteMultiplePreference)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/ocs/v2.php/apps/provisioning_api/api/v1/config/users/{appId}", wrapper.PreferencesSetMultiplePreferences)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/ocs/v2.php/apps/provisioning_api/api/v1/config/users/{appId}/{configKey}", wrapper.PreferencesDeletePreference)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/ocs/v2.php/apps/provisioning_api/api/v1/config/users/{appId}/{configKey}", wrapper.PreferencesSetPreference)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/ocs/v2.php/cloud/apps", wrapper.AppsGetApps)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/ocs/v2.php/cloud/apps/{app}", wrapper.AppsDisable)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/ocs/v2.php/cloud/apps/{app}", wrapper.AppsGetAppInfo)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/ocs/v2.php/cloud/apps/{app}", wrapper.AppsEnable)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/ocs/v2.php/cloud/groups", wrapper.GroupsGetGroups)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/ocs/v2.php/cloud/groups", wrapper.GroupsAddGroup)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/ocs/v2.php/cloud/groups/details", wrapper.GroupsGetGroupsDetails)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/ocs/v2.php/cloud/groups/{groupId}", wrapper.GroupsDeleteGroup)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/ocs/v2.php/cloud/groups/{groupId}", wrapper.GroupsGetGroup)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/ocs/v2.php/cloud/groups/{groupId}", wrapper.GroupsUpdateGroup)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/ocs/v2.php/cloud/groups/{groupId}/subadmins", wrapper.GroupsGetSubAdminsOfGroup)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/ocs/v2.php/cloud/groups/{groupId}/users", wrapper.GroupsGetGroupUsers)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/ocs/v2.php/cloud/groups/{groupId}/users/details", wrapper.GroupsGetGroupUsersDetails)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/ocs/v2.php/cloud/user", wrapper.UsersGetCurrentUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/ocs/v2.php/cloud/user/fields", wrapper.UsersGetEditableFields)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/ocs/v2.php/cloud/user/fields/{userId}", wrapper.UsersGetEditableFieldsForUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/ocs/v2.php/cloud/users", wrapper.UsersGetUsers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/ocs/v2.php/cloud/users", wrapper.UsersAddUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/ocs/v2.php/cloud/users/details", wrapper.UsersGetUsersDetails)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/ocs/v2.php/cloud/users/search/by-phone", wrapper.UsersSearchByPhoneNumbers)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/ocs/v2.php/cloud/users/{userId}", wrapper.UsersDeleteUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/ocs/v2.php/cloud/users/{userId}", wrapper.UsersGetUser)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/ocs/v2.php/cloud/users/{userId}", wrapper.UsersEditUser)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/ocs/v2.php/cloud/users/{userId}/disable", wrapper.UsersDisableUser)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/ocs/v2.php/cloud/users/{userId}/enable", wrapper.UsersEnableUser)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/ocs/v2.php/cloud/users/{userId}/groups", wrapper.UsersRemoveFromGroup)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/ocs/v2.php/cloud/users/{userId}/groups", wrapper.UsersGetUsersGroups)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/ocs/v2.php/cloud/users/{userId}/groups", wrapper.UsersAddToGroup)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/ocs/v2.php/cloud/users/{userId}/subadmins", wrapper.UsersRemoveSubAdmin)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/ocs/v2.php/cloud/users/{userId}/subadmins", wrapper.UsersGetUserSubAdminGroups)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/ocs/v2.php/cloud/users/{userId}/subadmins", wrapper.UsersAddSubAdmin)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/ocs/v2.php/cloud/users/{userId}/welcome", wrapper.UsersResendWelcomeMessage)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/ocs/v2.php/cloud/users/{userId}/wipe", wrapper.UsersWipeUserDevices)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/ocs/v2.php/cloud/users/{userId}/{collectionName}", wrapper.UsersEditUserMultiValue)
	})

	return r
}

type AppConfigGetAppsRequestObject struct {
	Params AppConfigGetAppsParams
}

type AppConfigGetAppsResponseObject interface {
	VisitAppConfigGetAppsResponse(w http.ResponseWriter) error
}

type AppConfigGetApps200JSONResponse struct {
	Ocs struct {
		Data struct {
			Data []string `json:"data"`
		} `json:"data"`
		Meta OCSMeta `json:"meta"`
	} `json:"ocs"`
}

func (response AppConfigGetApps200JSONResponse) VisitAppConfigGetAppsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AppConfigGetKeysRequestObject struct {
	App    string `json:"app"`
	Params AppConfigGetKeysParams
}

type AppConfigGetKeysResponseObject interface {
	VisitAppConfigGetKeysResponse(w http.ResponseWriter) error
}

type AppConfigGetKeys200JSONResponse struct {
	Ocs struct {
		Data struct {
			Data []string `json:"data"`
		} `json:"data"`
		Meta OCSMeta `json:"meta"`
	} `json:"ocs"`
}

func (response AppConfigGetKeys200JSONResponse) VisitAppConfigGetKeysResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AppConfigGetKeys403JSONResponse struct {
	Ocs struct {
		Data struct {
			Data struct {
				Message string `json:"message"`
			} `json:"data"`
		} `json:"data"`
		Meta OCSMeta `json:"meta"`
	} `json:"ocs"`
}

func (response AppConfigGetKeys403JSONResponse) VisitAppConfigGetKeysResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type AppConfigDeleteKeyRequestObject struct {
	App    string `json:"app"`
	Key    string `json:"key"`
	Params AppConfigDeleteKeyParams
}

type AppConfigDeleteKeyResponseObject interface {
	VisitAppConfigDeleteKeyResponse(w http.ResponseWriter) error
}

type AppConfigDeleteKey200JSONResponse struct {
	Ocs struct {
		Data map[string]interface{} `json:"data"`
		Meta OCSMeta                `json:"meta"`
	} `json:"ocs"`
}

func (response AppConfigDeleteKey200JSONResponse) VisitAppConfigDeleteKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AppConfigDeleteKey403JSONResponse struct {
	Ocs struct {
		Data struct {
			Data struct {
				Message string `json:"message"`
			} `json:"data"`
		} `json:"data"`
		Meta OCSMeta `json:"meta"`
	} `json:"ocs"`
}

func (response AppConfigDeleteKey403JSONResponse) VisitAppConfigDeleteKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type AppConfigGetValueRequestObject struct {
	App    string `json:"app"`
	Key    string `json:"key"`
	Params AppConfigGetValueParams
}

type AppConfigGetValueResponseObject interface {
	VisitAppConfigGetValueResponse(w http.ResponseWriter) error
}

type AppConfigGetValue200JSONResponse struct {
	Ocs struct {
		Data struct {
			Data string `json:"data"`
		} `json:"data"`
		Meta OCSMeta `json:"meta"`
	} `json:"ocs"`
}

func (response AppConfigGetValue200JSONResponse) VisitAppConfigGetValueResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AppConfigGetValue403JSONResponse struct {
	Ocs struct {
		Data struct {
			Data struct {
				Message string `json:"message"`
			} `json:"data"`
		} `json:"data"`
		Meta OCSMeta `json:"meta"`
	} `json:"ocs"`
}

func (response AppConfigGetValue403JSONResponse) VisitAppConfigGetValueResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type AppConfigSetValueRequestObject struct {
	App    string `json:"app"`
	Key    string `json:"key"`
	Params AppConfigSetValueParams
}

type AppConfigSetValueResponseObject interface {
	VisitAppConfigSetValueResponse(w http.ResponseWriter) error
}

type AppConfigSetValue200JSONResponse struct {
	Ocs struct {
		Data map[string]interface{} `json:"data"`
		Meta OCSMeta                `json:"meta"`
	} `json:"ocs"`
}

func (response AppConfigSetValue200JSONResponse) VisitAppConfigSetValueResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AppConfigSetValue403JSONResponse struct {
	Ocs struct {
		Data struct {
			Data struct {
				Message string `json:"message"`
			} `json:"data"`
		} `json:"data"`
		Meta OCSMeta `json:"meta"`
	} `json:"ocs"`
}

func (response AppConfigSetValue403JSONResponse) VisitAppConfigSetValueResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PreferencesDeleteMultiplePreferenceRequestObject struct {
	AppId  string `json:"appId"`
	Params PreferencesDeleteMultiplePreferenceParams
}

type PreferencesDeleteMultiplePreferenceResponseObject interface {
	VisitPreferencesDeleteMultiplePreferenceResponse(w http.ResponseWriter) error
}

type PreferencesDeleteMultiplePreference200JSONResponse struct {
	Ocs struct {
		Data map[string]interface{} `json:"data"`
		Meta OCSMeta                `json:"meta"`
	} `json:"ocs"`
}

func (response PreferencesDeleteMultiplePreference200JSONResponse) VisitPreferencesDeleteMultiplePreferenceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PreferencesDeleteMultiplePreference400JSONResponse struct {
	Ocs struct {
		Data map[string]interface{} `json:"data"`
		Meta OCSMeta                `json:"meta"`
	} `json:"ocs"`
}

func (response PreferencesDeleteMultiplePreference400JSONResponse) VisitPreferencesDeleteMultiplePreferenceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PreferencesSetMultiplePreferencesRequestObject struct {
	AppId  string `json:"appId"`
	Params PreferencesSetMultiplePreferencesParams
}

type PreferencesSetMultiplePreferencesResponseObject interface {
	VisitPreferencesSetMultiplePreferencesResponse(w http.ResponseWriter) error
}

type PreferencesSetMultiplePreferences200JSONResponse struct {
	Ocs struct {
		Data map[string]interface{} `json:"data"`
		Meta OCSMeta                `json:"meta"`
	} `json:"ocs"`
}

func (response PreferencesSetMultiplePreferences200JSONResponse) VisitPreferencesSetMultiplePreferencesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PreferencesSetMultiplePreferences400JSONResponse struct {
	Ocs struct {
		Data map[string]interface{} `json:"data"`
		Meta OCSMeta                `json:"meta"`
	} `json:"ocs"`
}

func (response PreferencesSetMultiplePreferences400JSONResponse) VisitPreferencesSetMultiplePreferencesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PreferencesDeletePreferenceRequestObject struct {
	AppId     string `json:"appId"`
	ConfigKey string `json:"configKey"`
	Params    PreferencesDeletePreferenceParams
}

type PreferencesDeletePreferenceResponseObject interface {
	VisitPreferencesDeletePreferenceResponse(w http.ResponseWriter) error
}

type PreferencesDeletePreference200JSONResponse struct {
	Ocs struct {
		Data map[string]interface{} `json:"data"`
		Meta OCSMeta                `json:"meta"`
	} `json:"ocs"`
}

func (response PreferencesDeletePreference200JSONResponse) VisitPreferencesDeletePreferenceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PreferencesDeletePreference400JSONResponse struct {
	Ocs struct {
		Data map[string]interface{} `json:"data"`
		Meta OCSMeta                `json:"meta"`
	} `json:"ocs"`
}

func (response PreferencesDeletePreference400JSONResponse) VisitPreferencesDeletePreferenceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PreferencesSetPreferenceRequestObject struct {
	AppId     string `json:"appId"`
	ConfigKey string `json:"configKey"`
	Params    PreferencesSetPreferenceParams
}

type PreferencesSetPreferenceResponseObject interface {
	VisitPreferencesSetPreferenceResponse(w http.ResponseWriter) error
}

type PreferencesSetPreference200JSONResponse struct {
	Ocs struct {
		Data map[string]interface{} `json:"data"`
		Meta OCSMeta                `json:"meta"`
	} `json:"ocs"`
}

func (response PreferencesSetPreference200JSONResponse) VisitPreferencesSetPreferenceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PreferencesSetPreference400JSONResponse struct {
	Ocs struct {
		Data map[string]interface{} `json:"data"`
		Meta OCSMeta                `json:"meta"`
	} `json:"ocs"`
}

func (response PreferencesSetPreference400JSONResponse) VisitPreferencesSetPreferenceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type AppsGetAppsRequestObject struct {
	Params AppsGetAppsParams
}

type AppsGetAppsResponseObject interface {
	VisitAppsGetAppsResponse(w http.ResponseWriter) error
}

type AppsGetApps200JSONResponse struct {
	Ocs struct {
		Data struct {
			Apps []string `json:"apps"`
		} `json:"data"`
		Meta OCSMeta `json:"meta"`
	} `json:"ocs"`
}

func (response AppsGetApps200JSONResponse) VisitAppsGetAppsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AppsDisableRequestObject struct {
	App    string `json:"app"`
	Params AppsDisableParams
}

type AppsDisableResponseObject interface {
	VisitAppsDisableResponse(w http.ResponseWriter) error
}

type AppsDisable200JSONResponse struct {
	Ocs struct {
		Data map[string]interface{} `json:"data"`
		Meta OCSMeta                `json:"meta"`
	} `json:"ocs"`
}

func (response AppsDisable200JSONResponse) VisitAppsDisableResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AppsGetAppInfoRequestObject struct {
	App    string `json:"app"`
	Params AppsGetAppInfoParams
}

type AppsGetAppInfoResponseObject interface {
	VisitAppsGetAppInfoResponse(w http.ResponseWriter) error
}

type AppsGetAppInfo200JSONResponse struct {
	Ocs struct {
		Data AppInfo `json:"data"`
		Meta OCSMeta `json:"meta"`
	} `json:"ocs"`
}

func (response AppsGetAppInfo200JSONResponse) VisitAppsGetAppInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AppsEnableRequestObject struct {
	App    string `json:"app"`
	Params AppsEnableParams
}

type AppsEnableResponseObject interface {
	VisitAppsEnableResponse(w http.ResponseWriter) error
}

type AppsEnable200JSONResponse struct {
	Ocs struct {
		Data map[string]interface{} `json:"data"`
		Meta OCSMeta                `json:"meta"`
	} `json:"ocs"`
}

func (response AppsEnable200JSONResponse) VisitAppsEnableResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GroupsGetGroupsRequestObject struct {
	Params GroupsGetGroupsParams
}

type GroupsGetGroupsResponseObject interface {
	VisitGroupsGetGroupsResponse(w http.ResponseWriter) error
}

type GroupsGetGroups200JSONResponse struct {
	Ocs struct {
		Data struct {
			Groups []string `json:"groups"`
		} `json:"data"`
		Meta OCSMeta `json:"meta"`
	} `json:"ocs"`
}

func (response GroupsGetGroups200JSONResponse) VisitGroupsGetGroupsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GroupsAddGroupRequestObject struct {
	Params GroupsAddGroupParams
}

type GroupsAddGroupResponseObject interface {
	VisitGroupsAddGroupResponse(w http.ResponseWriter) error
}

type GroupsAddGroup200JSONResponse struct {
	Ocs struct {
		Data map[string]interface{} `json:"data"`
		Meta OCSMeta                `json:"meta"`
	} `json:"ocs"`
}

func (response GroupsAddGroup200JSONResponse) VisitGroupsAddGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GroupsGetGroupsDetailsRequestObject struct {
	Params GroupsGetGroupsDetailsParams
}

type GroupsGetGroupsDetailsResponseObject interface {
	VisitGroupsGetGroupsDetailsResponse(w http.ResponseWriter) error
}

type GroupsGetGroupsDetails200JSONResponse struct {
	Ocs struct {
		Data struct {
			Groups []GroupDetails `json:"groups"`
		} `json:"data"`
		Meta OCSMeta `json:"meta"`
	} `json:"ocs"`
}

func (response GroupsGetGroupsDetails200JSONResponse) VisitGroupsGetGroupsDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GroupsDeleteGroupRequestObject struct {
	GroupId string `json:"groupId"`
	Params  GroupsDeleteGroupParams
}

type GroupsDeleteGroupResponseObject interface {
	VisitGroupsDeleteGroupResponse(w http.ResponseWriter) error
}

type GroupsDeleteGroup200JSONResponse struct {
	Ocs struct {
		Data map[string]interface{} `json:"data"`
		Meta OCSMeta                `json:"meta"`
	} `json:"ocs"`
}

func (response GroupsDeleteGroup200JSONResponse) VisitGroupsDeleteGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GroupsGetGroupRequestObject struct {
	GroupId string `json:"groupId"`
	Params  GroupsGetGroupParams
}

type GroupsGetGroupResponseObject interface {
	VisitGroupsGetGroupResponse(w http.ResponseWriter) error
}

type GroupsGetGroup200JSONResponse struct {
	Ocs struct {
		Data struct {
			Users []string `json:"users"`
		} `json:"data"`
		Meta OCSMeta `json:"meta"`
	} `json:"ocs"`
}

func (response GroupsGetGroup200JSONResponse) VisitGroupsGetGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GroupsUpdateGroupRequestObject struct {
	GroupId string `json:"groupId"`
	Params  GroupsUpdateGroupParams
}

type GroupsUpdateGroupResponseObject interface {
	VisitGroupsUpdateGroupResponse(w http.ResponseWriter) error
}

type GroupsUpdateGroup200JSONResponse struct {
	Ocs struct {
		Data map[string]interface{} `json:"data"`
		Meta OCSMeta                `json:"meta"`
	} `json:"ocs"`
}

func (response GroupsUpdateGroup200JSONResponse) VisitGroupsUpdateGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GroupsGetSubAdminsOfGroupRequestObject struct {
	GroupId string `json:"groupId"`
	Params  GroupsGetSubAdminsOfGroupParams
}

type GroupsGetSubAdminsOfGroupResponseObject interface {
	VisitGroupsGetSubAdminsOfGroupResponse(w http.ResponseWriter) error
}

type GroupsGetSubAdminsOfGroup200JSONResponse struct {
	Ocs struct {
		Data []string `json:"data"`
		Meta OCSMeta  `json:"meta"`
	} `json:"ocs"`
}

func (response GroupsGetSubAdminsOfGroup200JSONResponse) VisitGroupsGetSubAdminsOfGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GroupsGetGroupUsersRequestObject struct {
	GroupId string `json:"groupId"`
	Params  GroupsGetGroupUsersParams
}

type GroupsGetGroupUsersResponseObject interface {
	VisitGroupsGetGroupUsersResponse(w http.ResponseWriter) error
}

type GroupsGetGroupUsers200JSONResponse struct {
	Ocs struct {
		Data struct {
			Users []string `json:"users"`
		} `json:"data"`
		Meta OCSMeta `json:"meta"`
	} `json:"ocs"`
}

func (response GroupsGetGroupUsers200JSONResponse) VisitGroupsGetGroupUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GroupsGetGroupUsers403TextResponse string

func (response GroupsGetGroupUsers403TextResponse) VisitGroupsGetGroupUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(403)

	_, err := w.Write([]byte(response))
	return err
}

type GroupsGetGroupUsers404TextResponse string

func (response GroupsGetGroupUsers404TextResponse) VisitGroupsGetGroupUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(404)

	_, err := w.Write([]byte(response))
	return err
}

type GroupsGetGroupUsersDetailsRequestObject struct {
	GroupId string `json:"groupId"`
	Params  GroupsGetGroupUsersDetailsParams
}

type GroupsGetGroupUsersDetailsResponseObject interface {
	VisitGroupsGetGroupUsersDetailsResponse(w http.ResponseWriter) error
}

type GroupsGetGroupUsersDetails200JSONResponse struct {
	Ocs struct {
		Data struct {
			Users map[string]interface{} `json:"users"`
		} `json:"data"`
		Meta OCSMeta `json:"meta"`
	} `json:"ocs"`
}

func (response GroupsGetGroupUsersDetails200JSONResponse) VisitGroupsGetGroupUsersDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UsersGetCurrentUserRequestObject struct {
	Params UsersGetCurrentUserParams
}

type UsersGetCurrentUserResponseObject interface {
	VisitUsersGetCurrentUserResponse(w http.ResponseWriter) error
}

type UsersGetCurrentUser200JSONResponse struct {
	Ocs struct {
		Data UserDetails `json:"data"`
		Meta OCSMeta     `json:"meta"`
	} `json:"ocs"`
}

func (response UsersGetCurrentUser200JSONResponse) VisitUsersGetCurrentUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UsersGetEditableFieldsRequestObject struct {
	Params UsersGetEditableFieldsParams
}

type UsersGetEditableFieldsResponseObject interface {
	VisitUsersGetEditableFieldsResponse(w http.ResponseWriter) error
}

type UsersGetEditableFields200JSONResponse struct {
	Ocs struct {
		Data []string `json:"data"`
		Meta OCSMeta  `json:"meta"`
	} `json:"ocs"`
}

func (response UsersGetEditableFields200JSONResponse) VisitUsersGetEditableFieldsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UsersGetEditableFieldsForUserRequestObject struct {
	UserId string `json:"userId"`
	Params UsersGetEditableFieldsForUserParams
}

type UsersGetEditableFieldsForUserResponseObject interface {
	VisitUsersGetEditableFieldsForUserResponse(w http.ResponseWriter) error
}

type UsersGetEditableFieldsForUser200JSONResponse struct {
	Ocs struct {
		Data []string `json:"data"`
		Meta OCSMeta  `json:"meta"`
	} `json:"ocs"`
}

func (response UsersGetEditableFieldsForUser200JSONResponse) VisitUsersGetEditableFieldsForUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UsersGetUsersRequestObject struct {
	Params UsersGetUsersParams
}

type UsersGetUsersResponseObject interface {
	VisitUsersGetUsersResponse(w http.ResponseWriter) error
}

type UsersGetUsers200JSONResponse struct {
	Ocs struct {
		Data struct {
			Users []string `json:"users"`
		} `json:"data"`
		Meta OCSMeta `json:"meta"`
	} `json:"ocs"`
}

func (response UsersGetUsers200JSONResponse) VisitUsersGetUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UsersAddUserRequestObject struct {
	Params UsersAddUserParams
}

type UsersAddUserResponseObject interface {
	VisitUsersAddUserResponse(w http.ResponseWriter) error
}

type UsersAddUser200JSONResponse struct {
	Ocs struct {
		Data struct {
			Id string `json:"id"`
		} `json:"data"`
		Meta OCSMeta `json:"meta"`
	} `json:"ocs"`
}

func (response UsersAddUser200JSONResponse) VisitUsersAddUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UsersAddUser403TextResponse string

func (response UsersAddUser403TextResponse) VisitUsersAddUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(403)

	_, err := w.Write([]byte(response))
	return err
}

type UsersGetUsersDetailsRequestObject struct {
	Params UsersGetUsersDetailsParams
}

type UsersGetUsersDetailsResponseObject interface {
	VisitUsersGetUsersDetailsResponse(w http.ResponseWriter) error
}

type UsersGetUsersDetails200JSONResponse struct {
	Ocs struct {
		Data struct {
			Users map[string]interface{} `json:"users"`
		} `json:"data"`
		Meta OCSMeta `json:"meta"`
	} `json:"ocs"`
}

func (response UsersGetUsersDetails200JSONResponse) VisitUsersGetUsersDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UsersSearchByPhoneNumbersRequestObject struct {
	Params UsersSearchByPhoneNumbersParams
}

type UsersSearchByPhoneNumbersResponseObject interface {
	VisitUsersSearchByPhoneNumbersResponse(w http.ResponseWriter) error
}

type UsersSearchByPhoneNumbers200JSONResponse struct {
	Ocs struct {
		Data map[string]string `json:"data"`
		Meta OCSMeta           `json:"meta"`
	} `json:"ocs"`
}

func (response UsersSearchByPhoneNumbers200JSONResponse) VisitUsersSearchByPhoneNumbersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UsersSearchByPhoneNumbers400JSONResponse struct {
	Ocs struct {
		Data map[string]interface{} `json:"data"`
		Meta OCSMeta                `json:"meta"`
	} `json:"ocs"`
}

func (response UsersSearchByPhoneNumbers400JSONResponse) VisitUsersSearchByPhoneNumbersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UsersDeleteUserRequestObject struct {
	UserId string `json:"userId"`
	Params UsersDeleteUserParams
}

type UsersDeleteUserResponseObject interface {
	VisitUsersDeleteUserResponse(w http.ResponseWriter) error
}

type UsersDeleteUser200JSONResponse struct {
	Ocs struct {
		Data map[string]interface{} `json:"data"`
		Meta OCSMeta                `json:"meta"`
	} `json:"ocs"`
}

func (response UsersDeleteUser200JSONResponse) VisitUsersDeleteUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UsersGetUserRequestObject struct {
	UserId string `json:"userId"`
	Params UsersGetUserParams
}

type UsersGetUserResponseObject interface {
	VisitUsersGetUserResponse(w http.ResponseWriter) error
}

type UsersGetUser200JSONResponse struct {
	Ocs struct {
		Data UserDetails `json:"data"`
		Meta OCSMeta     `json:"meta"`
	} `json:"ocs"`
}

func (response UsersGetUser200JSONResponse) VisitUsersGetUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UsersEditUserRequestObject struct {
	UserId string `json:"userId"`
	Params UsersEditUserParams
}

type UsersEditUserResponseObject interface {
	VisitUsersEditUserResponse(w http.ResponseWriter) error
}

type UsersEditUser200JSONResponse struct {
	Ocs struct {
		Data map[string]interface{} `json:"data"`
		Meta OCSMeta                `json:"meta"`
	} `json:"ocs"`
}

func (response UsersEditUser200JSONResponse) VisitUsersEditUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UsersDisableUserRequestObject struct {
	UserId string `json:"userId"`
	Params UsersDisableUserParams
}

type UsersDisableUserResponseObject interface {
	VisitUsersDisableUserResponse(w http.ResponseWriter) error
}

type UsersDisableUser200JSONResponse struct {
	Ocs struct {
		Data map[string]interface{} `json:"data"`
		Meta OCSMeta                `json:"meta"`
	} `json:"ocs"`
}

func (response UsersDisableUser200JSONResponse) VisitUsersDisableUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UsersEnableUserRequestObject struct {
	UserId string `json:"userId"`
	Params UsersEnableUserParams
}

type UsersEnableUserResponseObject interface {
	VisitUsersEnableUserResponse(w http.ResponseWriter) error
}

type UsersEnableUser200JSONResponse struct {
	Ocs struct {
		Data map[string]interface{} `json:"data"`
		Meta OCSMeta                `json:"meta"`
	} `json:"ocs"`
}

func (response UsersEnableUser200JSONResponse) VisitUsersEnableUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UsersRemoveFromGroupRequestObject struct {
	UserId string `json:"userId"`
	Params UsersRemoveFromGroupParams
}

type UsersRemoveFromGroupResponseObject interface {
	VisitUsersRemoveFromGroupResponse(w http.ResponseWriter) error
}

type UsersRemoveFromGroup200JSONResponse struct {
	Ocs struct {
		Data map[string]interface{} `json:"data"`
		Meta OCSMeta                `json:"meta"`
	} `json:"ocs"`
}

func (response UsersRemoveFromGroup200JSONResponse) VisitUsersRemoveFromGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UsersGetUsersGroupsRequestObject struct {
	UserId string `json:"userId"`
	Params UsersGetUsersGroupsParams
}

type UsersGetUsersGroupsResponseObject interface {
	VisitUsersGetUsersGroupsResponse(w http.ResponseWriter) error
}

type UsersGetUsersGroups200JSONResponse struct {
	Ocs struct {
		Data struct {
			Groups []string `json:"groups"`
		} `json:"data"`
		Meta OCSMeta `json:"meta"`
	} `json:"ocs"`
}

func (response UsersGetUsersGroups200JSONResponse) VisitUsersGetUsersGroupsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UsersAddToGroupRequestObject struct {
	UserId string `json:"userId"`
	Params UsersAddToGroupParams
}

type UsersAddToGroupResponseObject interface {
	VisitUsersAddToGroupResponse(w http.ResponseWriter) error
}

type UsersAddToGroup200JSONResponse struct {
	Ocs struct {
		Data map[string]interface{} `json:"data"`
		Meta OCSMeta                `json:"meta"`
	} `json:"ocs"`
}

func (response UsersAddToGroup200JSONResponse) VisitUsersAddToGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UsersRemoveSubAdminRequestObject struct {
	UserId string `json:"userId"`
	Params UsersRemoveSubAdminParams
}

type UsersRemoveSubAdminResponseObject interface {
	VisitUsersRemoveSubAdminResponse(w http.ResponseWriter) error
}

type UsersRemoveSubAdmin200JSONResponse struct {
	Ocs struct {
		Data map[string]interface{} `json:"data"`
		Meta OCSMeta                `json:"meta"`
	} `json:"ocs"`
}

func (response UsersRemoveSubAdmin200JSONResponse) VisitUsersRemoveSubAdminResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UsersGetUserSubAdminGroupsRequestObject struct {
	UserId string `json:"userId"`
	Params UsersGetUserSubAdminGroupsParams
}

type UsersGetUserSubAdminGroupsResponseObject interface {
	VisitUsersGetUserSubAdminGroupsResponse(w http.ResponseWriter) error
}

type UsersGetUserSubAdminGroups200JSONResponse struct {
	Ocs struct {
		Data []string `json:"data"`
		Meta OCSMeta  `json:"meta"`
	} `json:"ocs"`
}

func (response UsersGetUserSubAdminGroups200JSONResponse) VisitUsersGetUserSubAdminGroupsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UsersAddSubAdminRequestObject struct {
	UserId string `json:"userId"`
	Params UsersAddSubAdminParams
}

type UsersAddSubAdminResponseObject interface {
	VisitUsersAddSubAdminResponse(w http.ResponseWriter) error
}

type UsersAddSubAdmin200JSONResponse struct {
	Ocs struct {
		Data map[string]interface{} `json:"data"`
		Meta OCSMeta                `json:"meta"`
	} `json:"ocs"`
}

func (response UsersAddSubAdmin200JSONResponse) VisitUsersAddSubAdminResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UsersResendWelcomeMessageRequestObject struct {
	UserId string `json:"userId"`
	Params UsersResendWelcomeMessageParams
}

type UsersResendWelcomeMessageResponseObject interface {
	VisitUsersResendWelcomeMessageResponse(w http.ResponseWriter) error
}

type UsersResendWelcomeMessage200JSONResponse struct {
	Ocs struct {
		Data map[string]interface{} `json:"data"`
		Meta OCSMeta                `json:"meta"`
	} `json:"ocs"`
}

func (response UsersResendWelcomeMessage200JSONResponse) VisitUsersResendWelcomeMessageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UsersWipeUserDevicesRequestObject struct {
	UserId string `json:"userId"`
	Params UsersWipeUserDevicesParams
}

type UsersWipeUserDevicesResponseObject interface {
	VisitUsersWipeUserDevicesResponse(w http.ResponseWriter) error
}

type UsersWipeUserDevices200JSONResponse struct {
	Ocs struct {
		Data map[string]interface{} `json:"data"`
		Meta OCSMeta                `json:"meta"`
	} `json:"ocs"`
}

func (response UsersWipeUserDevices200JSONResponse) VisitUsersWipeUserDevicesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UsersEditUserMultiValueRequestObject struct {
	UserId         string `json:"userId"`
	CollectionName string `json:"collectionName"`
	Params         UsersEditUserMultiValueParams
}

type UsersEditUserMultiValueResponseObject interface {
	VisitUsersEditUserMultiValueResponse(w http.ResponseWriter) error
}

type UsersEditUserMultiValue200JSONResponse struct {
	Ocs struct {
		Data map[string]interface{} `json:"data"`
		Meta OCSMeta                `json:"meta"`
	} `json:"ocs"`
}

func (response UsersEditUserMultiValue200JSONResponse) VisitUsersEditUserMultiValueResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get a list of apps
	// (GET /ocs/v2.php/apps/provisioning_api/api/v1/config/apps)
	AppConfigGetApps(ctx context.Context, request AppConfigGetAppsRequestObject) (AppConfigGetAppsResponseObject, error)
	// Get the config keys of an app
	// (GET /ocs/v2.php/apps/provisioning_api/api/v1/config/apps/{app})
	AppConfigGetKeys(ctx context.Context, request AppConfigGetKeysRequestObject) (AppConfigGetKeysResponseObject, error)
	// Delete a config key of an app
	// (DELETE /ocs/v2.php/apps/provisioning_api/api/v1/config/apps/{app}/{key})
	AppConfigDeleteKey(ctx context.Context, request AppConfigDeleteKeyRequestObject) (AppConfigDeleteKeyResponseObject, error)
	// Get a the config value of an app
	// (GET /ocs/v2.php/apps/provisioning_api/api/v1/config/apps/{app}/{key})
	AppConfigGetValue(ctx context.Context, request AppConfigGetValueRequestObject) (AppConfigGetValueResponseObject, error)
	// Update the config value of an app
	// (POST /ocs/v2.php/apps/provisioning_api/api/v1/config/apps/{app}/{key})
	AppConfigSetValue(ctx context.Context, request AppConfigSetValueRequestObject) (AppConfigSetValueResponseObject, error)
	// Delete multiple preferences for an app
	// (DELETE /ocs/v2.php/apps/provisioning_api/api/v1/config/users/{appId})
	PreferencesDeleteMultiplePreference(ctx context.Context, request PreferencesDeleteMultiplePreferenceRequestObject) (PreferencesDeleteMultiplePreferenceResponseObject, error)
	// Update multiple preference values of an app
	// (POST /ocs/v2.php/apps/provisioning_api/api/v1/config/users/{appId})
	PreferencesSetMultiplePreferences(ctx context.Context, request PreferencesSetMultiplePreferencesRequestObject) (PreferencesSetMultiplePreferencesResponseObject, error)
	// Delete a preference for an app
	// (DELETE /ocs/v2.php/apps/provisioning_api/api/v1/config/users/{appId}/{configKey})
	PreferencesDeletePreference(ctx context.Context, request PreferencesDeletePreferenceRequestObject) (PreferencesDeletePreferenceResponseObject, error)
	// Update a preference value of an app
	// (POST /ocs/v2.php/apps/provisioning_api/api/v1/config/users/{appId}/{configKey})
	PreferencesSetPreference(ctx context.Context, request PreferencesSetPreferenceRequestObject) (PreferencesSetPreferenceResponseObject, error)
	// Get a list of installed apps
	// (GET /ocs/v2.php/cloud/apps)
	AppsGetApps(ctx context.Context, request AppsGetAppsRequestObject) (AppsGetAppsResponseObject, error)
	// Disable an app
	// (DELETE /ocs/v2.php/cloud/apps/{app})
	AppsDisable(ctx context.Context, request AppsDisableRequestObject) (AppsDisableResponseObject, error)
	// Get the app info for an app
	// (GET /ocs/v2.php/cloud/apps/{app})
	AppsGetAppInfo(ctx context.Context, request AppsGetAppInfoRequestObject) (AppsGetAppInfoResponseObject, error)
	// Enable an app
	// (POST /ocs/v2.php/cloud/apps/{app})
	AppsEnable(ctx context.Context, request AppsEnableRequestObject) (AppsEnableResponseObject, error)
	// Get a list of groups
	// (GET /ocs/v2.php/cloud/groups)
	GroupsGetGroups(ctx context.Context, request GroupsGetGroupsRequestObject) (GroupsGetGroupsResponseObject, error)
	// Create a new group
	// (POST /ocs/v2.php/cloud/groups)
	GroupsAddGroup(ctx context.Context, request GroupsAddGroupRequestObject) (GroupsAddGroupResponseObject, error)
	// Get a list of groups details
	// (GET /ocs/v2.php/cloud/groups/details)
	GroupsGetGroupsDetails(ctx context.Context, request GroupsGetGroupsDetailsRequestObject) (GroupsGetGroupsDetailsResponseObject, error)
	// Delete a group
	// (DELETE /ocs/v2.php/cloud/groups/{groupId})
	GroupsDeleteGroup(ctx context.Context, request GroupsDeleteGroupRequestObject) (GroupsDeleteGroupResponseObject, error)
	// Get a list of users in the specified group
	// (GET /ocs/v2.php/cloud/groups/{groupId})
	GroupsGetGroup(ctx context.Context, request GroupsGetGroupRequestObject) (GroupsGetGroupResponseObject, error)
	// Update a group
	// (PUT /ocs/v2.php/cloud/groups/{groupId})
	GroupsUpdateGroup(ctx context.Context, request GroupsUpdateGroupRequestObject) (GroupsUpdateGroupResponseObject, error)
	// Get the list of user IDs that are a subadmin of the group
	// (GET /ocs/v2.php/cloud/groups/{groupId}/subadmins)
	GroupsGetSubAdminsOfGroup(ctx context.Context, request GroupsGetSubAdminsOfGroupRequestObject) (GroupsGetSubAdminsOfGroupResponseObject, error)
	// Get a list of users in the specified group
	// (GET /ocs/v2.php/cloud/groups/{groupId}/users)
	GroupsGetGroupUsers(ctx context.Context, request GroupsGetGroupUsersRequestObject) (GroupsGetGroupUsersResponseObject, error)
	// Get a list of users details in the specified group
	// (GET /ocs/v2.php/cloud/groups/{groupId}/users/details)
	GroupsGetGroupUsersDetails(ctx context.Context, request GroupsGetGroupUsersDetailsRequestObject) (GroupsGetGroupUsersDetailsResponseObject, error)
	// Get the details of the current user
	// (GET /ocs/v2.php/cloud/user)
	UsersGetCurrentUser(ctx context.Context, request UsersGetCurrentUserRequestObject) (UsersGetCurrentUserResponseObject, error)
	// Get a list of fields that are editable for the current user
	// (GET /ocs/v2.php/cloud/user/fields)
	UsersGetEditableFields(ctx context.Context, request UsersGetEditableFieldsRequestObject) (UsersGetEditableFieldsResponseObject, error)
	// Get a list of fields that are editable for a user
	// (GET /ocs/v2.php/cloud/user/fields/{userId})
	UsersGetEditableFieldsForUser(ctx context.Context, request UsersGetEditableFieldsForUserRequestObject) (UsersGetEditableFieldsForUserResponseObject, error)
	// Get a list of users
	// (GET /ocs/v2.php/cloud/users)
	UsersGetUsers(ctx context.Context, request UsersGetUsersRequestObject) (UsersGetUsersResponseObject, error)
	// Create a new user
	// (POST /ocs/v2.php/cloud/users)
	UsersAddUser(ctx context.Context, request UsersAddUserRequestObject) (UsersAddUserResponseObject, error)
	// Get a list of users and their details
	// (GET /ocs/v2.php/cloud/users/details)
	UsersGetUsersDetails(ctx context.Context, request UsersGetUsersDetailsRequestObject) (UsersGetUsersDetailsResponseObject, error)
	// Search users by their phone numbers
	// (POST /ocs/v2.php/cloud/users/search/by-phone)
	UsersSearchByPhoneNumbers(ctx context.Context, request UsersSearchByPhoneNumbersRequestObject) (UsersSearchByPhoneNumbersResponseObject, error)
	// Delete a user
	// (DELETE /ocs/v2.php/cloud/users/{userId})
	UsersDeleteUser(ctx context.Context, request UsersDeleteUserRequestObject) (UsersDeleteUserResponseObject, error)
	// Get the details of a user
	// (GET /ocs/v2.php/cloud/users/{userId})
	UsersGetUser(ctx context.Context, request UsersGetUserRequestObject) (UsersGetUserResponseObject, error)
	// Update a value of the user's details
	// (PUT /ocs/v2.php/cloud/users/{userId})
	UsersEditUser(ctx context.Context, request UsersEditUserRequestObject) (UsersEditUserResponseObject, error)
	// Disable a user
	// (PUT /ocs/v2.php/cloud/users/{userId}/disable)
	UsersDisableUser(ctx context.Context, request UsersDisableUserRequestObject) (UsersDisableUserResponseObject, error)
	// Enable a user
	// (PUT /ocs/v2.php/cloud/users/{userId}/enable)
	UsersEnableUser(ctx context.Context, request UsersEnableUserRequestObject) (UsersEnableUserResponseObject, error)
	// Remove a user from a group
	// (DELETE /ocs/v2.php/cloud/users/{userId}/groups)
	UsersRemoveFromGroup(ctx context.Context, request UsersRemoveFromGroupRequestObject) (UsersRemoveFromGroupResponseObject, error)
	// Get a list of groups the user belongs to
	// (GET /ocs/v2.php/cloud/users/{userId}/groups)
	UsersGetUsersGroups(ctx context.Context, request UsersGetUsersGroupsRequestObject) (UsersGetUsersGroupsResponseObject, error)
	// Add a user to a group
	// (POST /ocs/v2.php/cloud/users/{userId}/groups)
	UsersAddToGroup(ctx context.Context, request UsersAddToGroupRequestObject) (UsersAddToGroupResponseObject, error)
	// Remove a user from the subadmins of a group
	// (DELETE /ocs/v2.php/cloud/users/{userId}/subadmins)
	UsersRemoveSubAdmin(ctx context.Context, request UsersRemoveSubAdminRequestObject) (UsersRemoveSubAdminResponseObject, error)
	// Get the groups a user is a subadmin of
	// (GET /ocs/v2.php/cloud/users/{userId}/subadmins)
	UsersGetUserSubAdminGroups(ctx context.Context, request UsersGetUserSubAdminGroupsRequestObject) (UsersGetUserSubAdminGroupsResponseObject, error)
	// Make a user a subadmin of a group
	// (POST /ocs/v2.php/cloud/users/{userId}/subadmins)
	UsersAddSubAdmin(ctx context.Context, request UsersAddSubAdminRequestObject) (UsersAddSubAdminResponseObject, error)
	// Resend the welcome message
	// (POST /ocs/v2.php/cloud/users/{userId}/welcome)
	UsersResendWelcomeMessage(ctx context.Context, request UsersResendWelcomeMessageRequestObject) (UsersResendWelcomeMessageResponseObject, error)
	// Wipe all devices of a user
	// (POST /ocs/v2.php/cloud/users/{userId}/wipe)
	UsersWipeUserDevices(ctx context.Context, request UsersWipeUserDevicesRequestObject) (UsersWipeUserDevicesResponseObject, error)
	// Update multiple values of the user's details
	// (PUT /ocs/v2.php/cloud/users/{userId}/{collectionName})
	UsersEditUserMultiValue(ctx context.Context, request UsersEditUserMultiValueRequestObject) (UsersEditUserMultiValueResponseObject, error)
}

type StrictHandlerFunc = runtime.StrictHttpHandlerFunc
type StrictMiddlewareFunc = runtime.StrictHttpMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// AppConfigGetApps operation middleware
func (sh *strictHandler) AppConfigGetApps(w http.ResponseWriter, r *http.Request, params AppConfigGetAppsParams) {
	var request AppConfigGetAppsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AppConfigGetApps(ctx, request.(AppConfigGetAppsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AppConfigGetApps")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AppConfigGetAppsResponseObject); ok {
		if err := validResponse.VisitAppConfigGetAppsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// AppConfigGetKeys operation middleware
func (sh *strictHandler) AppConfigGetKeys(w http.ResponseWriter, r *http.Request, app string, params AppConfigGetKeysParams) {
	var request AppConfigGetKeysRequestObject

	request.App = app
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AppConfigGetKeys(ctx, request.(AppConfigGetKeysRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AppConfigGetKeys")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AppConfigGetKeysResponseObject); ok {
		if err := validResponse.VisitAppConfigGetKeysResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// AppConfigDeleteKey operation middleware
func (sh *strictHandler) AppConfigDeleteKey(w http.ResponseWriter, r *http.Request, app string, key string, params AppConfigDeleteKeyParams) {
	var request AppConfigDeleteKeyRequestObject

	request.App = app
	request.Key = key
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AppConfigDeleteKey(ctx, request.(AppConfigDeleteKeyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AppConfigDeleteKey")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AppConfigDeleteKeyResponseObject); ok {
		if err := validResponse.VisitAppConfigDeleteKeyResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// AppConfigGetValue operation middleware
func (sh *strictHandler) AppConfigGetValue(w http.ResponseWriter, r *http.Request, app string, key string, params AppConfigGetValueParams) {
	var request AppConfigGetValueRequestObject

	request.App = app
	request.Key = key
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AppConfigGetValue(ctx, request.(AppConfigGetValueRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AppConfigGetValue")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AppConfigGetValueResponseObject); ok {
		if err := validResponse.VisitAppConfigGetValueResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// AppConfigSetValue operation middleware
func (sh *strictHandler) AppConfigSetValue(w http.ResponseWriter, r *http.Request, app string, key string, params AppConfigSetValueParams) {
	var request AppConfigSetValueRequestObject

	request.App = app
	request.Key = key
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AppConfigSetValue(ctx, request.(AppConfigSetValueRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AppConfigSetValue")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AppConfigSetValueResponseObject); ok {
		if err := validResponse.VisitAppConfigSetValueResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// PreferencesDeleteMultiplePreference operation middleware
func (sh *strictHandler) PreferencesDeleteMultiplePreference(w http.ResponseWriter, r *http.Request, appId string, params PreferencesDeleteMultiplePreferenceParams) {
	var request PreferencesDeleteMultiplePreferenceRequestObject

	request.AppId = appId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PreferencesDeleteMultiplePreference(ctx, request.(PreferencesDeleteMultiplePreferenceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PreferencesDeleteMultiplePreference")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PreferencesDeleteMultiplePreferenceResponseObject); ok {
		if err := validResponse.VisitPreferencesDeleteMultiplePreferenceResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// PreferencesSetMultiplePreferences operation middleware
func (sh *strictHandler) PreferencesSetMultiplePreferences(w http.ResponseWriter, r *http.Request, appId string, params PreferencesSetMultiplePreferencesParams) {
	var request PreferencesSetMultiplePreferencesRequestObject

	request.AppId = appId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PreferencesSetMultiplePreferences(ctx, request.(PreferencesSetMultiplePreferencesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PreferencesSetMultiplePreferences")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PreferencesSetMultiplePreferencesResponseObject); ok {
		if err := validResponse.VisitPreferencesSetMultiplePreferencesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// PreferencesDeletePreference operation middleware
func (sh *strictHandler) PreferencesDeletePreference(w http.ResponseWriter, r *http.Request, appId string, configKey string, params PreferencesDeletePreferenceParams) {
	var request PreferencesDeletePreferenceRequestObject

	request.AppId = appId
	request.ConfigKey = configKey
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PreferencesDeletePreference(ctx, request.(PreferencesDeletePreferenceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PreferencesDeletePreference")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PreferencesDeletePreferenceResponseObject); ok {
		if err := validResponse.VisitPreferencesDeletePreferenceResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// PreferencesSetPreference operation middleware
func (sh *strictHandler) PreferencesSetPreference(w http.ResponseWriter, r *http.Request, appId string, configKey string, params PreferencesSetPreferenceParams) {
	var request PreferencesSetPreferenceRequestObject

	request.AppId = appId
	request.ConfigKey = configKey
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PreferencesSetPreference(ctx, request.(PreferencesSetPreferenceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PreferencesSetPreference")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PreferencesSetPreferenceResponseObject); ok {
		if err := validResponse.VisitPreferencesSetPreferenceResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// AppsGetApps operation middleware
func (sh *strictHandler) AppsGetApps(w http.ResponseWriter, r *http.Request, params AppsGetAppsParams) {
	var request AppsGetAppsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AppsGetApps(ctx, request.(AppsGetAppsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AppsGetApps")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AppsGetAppsResponseObject); ok {
		if err := validResponse.VisitAppsGetAppsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// AppsDisable operation middleware
func (sh *strictHandler) AppsDisable(w http.ResponseWriter, r *http.Request, app string, params AppsDisableParams) {
	var request AppsDisableRequestObject

	request.App = app
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AppsDisable(ctx, request.(AppsDisableRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AppsDisable")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AppsDisableResponseObject); ok {
		if err := validResponse.VisitAppsDisableResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// AppsGetAppInfo operation middleware
func (sh *strictHandler) AppsGetAppInfo(w http.ResponseWriter, r *http.Request, app string, params AppsGetAppInfoParams) {
	var request AppsGetAppInfoRequestObject

	request.App = app
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AppsGetAppInfo(ctx, request.(AppsGetAppInfoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AppsGetAppInfo")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AppsGetAppInfoResponseObject); ok {
		if err := validResponse.VisitAppsGetAppInfoResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// AppsEnable operation middleware
func (sh *strictHandler) AppsEnable(w http.ResponseWriter, r *http.Request, app string, params AppsEnableParams) {
	var request AppsEnableRequestObject

	request.App = app
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AppsEnable(ctx, request.(AppsEnableRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AppsEnable")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AppsEnableResponseObject); ok {
		if err := validResponse.VisitAppsEnableResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GroupsGetGroups operation middleware
func (sh *strictHandler) GroupsGetGroups(w http.ResponseWriter, r *http.Request, params GroupsGetGroupsParams) {
	var request GroupsGetGroupsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GroupsGetGroups(ctx, request.(GroupsGetGroupsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GroupsGetGroups")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GroupsGetGroupsResponseObject); ok {
		if err := validResponse.VisitGroupsGetGroupsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GroupsAddGroup operation middleware
func (sh *strictHandler) GroupsAddGroup(w http.ResponseWriter, r *http.Request, params GroupsAddGroupParams) {
	var request GroupsAddGroupRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GroupsAddGroup(ctx, request.(GroupsAddGroupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GroupsAddGroup")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GroupsAddGroupResponseObject); ok {
		if err := validResponse.VisitGroupsAddGroupResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GroupsGetGroupsDetails operation middleware
func (sh *strictHandler) GroupsGetGroupsDetails(w http.ResponseWriter, r *http.Request, params GroupsGetGroupsDetailsParams) {
	var request GroupsGetGroupsDetailsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GroupsGetGroupsDetails(ctx, request.(GroupsGetGroupsDetailsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GroupsGetGroupsDetails")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GroupsGetGroupsDetailsResponseObject); ok {
		if err := validResponse.VisitGroupsGetGroupsDetailsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GroupsDeleteGroup operation middleware
func (sh *strictHandler) GroupsDeleteGroup(w http.ResponseWriter, r *http.Request, groupId string, params GroupsDeleteGroupParams) {
	var request GroupsDeleteGroupRequestObject

	request.GroupId = groupId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GroupsDeleteGroup(ctx, request.(GroupsDeleteGroupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GroupsDeleteGroup")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GroupsDeleteGroupResponseObject); ok {
		if err := validResponse.VisitGroupsDeleteGroupResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GroupsGetGroup operation middleware
func (sh *strictHandler) GroupsGetGroup(w http.ResponseWriter, r *http.Request, groupId string, params GroupsGetGroupParams) {
	var request GroupsGetGroupRequestObject

	request.GroupId = groupId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GroupsGetGroup(ctx, request.(GroupsGetGroupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GroupsGetGroup")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GroupsGetGroupResponseObject); ok {
		if err := validResponse.VisitGroupsGetGroupResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GroupsUpdateGroup operation middleware
func (sh *strictHandler) GroupsUpdateGroup(w http.ResponseWriter, r *http.Request, groupId string, params GroupsUpdateGroupParams) {
	var request GroupsUpdateGroupRequestObject

	request.GroupId = groupId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GroupsUpdateGroup(ctx, request.(GroupsUpdateGroupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GroupsUpdateGroup")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GroupsUpdateGroupResponseObject); ok {
		if err := validResponse.VisitGroupsUpdateGroupResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GroupsGetSubAdminsOfGroup operation middleware
func (sh *strictHandler) GroupsGetSubAdminsOfGroup(w http.ResponseWriter, r *http.Request, groupId string, params GroupsGetSubAdminsOfGroupParams) {
	var request GroupsGetSubAdminsOfGroupRequestObject

	request.GroupId = groupId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GroupsGetSubAdminsOfGroup(ctx, request.(GroupsGetSubAdminsOfGroupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GroupsGetSubAdminsOfGroup")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GroupsGetSubAdminsOfGroupResponseObject); ok {
		if err := validResponse.VisitGroupsGetSubAdminsOfGroupResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GroupsGetGroupUsers operation middleware
func (sh *strictHandler) GroupsGetGroupUsers(w http.ResponseWriter, r *http.Request, groupId string, params GroupsGetGroupUsersParams) {
	var request GroupsGetGroupUsersRequestObject

	request.GroupId = groupId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GroupsGetGroupUsers(ctx, request.(GroupsGetGroupUsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GroupsGetGroupUsers")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GroupsGetGroupUsersResponseObject); ok {
		if err := validResponse.VisitGroupsGetGroupUsersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GroupsGetGroupUsersDetails operation middleware
func (sh *strictHandler) GroupsGetGroupUsersDetails(w http.ResponseWriter, r *http.Request, groupId string, params GroupsGetGroupUsersDetailsParams) {
	var request GroupsGetGroupUsersDetailsRequestObject

	request.GroupId = groupId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GroupsGetGroupUsersDetails(ctx, request.(GroupsGetGroupUsersDetailsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GroupsGetGroupUsersDetails")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GroupsGetGroupUsersDetailsResponseObject); ok {
		if err := validResponse.VisitGroupsGetGroupUsersDetailsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// UsersGetCurrentUser operation middleware
func (sh *strictHandler) UsersGetCurrentUser(w http.ResponseWriter, r *http.Request, params UsersGetCurrentUserParams) {
	var request UsersGetCurrentUserRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UsersGetCurrentUser(ctx, request.(UsersGetCurrentUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UsersGetCurrentUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UsersGetCurrentUserResponseObject); ok {
		if err := validResponse.VisitUsersGetCurrentUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// UsersGetEditableFields operation middleware
func (sh *strictHandler) UsersGetEditableFields(w http.ResponseWriter, r *http.Request, params UsersGetEditableFieldsParams) {
	var request UsersGetEditableFieldsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UsersGetEditableFields(ctx, request.(UsersGetEditableFieldsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UsersGetEditableFields")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UsersGetEditableFieldsResponseObject); ok {
		if err := validResponse.VisitUsersGetEditableFieldsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// UsersGetEditableFieldsForUser operation middleware
func (sh *strictHandler) UsersGetEditableFieldsForUser(w http.ResponseWriter, r *http.Request, userId string, params UsersGetEditableFieldsForUserParams) {
	var request UsersGetEditableFieldsForUserRequestObject

	request.UserId = userId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UsersGetEditableFieldsForUser(ctx, request.(UsersGetEditableFieldsForUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UsersGetEditableFieldsForUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UsersGetEditableFieldsForUserResponseObject); ok {
		if err := validResponse.VisitUsersGetEditableFieldsForUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// UsersGetUsers operation middleware
func (sh *strictHandler) UsersGetUsers(w http.ResponseWriter, r *http.Request, params UsersGetUsersParams) {
	var request UsersGetUsersRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UsersGetUsers(ctx, request.(UsersGetUsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UsersGetUsers")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UsersGetUsersResponseObject); ok {
		if err := validResponse.VisitUsersGetUsersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// UsersAddUser operation middleware
func (sh *strictHandler) UsersAddUser(w http.ResponseWriter, r *http.Request, params UsersAddUserParams) {
	var request UsersAddUserRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UsersAddUser(ctx, request.(UsersAddUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UsersAddUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UsersAddUserResponseObject); ok {
		if err := validResponse.VisitUsersAddUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// UsersGetUsersDetails operation middleware
func (sh *strictHandler) UsersGetUsersDetails(w http.ResponseWriter, r *http.Request, params UsersGetUsersDetailsParams) {
	var request UsersGetUsersDetailsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UsersGetUsersDetails(ctx, request.(UsersGetUsersDetailsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UsersGetUsersDetails")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UsersGetUsersDetailsResponseObject); ok {
		if err := validResponse.VisitUsersGetUsersDetailsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// UsersSearchByPhoneNumbers operation middleware
func (sh *strictHandler) UsersSearchByPhoneNumbers(w http.ResponseWriter, r *http.Request, params UsersSearchByPhoneNumbersParams) {
	var request UsersSearchByPhoneNumbersRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UsersSearchByPhoneNumbers(ctx, request.(UsersSearchByPhoneNumbersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UsersSearchByPhoneNumbers")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UsersSearchByPhoneNumbersResponseObject); ok {
		if err := validResponse.VisitUsersSearchByPhoneNumbersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// UsersDeleteUser operation middleware
func (sh *strictHandler) UsersDeleteUser(w http.ResponseWriter, r *http.Request, userId string, params UsersDeleteUserParams) {
	var request UsersDeleteUserRequestObject

	request.UserId = userId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UsersDeleteUser(ctx, request.(UsersDeleteUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UsersDeleteUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UsersDeleteUserResponseObject); ok {
		if err := validResponse.VisitUsersDeleteUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// UsersGetUser operation middleware
func (sh *strictHandler) UsersGetUser(w http.ResponseWriter, r *http.Request, userId string, params UsersGetUserParams) {
	var request UsersGetUserRequestObject

	request.UserId = userId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UsersGetUser(ctx, request.(UsersGetUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UsersGetUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UsersGetUserResponseObject); ok {
		if err := validResponse.VisitUsersGetUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// UsersEditUser operation middleware
func (sh *strictHandler) UsersEditUser(w http.ResponseWriter, r *http.Request, userId string, params UsersEditUserParams) {
	var request UsersEditUserRequestObject

	request.UserId = userId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UsersEditUser(ctx, request.(UsersEditUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UsersEditUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UsersEditUserResponseObject); ok {
		if err := validResponse.VisitUsersEditUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// UsersDisableUser operation middleware
func (sh *strictHandler) UsersDisableUser(w http.ResponseWriter, r *http.Request, userId string, params UsersDisableUserParams) {
	var request UsersDisableUserRequestObject

	request.UserId = userId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UsersDisableUser(ctx, request.(UsersDisableUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UsersDisableUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UsersDisableUserResponseObject); ok {
		if err := validResponse.VisitUsersDisableUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// UsersEnableUser operation middleware
func (sh *strictHandler) UsersEnableUser(w http.ResponseWriter, r *http.Request, userId string, params UsersEnableUserParams) {
	var request UsersEnableUserRequestObject

	request.UserId = userId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UsersEnableUser(ctx, request.(UsersEnableUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UsersEnableUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UsersEnableUserResponseObject); ok {
		if err := validResponse.VisitUsersEnableUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// UsersRemoveFromGroup operation middleware
func (sh *strictHandler) UsersRemoveFromGroup(w http.ResponseWriter, r *http.Request, userId string, params UsersRemoveFromGroupParams) {
	var request UsersRemoveFromGroupRequestObject

	request.UserId = userId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UsersRemoveFromGroup(ctx, request.(UsersRemoveFromGroupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UsersRemoveFromGroup")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UsersRemoveFromGroupResponseObject); ok {
		if err := validResponse.VisitUsersRemoveFromGroupResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// UsersGetUsersGroups operation middleware
func (sh *strictHandler) UsersGetUsersGroups(w http.ResponseWriter, r *http.Request, userId string, params UsersGetUsersGroupsParams) {
	var request UsersGetUsersGroupsRequestObject

	request.UserId = userId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UsersGetUsersGroups(ctx, request.(UsersGetUsersGroupsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UsersGetUsersGroups")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UsersGetUsersGroupsResponseObject); ok {
		if err := validResponse.VisitUsersGetUsersGroupsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// UsersAddToGroup operation middleware
func (sh *strictHandler) UsersAddToGroup(w http.ResponseWriter, r *http.Request, userId string, params UsersAddToGroupParams) {
	var request UsersAddToGroupRequestObject

	request.UserId = userId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UsersAddToGroup(ctx, request.(UsersAddToGroupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UsersAddToGroup")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UsersAddToGroupResponseObject); ok {
		if err := validResponse.VisitUsersAddToGroupResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// UsersRemoveSubAdmin operation middleware
func (sh *strictHandler) UsersRemoveSubAdmin(w http.ResponseWriter, r *http.Request, userId string, params UsersRemoveSubAdminParams) {
	var request UsersRemoveSubAdminRequestObject

	request.UserId = userId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UsersRemoveSubAdmin(ctx, request.(UsersRemoveSubAdminRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UsersRemoveSubAdmin")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UsersRemoveSubAdminResponseObject); ok {
		if err := validResponse.VisitUsersRemoveSubAdminResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// UsersGetUserSubAdminGroups operation middleware
func (sh *strictHandler) UsersGetUserSubAdminGroups(w http.ResponseWriter, r *http.Request, userId string, params UsersGetUserSubAdminGroupsParams) {
	var request UsersGetUserSubAdminGroupsRequestObject

	request.UserId = userId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UsersGetUserSubAdminGroups(ctx, request.(UsersGetUserSubAdminGroupsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UsersGetUserSubAdminGroups")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UsersGetUserSubAdminGroupsResponseObject); ok {
		if err := validResponse.VisitUsersGetUserSubAdminGroupsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// UsersAddSubAdmin operation middleware
func (sh *strictHandler) UsersAddSubAdmin(w http.ResponseWriter, r *http.Request, userId string, params UsersAddSubAdminParams) {
	var request UsersAddSubAdminRequestObject

	request.UserId = userId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UsersAddSubAdmin(ctx, request.(UsersAddSubAdminRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UsersAddSubAdmin")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UsersAddSubAdminResponseObject); ok {
		if err := validResponse.VisitUsersAddSubAdminResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// UsersResendWelcomeMessage operation middleware
func (sh *strictHandler) UsersResendWelcomeMessage(w http.ResponseWriter, r *http.Request, userId string, params UsersResendWelcomeMessageParams) {
	var request UsersResendWelcomeMessageRequestObject

	request.UserId = userId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UsersResendWelcomeMessage(ctx, request.(UsersResendWelcomeMessageRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UsersResendWelcomeMessage")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UsersResendWelcomeMessageResponseObject); ok {
		if err := validResponse.VisitUsersResendWelcomeMessageResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// UsersWipeUserDevices operation middleware
func (sh *strictHandler) UsersWipeUserDevices(w http.ResponseWriter, r *http.Request, userId string, params UsersWipeUserDevicesParams) {
	var request UsersWipeUserDevicesRequestObject

	request.UserId = userId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UsersWipeUserDevices(ctx, request.(UsersWipeUserDevicesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UsersWipeUserDevices")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UsersWipeUserDevicesResponseObject); ok {
		if err := validResponse.VisitUsersWipeUserDevicesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// UsersEditUserMultiValue operation middleware
func (sh *strictHandler) UsersEditUserMultiValue(w http.ResponseWriter, r *http.Request, userId string, collectionName string, params UsersEditUserMultiValueParams) {
	var request UsersEditUserMultiValueRequestObject

	request.UserId = userId
	request.CollectionName = collectionName
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UsersEditUserMultiValue(ctx, request.(UsersEditUserMultiValueRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UsersEditUserMultiValue")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UsersEditUserMultiValueResponseObject); ok {
		if err := validResponse.VisitUsersEditUserMultiValueResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}
