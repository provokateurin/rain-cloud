// Package core provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package core

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/go-chi/chi/v5"
)

const (
	Basic_authScopes  = "basic_auth.Scopes"
	Bearer_authScopes = "bearer_auth.Scopes"
)

// AutocompleteResult defines model for AutocompleteResult.
type AutocompleteResult struct {
	Icon                       string `json:"icon"`
	Id                         string `json:"id"`
	Label                      string `json:"label"`
	ShareWithDisplayNameUnique string `json:"shareWithDisplayNameUnique"`
	Source                     string `json:"source"`
	Status                     string `json:"status"`
	Subline                    string `json:"subline"`
}

// Collection defines model for Collection.
type Collection struct {
	Id        string                              `json:"id"`
	Name      string                              `json:"name"`
	Resources []map[string]map[string]interface{} `json:"resources"`
}

// ContactsAction defines model for ContactsAction.
type ContactsAction struct {
	AppId     string `json:"appId"`
	Hyperlink string `json:"hyperlink"`
	Icon      string `json:"icon"`
	Title     string `json:"title"`
}

// LoginFlowV2 defines model for LoginFlowV2.
type LoginFlowV2 struct {
	Login string `json:"login"`
	Poll  struct {
		Endpoint string `json:"endpoint"`
		Token    string `json:"token"`
	} `json:"poll"`
}

// LoginFlowV2Credentials defines model for LoginFlowV2Credentials.
type LoginFlowV2Credentials struct {
	AppPassword string `json:"appPassword"`
	LoginName   string `json:"loginName"`
	Server      string `json:"server"`
}

// NavigationEntry defines model for NavigationEntry.
type NavigationEntry struct {
	Active  bool                  `json:"active"`
	Classes string                `json:"classes"`
	Href    string                `json:"href"`
	Icon    string                `json:"icon"`
	Id      string                `json:"id"`
	Name    string                `json:"name"`
	Order   NavigationEntry_Order `json:"order"`
	Type    string                `json:"type"`
	Unread  int64                 `json:"unread"`
}

// NavigationEntryOrder0 defines model for .
type NavigationEntryOrder0 = int64

// NavigationEntryOrder1 defines model for .
type NavigationEntryOrder1 = string

// NavigationEntry_Order defines model for NavigationEntry.Order.
type NavigationEntry_Order struct {
	union json.RawMessage
}

// OCSMeta defines model for OCSMeta.
type OCSMeta struct {
	Itemsperpage *string `json:"itemsperpage,omitempty"`
	Message      *string `json:"message,omitempty"`
	Status       string  `json:"status"`
	Statuscode   int     `json:"statuscode"`
	Totalitems   *string `json:"totalitems,omitempty"`
}

// Reference defines model for Reference.
type Reference struct {
	Accessible      bool `json:"accessible"`
	OpenGraphObject struct {
		Description *string `json:"description"`
		Id          string  `json:"id"`
		Link        string  `json:"link"`
		Name        string  `json:"name"`
		Thumb       *string `json:"thumb"`
	} `json:"openGraphObject"`
	RichObject     map[string]map[string]interface{} `json:"richObject"`
	RichObjectType string                            `json:"richObjectType"`
}

// ReferenceProvider defines model for ReferenceProvider.
type ReferenceProvider struct {
	IconUrl            string    `json:"icon_url"`
	Id                 string    `json:"id"`
	Order              int64     `json:"order"`
	SearchProvidersIds *[]string `json:"search_providers_ids"`
	Title              string    `json:"title"`
}

// Status defines model for Status.
type Status struct {
	Edition         string `json:"edition"`
	ExtendedSupport bool   `json:"extendedSupport"`
	Installed       bool   `json:"installed"`
	Maintenance     bool   `json:"maintenance"`
	NeedsDbUpgrade  bool   `json:"needsDbUpgrade"`
	Productname     string `json:"productname"`
	Version         string `json:"version"`
	Versionstring   string `json:"versionstring"`
}

// UnifiedSearchProvider defines model for UnifiedSearchProvider.
type UnifiedSearchProvider struct {
	Id    string `json:"id"`
	Name  string `json:"name"`
	Order int64  `json:"order"`
}

// UnifiedSearchResult defines model for UnifiedSearchResult.
type UnifiedSearchResult struct {
	Cursor      *UnifiedSearchResult_Cursor `json:"cursor"`
	Entries     []UnifiedSearchResultEntry  `json:"entries"`
	IsPaginated bool                        `json:"isPaginated"`
	Name        string                      `json:"name"`
}

// UnifiedSearchResultCursor0 defines model for .
type UnifiedSearchResultCursor0 = int64

// UnifiedSearchResultCursor1 defines model for .
type UnifiedSearchResultCursor1 = string

// UnifiedSearchResult_Cursor defines model for UnifiedSearchResult.Cursor.
type UnifiedSearchResult_Cursor struct {
	union json.RawMessage
}

// UnifiedSearchResultEntry defines model for UnifiedSearchResultEntry.
type UnifiedSearchResultEntry struct {
	Attributes   []string `json:"attributes"`
	Icon         string   `json:"icon"`
	ResourceUrl  string   `json:"resourceUrl"`
	Rounded      bool     `json:"rounded"`
	Subline      string   `json:"subline"`
	ThumbnailUrl string   `json:"thumbnailUrl"`
	Title        string   `json:"title"`
}

// GuestAvatarGetAvatarParams defines parameters for GuestAvatarGetAvatar.
type GuestAvatarGetAvatarParams struct {
	// DarkTheme Return dark avatar
	DarkTheme *int `form:"darkTheme,omitempty" json:"darkTheme,omitempty"`
}

// PreviewGetPreviewByFileIdParams defines parameters for PreviewGetPreviewByFileId.
type PreviewGetPreviewByFileIdParams struct {
	// FileId ID of the file
	FileId *int64 `form:"fileId,omitempty" json:"fileId,omitempty"`

	// X Width of the preview
	X *int64 `form:"x,omitempty" json:"x,omitempty"`

	// Y Height of the preview
	Y *int64 `form:"y,omitempty" json:"y,omitempty"`

	// A Not crop the preview
	A *int `form:"a,omitempty" json:"a,omitempty"`

	// ForceIcon Force returning an icon
	ForceIcon *int `form:"forceIcon,omitempty" json:"forceIcon,omitempty"`

	// Mode How to crop the image
	Mode *string `form:"mode,omitempty" json:"mode,omitempty"`
}

// PreviewGetPreviewParams defines parameters for PreviewGetPreview.
type PreviewGetPreviewParams struct {
	// File Path of the file
	File *string `form:"file,omitempty" json:"file,omitempty"`

	// X Width of the preview
	X *int64 `form:"x,omitempty" json:"x,omitempty"`

	// Y Height of the preview
	Y *int64 `form:"y,omitempty" json:"y,omitempty"`

	// A Not crop the preview
	A *int `form:"a,omitempty" json:"a,omitempty"`

	// ForceIcon Force returning an icon
	ForceIcon *int `form:"forceIcon,omitempty" json:"forceIcon,omitempty"`

	// Mode How to crop the image
	Mode *string `form:"mode,omitempty" json:"mode,omitempty"`
}

// WipeCheckWipeParams defines parameters for WipeCheckWipe.
type WipeCheckWipeParams struct {
	// Token App password
	Token string `form:"token" json:"token"`
}

// WipeWipeDoneParams defines parameters for WipeWipeDone.
type WipeWipeDoneParams struct {
	// Token App password
	Token string `form:"token" json:"token"`
}

// ClientFlowLoginV2PollParams defines parameters for ClientFlowLoginV2Poll.
type ClientFlowLoginV2PollParams struct {
	// Token Token of the flow
	Token string `form:"token" json:"token"`
}

// OcsGetCapabilitiesParams defines parameters for OcsGetCapabilities.
type OcsGetCapabilitiesParams struct {
	OCSAPIRequest string `json:"OCS-APIRequest"`
}

// CollaborationResourcesSearchCollectionsParams defines parameters for CollaborationResourcesSearchCollections.
type CollaborationResourcesSearchCollectionsParams struct {
	OCSAPIRequest string `json:"OCS-APIRequest"`
}

// CollaborationResourcesRemoveResourceParams defines parameters for CollaborationResourcesRemoveResource.
type CollaborationResourcesRemoveResourceParams struct {
	// ResourceType Name of the resource
	ResourceType string `form:"resourceType" json:"resourceType"`

	// ResourceId ID of the resource
	ResourceId    string `form:"resourceId" json:"resourceId"`
	OCSAPIRequest string `json:"OCS-APIRequest"`
}

// CollaborationResourcesListCollectionParams defines parameters for CollaborationResourcesListCollection.
type CollaborationResourcesListCollectionParams struct {
	OCSAPIRequest string `json:"OCS-APIRequest"`
}

// CollaborationResourcesAddResourceParams defines parameters for CollaborationResourcesAddResource.
type CollaborationResourcesAddResourceParams struct {
	// ResourceType Name of the resource
	ResourceType string `form:"resourceType" json:"resourceType"`

	// ResourceId ID of the resource
	ResourceId    string `form:"resourceId" json:"resourceId"`
	OCSAPIRequest string `json:"OCS-APIRequest"`
}

// CollaborationResourcesRenameCollectionParams defines parameters for CollaborationResourcesRenameCollection.
type CollaborationResourcesRenameCollectionParams struct {
	// CollectionName New name
	CollectionName string `form:"collectionName" json:"collectionName"`
	OCSAPIRequest  string `json:"OCS-APIRequest"`
}

// CollaborationResourcesCreateCollectionOnResourceParams defines parameters for CollaborationResourcesCreateCollectionOnResource.
type CollaborationResourcesCreateCollectionOnResourceParams struct {
	// Name Name of the collection
	Name          string `form:"name" json:"name"`
	OCSAPIRequest string `json:"OCS-APIRequest"`
}

// CollaborationResourcesGetCollectionsByResourceParams defines parameters for CollaborationResourcesGetCollectionsByResource.
type CollaborationResourcesGetCollectionsByResourceParams struct {
	OCSAPIRequest string `json:"OCS-APIRequest"`
}

// AppPasswordDeleteAppPasswordParams defines parameters for AppPasswordDeleteAppPassword.
type AppPasswordDeleteAppPasswordParams struct {
	OCSAPIRequest string `json:"OCS-APIRequest"`
}

// AppPasswordRotateAppPasswordParams defines parameters for AppPasswordRotateAppPassword.
type AppPasswordRotateAppPasswordParams struct {
	OCSAPIRequest string `json:"OCS-APIRequest"`
}

// AutoCompleteGetParams defines parameters for AutoCompleteGet.
type AutoCompleteGetParams struct {
	// Search Text to search for
	Search string `form:"search" json:"search"`

	// ItemType Type of the items to search for
	ItemType *string `form:"itemType,omitempty" json:"itemType,omitempty"`

	// ItemId ID of the items to search for
	ItemId *string `form:"itemId,omitempty" json:"itemId,omitempty"`

	// Sorter can be piped, top prio first, e.g.: "commenters|share-recipients"
	Sorter *string `form:"sorter,omitempty" json:"sorter,omitempty"`

	// ShareTypes Types of shares to search for
	ShareTypes *string `form:"shareTypes,omitempty" json:"shareTypes,omitempty"`

	// Limit Maximum number of results to return
	Limit         *int64 `form:"limit,omitempty" json:"limit,omitempty"`
	OCSAPIRequest string `json:"OCS-APIRequest"`
}

// AppPasswordGetAppPasswordParams defines parameters for AppPasswordGetAppPassword.
type AppPasswordGetAppPasswordParams struct {
	OCSAPIRequest string `json:"OCS-APIRequest"`
}

// NavigationGetAppsNavigationParams defines parameters for NavigationGetAppsNavigation.
type NavigationGetAppsNavigationParams struct {
	// Absolute Rewrite URLs to absolute ones
	Absolute      *int   `form:"absolute,omitempty" json:"absolute,omitempty"`
	OCSAPIRequest string `json:"OCS-APIRequest"`
}

// NavigationGetSettingsNavigationParams defines parameters for NavigationGetSettingsNavigation.
type NavigationGetSettingsNavigationParams struct {
	// Absolute Rewrite URLs to absolute ones
	Absolute      *int   `form:"absolute,omitempty" json:"absolute,omitempty"`
	OCSAPIRequest string `json:"OCS-APIRequest"`
}

// WhatsNewGetParams defines parameters for WhatsNewGet.
type WhatsNewGetParams struct {
	OCSAPIRequest string `json:"OCS-APIRequest"`
}

// WhatsNewDismissParams defines parameters for WhatsNewDismiss.
type WhatsNewDismissParams struct {
	// Version Version to dismiss the changes for
	Version       string `form:"version" json:"version"`
	OCSAPIRequest string `json:"OCS-APIRequest"`
}

// HoverCardGetUserParams defines parameters for HoverCardGetUser.
type HoverCardGetUserParams struct {
	OCSAPIRequest string `json:"OCS-APIRequest"`
}

// ProfileApiSetVisibilityParams defines parameters for ProfileApiSetVisibility.
type ProfileApiSetVisibilityParams struct {
	// ParamId ID of the parameter
	ParamId string `form:"paramId" json:"paramId"`

	// Visibility New visibility
	Visibility    string `form:"visibility" json:"visibility"`
	OCSAPIRequest string `json:"OCS-APIRequest"`
}

// ReferenceApiExtractParams defines parameters for ReferenceApiExtract.
type ReferenceApiExtractParams struct {
	// Text Text to extract from
	Text string `form:"text" json:"text"`

	// Resolve Resolve the references
	Resolve *int `form:"resolve,omitempty" json:"resolve,omitempty"`

	// Limit Maximum amount of references to extract
	Limit         *int64 `form:"limit,omitempty" json:"limit,omitempty"`
	OCSAPIRequest string `json:"OCS-APIRequest"`
}

// ReferenceApiTouchProviderParams defines parameters for ReferenceApiTouchProvider.
type ReferenceApiTouchProviderParams struct {
	// Timestamp Timestamp of the last usage
	Timestamp     *int64 `form:"timestamp,omitempty" json:"timestamp,omitempty"`
	OCSAPIRequest string `json:"OCS-APIRequest"`
}

// ReferenceApiGetProvidersInfoParams defines parameters for ReferenceApiGetProvidersInfo.
type ReferenceApiGetProvidersInfoParams struct {
	OCSAPIRequest string `json:"OCS-APIRequest"`
}

// ReferenceApiResolveOneParams defines parameters for ReferenceApiResolveOne.
type ReferenceApiResolveOneParams struct {
	// Reference Reference to resolve
	Reference     string `form:"reference" json:"reference"`
	OCSAPIRequest string `json:"OCS-APIRequest"`
}

// ReferenceApiResolveParams defines parameters for ReferenceApiResolve.
type ReferenceApiResolveParams struct {
	// References References to resolve
	References string `form:"references" json:"references"`

	// Limit Maximum amount of references to resolve
	Limit         *int64 `form:"limit,omitempty" json:"limit,omitempty"`
	OCSAPIRequest string `json:"OCS-APIRequest"`
}

// UnifiedSearchGetProvidersParams defines parameters for UnifiedSearchGetProviders.
type UnifiedSearchGetProvidersParams struct {
	// From the url the user is currently at
	From          *string `form:"from,omitempty" json:"from,omitempty"`
	OCSAPIRequest string  `json:"OCS-APIRequest"`
}

// UnifiedSearchSearchParams defines parameters for UnifiedSearchSearch.
type UnifiedSearchSearchParams struct {
	// Term Term to search
	Term *string `form:"term,omitempty" json:"term,omitempty"`

	// SortOrder Order of entries
	SortOrder *int64 `form:"sortOrder,omitempty" json:"sortOrder,omitempty"`

	// Limit Maximum amount of entries
	Limit *int64 `form:"limit,omitempty" json:"limit,omitempty"`

	// Cursor Offset for searching
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// From The current user URL
	From          *string `form:"from,omitempty" json:"from,omitempty"`
	OCSAPIRequest string  `json:"OCS-APIRequest"`
}

// TranslationApiLanguagesParams defines parameters for TranslationApiLanguages.
type TranslationApiLanguagesParams struct {
	OCSAPIRequest string `json:"OCS-APIRequest"`
}

// TranslationApiTranslateParams defines parameters for TranslationApiTranslate.
type TranslationApiTranslateParams struct {
	// Text Text to be translated
	Text string `form:"text" json:"text"`

	// FromLanguage Language to translate from
	FromLanguage *string `form:"fromLanguage,omitempty" json:"fromLanguage,omitempty"`

	// ToLanguage Language to translate to
	ToLanguage    string `form:"toLanguage" json:"toLanguage"`
	OCSAPIRequest string `json:"OCS-APIRequest"`
}

// AsNavigationEntryOrder0 returns the union data inside the NavigationEntry_Order as a NavigationEntryOrder0
func (t NavigationEntry_Order) AsNavigationEntryOrder0() (NavigationEntryOrder0, error) {
	var body NavigationEntryOrder0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNavigationEntryOrder0 overwrites any union data inside the NavigationEntry_Order as the provided NavigationEntryOrder0
func (t *NavigationEntry_Order) FromNavigationEntryOrder0(v NavigationEntryOrder0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNavigationEntryOrder0 performs a merge with any union data inside the NavigationEntry_Order, using the provided NavigationEntryOrder0
func (t *NavigationEntry_Order) MergeNavigationEntryOrder0(v NavigationEntryOrder0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsNavigationEntryOrder1 returns the union data inside the NavigationEntry_Order as a NavigationEntryOrder1
func (t NavigationEntry_Order) AsNavigationEntryOrder1() (NavigationEntryOrder1, error) {
	var body NavigationEntryOrder1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNavigationEntryOrder1 overwrites any union data inside the NavigationEntry_Order as the provided NavigationEntryOrder1
func (t *NavigationEntry_Order) FromNavigationEntryOrder1(v NavigationEntryOrder1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNavigationEntryOrder1 performs a merge with any union data inside the NavigationEntry_Order, using the provided NavigationEntryOrder1
func (t *NavigationEntry_Order) MergeNavigationEntryOrder1(v NavigationEntryOrder1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t NavigationEntry_Order) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *NavigationEntry_Order) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsUnifiedSearchResultCursor0 returns the union data inside the UnifiedSearchResult_Cursor as a UnifiedSearchResultCursor0
func (t UnifiedSearchResult_Cursor) AsUnifiedSearchResultCursor0() (UnifiedSearchResultCursor0, error) {
	var body UnifiedSearchResultCursor0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnifiedSearchResultCursor0 overwrites any union data inside the UnifiedSearchResult_Cursor as the provided UnifiedSearchResultCursor0
func (t *UnifiedSearchResult_Cursor) FromUnifiedSearchResultCursor0(v UnifiedSearchResultCursor0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnifiedSearchResultCursor0 performs a merge with any union data inside the UnifiedSearchResult_Cursor, using the provided UnifiedSearchResultCursor0
func (t *UnifiedSearchResult_Cursor) MergeUnifiedSearchResultCursor0(v UnifiedSearchResultCursor0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnifiedSearchResultCursor1 returns the union data inside the UnifiedSearchResult_Cursor as a UnifiedSearchResultCursor1
func (t UnifiedSearchResult_Cursor) AsUnifiedSearchResultCursor1() (UnifiedSearchResultCursor1, error) {
	var body UnifiedSearchResultCursor1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnifiedSearchResultCursor1 overwrites any union data inside the UnifiedSearchResult_Cursor as the provided UnifiedSearchResultCursor1
func (t *UnifiedSearchResult_Cursor) FromUnifiedSearchResultCursor1(v UnifiedSearchResultCursor1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnifiedSearchResultCursor1 performs a merge with any union data inside the UnifiedSearchResult_Cursor, using the provided UnifiedSearchResultCursor1
func (t *UnifiedSearchResult_Cursor) MergeUnifiedSearchResultCursor1(v UnifiedSearchResultCursor1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t UnifiedSearchResult_Cursor) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *UnifiedSearchResult_Cursor) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns a guest avatar image response
	// (GET /avatar/guest/{guestName}/{size})
	GuestAvatarGetAvatar(w http.ResponseWriter, r *http.Request, guestName string, size string, params GuestAvatarGetAvatarParams)
	// Returns a dark guest avatar image response
	// (GET /avatar/guest/{guestName}/{size}/dark)
	GuestAvatarGetAvatarDark(w http.ResponseWriter, r *http.Request, guestName string, size string)
	// Get the avatar
	// (GET /avatar/{userId}/{size})
	AvatarGetAvatar(w http.ResponseWriter, r *http.Request, userId string, size int64)
	// Get the dark avatar
	// (GET /avatar/{userId}/{size}/dark)
	AvatarGetAvatarDark(w http.ResponseWriter, r *http.Request, userId string, size int64)
	// Get a preview by file ID
	// (GET /core/preview)
	PreviewGetPreviewByFileId(w http.ResponseWriter, r *http.Request, params PreviewGetPreviewByFileIdParams)
	// Get a preview by file ID
	// (GET /core/preview.png)
	PreviewGetPreview(w http.ResponseWriter, r *http.Request, params PreviewGetPreviewParams)
	// Get a preview for a reference
	// (GET /core/references/preview/{referenceId})
	ReferencePreview(w http.ResponseWriter, r *http.Request, referenceId string)
	// Check if the device should be wiped
	// (POST /core/wipe/check)
	WipeCheckWipe(w http.ResponseWriter, r *http.Request, params WipeCheckWipeParams)
	// Finish the wipe
	// (POST /core/wipe/success)
	WipeWipeDone(w http.ResponseWriter, r *http.Request, params WipeWipeDoneParams)
	// Init a login flow
	// (POST /login/v2)
	ClientFlowLoginV2Init(w http.ResponseWriter, r *http.Request)
	// Poll the login flow credentials
	// (POST /login/v2/poll)
	ClientFlowLoginV2Poll(w http.ResponseWriter, r *http.Request, params ClientFlowLoginV2PollParams)
	// Get the capabilities
	// (GET /ocs/v2.php/cloud/capabilities)
	OcsGetCapabilities(w http.ResponseWriter, r *http.Request, params OcsGetCapabilitiesParams)
	// Search for collections
	// (GET /ocs/v2.php/collaboration/resources/collections/search/{filter})
	CollaborationResourcesSearchCollections(w http.ResponseWriter, r *http.Request, filter string, params CollaborationResourcesSearchCollectionsParams)
	// Remove a resource from a collection
	// (DELETE /ocs/v2.php/collaboration/resources/collections/{collectionId})
	CollaborationResourcesRemoveResource(w http.ResponseWriter, r *http.Request, collectionId int64, params CollaborationResourcesRemoveResourceParams)
	// Get a collection
	// (GET /ocs/v2.php/collaboration/resources/collections/{collectionId})
	CollaborationResourcesListCollection(w http.ResponseWriter, r *http.Request, collectionId int64, params CollaborationResourcesListCollectionParams)
	// Add a resource to a collection
	// (POST /ocs/v2.php/collaboration/resources/collections/{collectionId})
	CollaborationResourcesAddResource(w http.ResponseWriter, r *http.Request, collectionId int64, params CollaborationResourcesAddResourceParams)
	// Rename a collection
	// (PUT /ocs/v2.php/collaboration/resources/collections/{collectionId})
	CollaborationResourcesRenameCollection(w http.ResponseWriter, r *http.Request, collectionId int64, params CollaborationResourcesRenameCollectionParams)
	// Create a collection for a resource
	// (POST /ocs/v2.php/collaboration/resources/{baseResourceType}/{baseResourceId})
	CollaborationResourcesCreateCollectionOnResource(w http.ResponseWriter, r *http.Request, baseResourceType string, baseResourceId string, params CollaborationResourcesCreateCollectionOnResourceParams)
	// Get collections by resource
	// (GET /ocs/v2.php/collaboration/resources/{resourceType}/{resourceId})
	CollaborationResourcesGetCollectionsByResource(w http.ResponseWriter, r *http.Request, resourceType string, resourceId string, params CollaborationResourcesGetCollectionsByResourceParams)
	// Delete app password
	// (DELETE /ocs/v2.php/core/apppassword)
	AppPasswordDeleteAppPassword(w http.ResponseWriter, r *http.Request, params AppPasswordDeleteAppPasswordParams)
	// Rotate app password
	// (POST /ocs/v2.php/core/apppassword/rotate)
	AppPasswordRotateAppPassword(w http.ResponseWriter, r *http.Request, params AppPasswordRotateAppPasswordParams)
	// Autocomplete a query
	// (GET /ocs/v2.php/core/autocomplete/get)
	AutoCompleteGet(w http.ResponseWriter, r *http.Request, params AutoCompleteGetParams)
	// Create app password
	// (GET /ocs/v2.php/core/getapppassword)
	AppPasswordGetAppPassword(w http.ResponseWriter, r *http.Request, params AppPasswordGetAppPasswordParams)
	// Get the apps navigation
	// (GET /ocs/v2.php/core/navigation/apps)
	NavigationGetAppsNavigation(w http.ResponseWriter, r *http.Request, params NavigationGetAppsNavigationParams)
	// Get the settings navigation
	// (GET /ocs/v2.php/core/navigation/settings)
	NavigationGetSettingsNavigation(w http.ResponseWriter, r *http.Request, params NavigationGetSettingsNavigationParams)
	// Get the changes
	// (GET /ocs/v2.php/core/whatsnew)
	WhatsNewGet(w http.ResponseWriter, r *http.Request, params WhatsNewGetParams)
	// Dismiss the changes
	// (POST /ocs/v2.php/core/whatsnew)
	WhatsNewDismiss(w http.ResponseWriter, r *http.Request, params WhatsNewDismissParams)
	// Get the user details for a hovercard
	// (GET /ocs/v2.php/hovercard/v1/{userId})
	HoverCardGetUser(w http.ResponseWriter, r *http.Request, userId string, params HoverCardGetUserParams)
	// Update the visiblity of a parameter
	// (PUT /ocs/v2.php/profile/{targetUserId})
	ProfileApiSetVisibility(w http.ResponseWriter, r *http.Request, targetUserId string, params ProfileApiSetVisibilityParams)
	// Extract references from a text
	// (POST /ocs/v2.php/references/extract)
	ReferenceApiExtract(w http.ResponseWriter, r *http.Request, params ReferenceApiExtractParams)
	// Touch a provider
	// (PUT /ocs/v2.php/references/provider/{providerId})
	ReferenceApiTouchProvider(w http.ResponseWriter, r *http.Request, providerId string, params ReferenceApiTouchProviderParams)
	// Get the providers
	// (GET /ocs/v2.php/references/providers)
	ReferenceApiGetProvidersInfo(w http.ResponseWriter, r *http.Request, params ReferenceApiGetProvidersInfoParams)
	// Resolve a reference
	// (GET /ocs/v2.php/references/resolve)
	ReferenceApiResolveOne(w http.ResponseWriter, r *http.Request, params ReferenceApiResolveOneParams)
	// Resolve multiple references
	// (POST /ocs/v2.php/references/resolve)
	ReferenceApiResolve(w http.ResponseWriter, r *http.Request, params ReferenceApiResolveParams)
	// Get the providers for unified search
	// (GET /ocs/v2.php/search/providers)
	UnifiedSearchGetProviders(w http.ResponseWriter, r *http.Request, params UnifiedSearchGetProvidersParams)
	// Search
	// (GET /ocs/v2.php/search/providers/{providerId}/search)
	UnifiedSearchSearch(w http.ResponseWriter, r *http.Request, providerId string, params UnifiedSearchSearchParams)
	// Get the list of supported languages
	// (GET /ocs/v2.php/translation/languages)
	TranslationApiLanguages(w http.ResponseWriter, r *http.Request, params TranslationApiLanguagesParams)
	// Translate a text
	// (POST /ocs/v2.php/translation/translate)
	TranslationApiTranslate(w http.ResponseWriter, r *http.Request, params TranslationApiTranslateParams)

	// (GET /status.php)
	GetStatus(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GuestAvatarGetAvatar operation middleware
func (siw *ServerInterfaceWrapper) GuestAvatarGetAvatar(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "guestName" -------------
	var guestName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "guestName", runtime.ParamLocationPath, chi.URLParam(r, "guestName"), &guestName)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "guestName", Err: err})
		return
	}

	// ------------- Path parameter "size" -------------
	var size string

	err = runtime.BindStyledParameterWithLocation("simple", false, "size", runtime.ParamLocationPath, chi.URLParam(r, "size"), &size)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "size", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GuestAvatarGetAvatarParams

	// ------------- Optional query parameter "darkTheme" -------------

	err = runtime.BindQueryParameter("form", true, false, "darkTheme", r.URL.Query(), &params.DarkTheme)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "darkTheme", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GuestAvatarGetAvatar(w, r, guestName, size, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GuestAvatarGetAvatarDark operation middleware
func (siw *ServerInterfaceWrapper) GuestAvatarGetAvatarDark(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "guestName" -------------
	var guestName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "guestName", runtime.ParamLocationPath, chi.URLParam(r, "guestName"), &guestName)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "guestName", Err: err})
		return
	}

	// ------------- Path parameter "size" -------------
	var size string

	err = runtime.BindStyledParameterWithLocation("simple", false, "size", runtime.ParamLocationPath, chi.URLParam(r, "size"), &size)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "size", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GuestAvatarGetAvatarDark(w, r, guestName, size)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AvatarGetAvatar operation middleware
func (siw *ServerInterfaceWrapper) AvatarGetAvatar(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, chi.URLParam(r, "userId"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	// ------------- Path parameter "size" -------------
	var size int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "size", runtime.ParamLocationPath, chi.URLParam(r, "size"), &size)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "size", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AvatarGetAvatar(w, r, userId, size)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AvatarGetAvatarDark operation middleware
func (siw *ServerInterfaceWrapper) AvatarGetAvatarDark(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, chi.URLParam(r, "userId"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	// ------------- Path parameter "size" -------------
	var size int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "size", runtime.ParamLocationPath, chi.URLParam(r, "size"), &size)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "size", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AvatarGetAvatarDark(w, r, userId, size)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PreviewGetPreviewByFileId operation middleware
func (siw *ServerInterfaceWrapper) PreviewGetPreviewByFileId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PreviewGetPreviewByFileIdParams

	// ------------- Optional query parameter "fileId" -------------

	err = runtime.BindQueryParameter("form", true, false, "fileId", r.URL.Query(), &params.FileId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fileId", Err: err})
		return
	}

	// ------------- Optional query parameter "x" -------------

	err = runtime.BindQueryParameter("form", true, false, "x", r.URL.Query(), &params.X)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x", Err: err})
		return
	}

	// ------------- Optional query parameter "y" -------------

	err = runtime.BindQueryParameter("form", true, false, "y", r.URL.Query(), &params.Y)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "y", Err: err})
		return
	}

	// ------------- Optional query parameter "a" -------------

	err = runtime.BindQueryParameter("form", true, false, "a", r.URL.Query(), &params.A)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "a", Err: err})
		return
	}

	// ------------- Optional query parameter "forceIcon" -------------

	err = runtime.BindQueryParameter("form", true, false, "forceIcon", r.URL.Query(), &params.ForceIcon)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "forceIcon", Err: err})
		return
	}

	// ------------- Optional query parameter "mode" -------------

	err = runtime.BindQueryParameter("form", true, false, "mode", r.URL.Query(), &params.Mode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "mode", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PreviewGetPreviewByFileId(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PreviewGetPreview operation middleware
func (siw *ServerInterfaceWrapper) PreviewGetPreview(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PreviewGetPreviewParams

	// ------------- Optional query parameter "file" -------------

	err = runtime.BindQueryParameter("form", true, false, "file", r.URL.Query(), &params.File)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "file", Err: err})
		return
	}

	// ------------- Optional query parameter "x" -------------

	err = runtime.BindQueryParameter("form", true, false, "x", r.URL.Query(), &params.X)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x", Err: err})
		return
	}

	// ------------- Optional query parameter "y" -------------

	err = runtime.BindQueryParameter("form", true, false, "y", r.URL.Query(), &params.Y)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "y", Err: err})
		return
	}

	// ------------- Optional query parameter "a" -------------

	err = runtime.BindQueryParameter("form", true, false, "a", r.URL.Query(), &params.A)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "a", Err: err})
		return
	}

	// ------------- Optional query parameter "forceIcon" -------------

	err = runtime.BindQueryParameter("form", true, false, "forceIcon", r.URL.Query(), &params.ForceIcon)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "forceIcon", Err: err})
		return
	}

	// ------------- Optional query parameter "mode" -------------

	err = runtime.BindQueryParameter("form", true, false, "mode", r.URL.Query(), &params.Mode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "mode", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PreviewGetPreview(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ReferencePreview operation middleware
func (siw *ServerInterfaceWrapper) ReferencePreview(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "referenceId" -------------
	var referenceId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "referenceId", runtime.ParamLocationPath, chi.URLParam(r, "referenceId"), &referenceId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "referenceId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReferencePreview(w, r, referenceId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// WipeCheckWipe operation middleware
func (siw *ServerInterfaceWrapper) WipeCheckWipe(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params WipeCheckWipeParams

	// ------------- Required query parameter "token" -------------

	if paramValue := r.URL.Query().Get("token"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "token"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "token", r.URL.Query(), &params.Token)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "token", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.WipeCheckWipe(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// WipeWipeDone operation middleware
func (siw *ServerInterfaceWrapper) WipeWipeDone(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params WipeWipeDoneParams

	// ------------- Required query parameter "token" -------------

	if paramValue := r.URL.Query().Get("token"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "token"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "token", r.URL.Query(), &params.Token)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "token", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.WipeWipeDone(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ClientFlowLoginV2Init operation middleware
func (siw *ServerInterfaceWrapper) ClientFlowLoginV2Init(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ClientFlowLoginV2Init(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ClientFlowLoginV2Poll operation middleware
func (siw *ServerInterfaceWrapper) ClientFlowLoginV2Poll(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ClientFlowLoginV2PollParams

	// ------------- Required query parameter "token" -------------

	if paramValue := r.URL.Query().Get("token"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "token"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "token", r.URL.Query(), &params.Token)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "token", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ClientFlowLoginV2Poll(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// OcsGetCapabilities operation middleware
func (siw *ServerInterfaceWrapper) OcsGetCapabilities(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params OcsGetCapabilitiesParams

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.OcsGetCapabilities(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CollaborationResourcesSearchCollections operation middleware
func (siw *ServerInterfaceWrapper) CollaborationResourcesSearchCollections(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "filter" -------------
	var filter string

	err = runtime.BindStyledParameterWithLocation("simple", false, "filter", runtime.ParamLocationPath, chi.URLParam(r, "filter"), &filter)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CollaborationResourcesSearchCollectionsParams

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CollaborationResourcesSearchCollections(w, r, filter, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CollaborationResourcesRemoveResource operation middleware
func (siw *ServerInterfaceWrapper) CollaborationResourcesRemoveResource(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "collectionId" -------------
	var collectionId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "collectionId", runtime.ParamLocationPath, chi.URLParam(r, "collectionId"), &collectionId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "collectionId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CollaborationResourcesRemoveResourceParams

	// ------------- Required query parameter "resourceType" -------------

	if paramValue := r.URL.Query().Get("resourceType"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "resourceType"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "resourceType", r.URL.Query(), &params.ResourceType)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "resourceType", Err: err})
		return
	}

	// ------------- Required query parameter "resourceId" -------------

	if paramValue := r.URL.Query().Get("resourceId"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "resourceId"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "resourceId", r.URL.Query(), &params.ResourceId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "resourceId", Err: err})
		return
	}

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CollaborationResourcesRemoveResource(w, r, collectionId, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CollaborationResourcesListCollection operation middleware
func (siw *ServerInterfaceWrapper) CollaborationResourcesListCollection(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "collectionId" -------------
	var collectionId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "collectionId", runtime.ParamLocationPath, chi.URLParam(r, "collectionId"), &collectionId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "collectionId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CollaborationResourcesListCollectionParams

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CollaborationResourcesListCollection(w, r, collectionId, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CollaborationResourcesAddResource operation middleware
func (siw *ServerInterfaceWrapper) CollaborationResourcesAddResource(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "collectionId" -------------
	var collectionId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "collectionId", runtime.ParamLocationPath, chi.URLParam(r, "collectionId"), &collectionId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "collectionId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CollaborationResourcesAddResourceParams

	// ------------- Required query parameter "resourceType" -------------

	if paramValue := r.URL.Query().Get("resourceType"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "resourceType"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "resourceType", r.URL.Query(), &params.ResourceType)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "resourceType", Err: err})
		return
	}

	// ------------- Required query parameter "resourceId" -------------

	if paramValue := r.URL.Query().Get("resourceId"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "resourceId"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "resourceId", r.URL.Query(), &params.ResourceId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "resourceId", Err: err})
		return
	}

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CollaborationResourcesAddResource(w, r, collectionId, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CollaborationResourcesRenameCollection operation middleware
func (siw *ServerInterfaceWrapper) CollaborationResourcesRenameCollection(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "collectionId" -------------
	var collectionId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "collectionId", runtime.ParamLocationPath, chi.URLParam(r, "collectionId"), &collectionId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "collectionId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CollaborationResourcesRenameCollectionParams

	// ------------- Required query parameter "collectionName" -------------

	if paramValue := r.URL.Query().Get("collectionName"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "collectionName"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "collectionName", r.URL.Query(), &params.CollectionName)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "collectionName", Err: err})
		return
	}

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CollaborationResourcesRenameCollection(w, r, collectionId, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CollaborationResourcesCreateCollectionOnResource operation middleware
func (siw *ServerInterfaceWrapper) CollaborationResourcesCreateCollectionOnResource(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "baseResourceType" -------------
	var baseResourceType string

	err = runtime.BindStyledParameterWithLocation("simple", false, "baseResourceType", runtime.ParamLocationPath, chi.URLParam(r, "baseResourceType"), &baseResourceType)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "baseResourceType", Err: err})
		return
	}

	// ------------- Path parameter "baseResourceId" -------------
	var baseResourceId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "baseResourceId", runtime.ParamLocationPath, chi.URLParam(r, "baseResourceId"), &baseResourceId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "baseResourceId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CollaborationResourcesCreateCollectionOnResourceParams

	// ------------- Required query parameter "name" -------------

	if paramValue := r.URL.Query().Get("name"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "name"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CollaborationResourcesCreateCollectionOnResource(w, r, baseResourceType, baseResourceId, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CollaborationResourcesGetCollectionsByResource operation middleware
func (siw *ServerInterfaceWrapper) CollaborationResourcesGetCollectionsByResource(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "resourceType" -------------
	var resourceType string

	err = runtime.BindStyledParameterWithLocation("simple", false, "resourceType", runtime.ParamLocationPath, chi.URLParam(r, "resourceType"), &resourceType)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "resourceType", Err: err})
		return
	}

	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, chi.URLParam(r, "resourceId"), &resourceId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "resourceId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CollaborationResourcesGetCollectionsByResourceParams

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CollaborationResourcesGetCollectionsByResource(w, r, resourceType, resourceId, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AppPasswordDeleteAppPassword operation middleware
func (siw *ServerInterfaceWrapper) AppPasswordDeleteAppPassword(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params AppPasswordDeleteAppPasswordParams

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AppPasswordDeleteAppPassword(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AppPasswordRotateAppPassword operation middleware
func (siw *ServerInterfaceWrapper) AppPasswordRotateAppPassword(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params AppPasswordRotateAppPasswordParams

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AppPasswordRotateAppPassword(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AutoCompleteGet operation middleware
func (siw *ServerInterfaceWrapper) AutoCompleteGet(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params AutoCompleteGetParams

	// ------------- Required query parameter "search" -------------

	if paramValue := r.URL.Query().Get("search"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "search"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	// ------------- Optional query parameter "itemType" -------------

	err = runtime.BindQueryParameter("form", true, false, "itemType", r.URL.Query(), &params.ItemType)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "itemType", Err: err})
		return
	}

	// ------------- Optional query parameter "itemId" -------------

	err = runtime.BindQueryParameter("form", true, false, "itemId", r.URL.Query(), &params.ItemId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "itemId", Err: err})
		return
	}

	// ------------- Optional query parameter "sorter" -------------

	err = runtime.BindQueryParameter("form", true, false, "sorter", r.URL.Query(), &params.Sorter)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sorter", Err: err})
		return
	}

	// ------------- Optional query parameter "shareTypes" -------------

	err = runtime.BindQueryParameter("form", true, false, "shareTypes", r.URL.Query(), &params.ShareTypes)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "shareTypes", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AutoCompleteGet(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AppPasswordGetAppPassword operation middleware
func (siw *ServerInterfaceWrapper) AppPasswordGetAppPassword(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params AppPasswordGetAppPasswordParams

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AppPasswordGetAppPassword(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// NavigationGetAppsNavigation operation middleware
func (siw *ServerInterfaceWrapper) NavigationGetAppsNavigation(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params NavigationGetAppsNavigationParams

	// ------------- Optional query parameter "absolute" -------------

	err = runtime.BindQueryParameter("form", true, false, "absolute", r.URL.Query(), &params.Absolute)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "absolute", Err: err})
		return
	}

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.NavigationGetAppsNavigation(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// NavigationGetSettingsNavigation operation middleware
func (siw *ServerInterfaceWrapper) NavigationGetSettingsNavigation(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params NavigationGetSettingsNavigationParams

	// ------------- Optional query parameter "absolute" -------------

	err = runtime.BindQueryParameter("form", true, false, "absolute", r.URL.Query(), &params.Absolute)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "absolute", Err: err})
		return
	}

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.NavigationGetSettingsNavigation(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// WhatsNewGet operation middleware
func (siw *ServerInterfaceWrapper) WhatsNewGet(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params WhatsNewGetParams

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.WhatsNewGet(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// WhatsNewDismiss operation middleware
func (siw *ServerInterfaceWrapper) WhatsNewDismiss(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params WhatsNewDismissParams

	// ------------- Required query parameter "version" -------------

	if paramValue := r.URL.Query().Get("version"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "version"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "version", r.URL.Query(), &params.Version)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "version", Err: err})
		return
	}

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.WhatsNewDismiss(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// HoverCardGetUser operation middleware
func (siw *ServerInterfaceWrapper) HoverCardGetUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, chi.URLParam(r, "userId"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params HoverCardGetUserParams

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.HoverCardGetUser(w, r, userId, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ProfileApiSetVisibility operation middleware
func (siw *ServerInterfaceWrapper) ProfileApiSetVisibility(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "targetUserId" -------------
	var targetUserId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetUserId", runtime.ParamLocationPath, chi.URLParam(r, "targetUserId"), &targetUserId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "targetUserId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ProfileApiSetVisibilityParams

	// ------------- Required query parameter "paramId" -------------

	if paramValue := r.URL.Query().Get("paramId"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "paramId"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "paramId", r.URL.Query(), &params.ParamId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "paramId", Err: err})
		return
	}

	// ------------- Required query parameter "visibility" -------------

	if paramValue := r.URL.Query().Get("visibility"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "visibility"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "visibility", r.URL.Query(), &params.Visibility)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "visibility", Err: err})
		return
	}

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ProfileApiSetVisibility(w, r, targetUserId, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ReferenceApiExtract operation middleware
func (siw *ServerInterfaceWrapper) ReferenceApiExtract(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ReferenceApiExtractParams

	// ------------- Required query parameter "text" -------------

	if paramValue := r.URL.Query().Get("text"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "text"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "text", r.URL.Query(), &params.Text)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "text", Err: err})
		return
	}

	// ------------- Optional query parameter "resolve" -------------

	err = runtime.BindQueryParameter("form", true, false, "resolve", r.URL.Query(), &params.Resolve)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "resolve", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReferenceApiExtract(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ReferenceApiTouchProvider operation middleware
func (siw *ServerInterfaceWrapper) ReferenceApiTouchProvider(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "providerId" -------------
	var providerId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "providerId", runtime.ParamLocationPath, chi.URLParam(r, "providerId"), &providerId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "providerId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ReferenceApiTouchProviderParams

	// ------------- Optional query parameter "timestamp" -------------

	err = runtime.BindQueryParameter("form", true, false, "timestamp", r.URL.Query(), &params.Timestamp)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "timestamp", Err: err})
		return
	}

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReferenceApiTouchProvider(w, r, providerId, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ReferenceApiGetProvidersInfo operation middleware
func (siw *ServerInterfaceWrapper) ReferenceApiGetProvidersInfo(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ReferenceApiGetProvidersInfoParams

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReferenceApiGetProvidersInfo(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ReferenceApiResolveOne operation middleware
func (siw *ServerInterfaceWrapper) ReferenceApiResolveOne(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ReferenceApiResolveOneParams

	// ------------- Required query parameter "reference" -------------

	if paramValue := r.URL.Query().Get("reference"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "reference"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "reference", r.URL.Query(), &params.Reference)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "reference", Err: err})
		return
	}

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReferenceApiResolveOne(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ReferenceApiResolve operation middleware
func (siw *ServerInterfaceWrapper) ReferenceApiResolve(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ReferenceApiResolveParams

	// ------------- Required query parameter "references" -------------

	if paramValue := r.URL.Query().Get("references"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "references"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "references", r.URL.Query(), &params.References)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "references", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReferenceApiResolve(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UnifiedSearchGetProviders operation middleware
func (siw *ServerInterfaceWrapper) UnifiedSearchGetProviders(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UnifiedSearchGetProvidersParams

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UnifiedSearchGetProviders(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UnifiedSearchSearch operation middleware
func (siw *ServerInterfaceWrapper) UnifiedSearchSearch(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "providerId" -------------
	var providerId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "providerId", runtime.ParamLocationPath, chi.URLParam(r, "providerId"), &providerId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "providerId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UnifiedSearchSearchParams

	// ------------- Optional query parameter "term" -------------

	err = runtime.BindQueryParameter("form", true, false, "term", r.URL.Query(), &params.Term)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "term", Err: err})
		return
	}

	// ------------- Optional query parameter "sortOrder" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortOrder", r.URL.Query(), &params.SortOrder)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sortOrder", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", r.URL.Query(), &params.Cursor)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cursor", Err: err})
		return
	}

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UnifiedSearchSearch(w, r, providerId, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// TranslationApiLanguages operation middleware
func (siw *ServerInterfaceWrapper) TranslationApiLanguages(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params TranslationApiLanguagesParams

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TranslationApiLanguages(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// TranslationApiTranslate operation middleware
func (siw *ServerInterfaceWrapper) TranslationApiTranslate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params TranslationApiTranslateParams

	// ------------- Required query parameter "text" -------------

	if paramValue := r.URL.Query().Get("text"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "text"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "text", r.URL.Query(), &params.Text)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "text", Err: err})
		return
	}

	// ------------- Optional query parameter "fromLanguage" -------------

	err = runtime.BindQueryParameter("form", true, false, "fromLanguage", r.URL.Query(), &params.FromLanguage)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fromLanguage", Err: err})
		return
	}

	// ------------- Required query parameter "toLanguage" -------------

	if paramValue := r.URL.Query().Get("toLanguage"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "toLanguage"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "toLanguage", r.URL.Query(), &params.ToLanguage)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "toLanguage", Err: err})
		return
	}

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TranslationApiTranslate(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetStatus operation middleware
func (siw *ServerInterfaceWrapper) GetStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetStatus(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/avatar/guest/{guestName}/{size}", wrapper.GuestAvatarGetAvatar)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/avatar/guest/{guestName}/{size}/dark", wrapper.GuestAvatarGetAvatarDark)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/avatar/{userId}/{size}", wrapper.AvatarGetAvatar)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/avatar/{userId}/{size}/dark", wrapper.AvatarGetAvatarDark)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/core/preview", wrapper.PreviewGetPreviewByFileId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/core/preview.png", wrapper.PreviewGetPreview)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/core/references/preview/{referenceId}", wrapper.ReferencePreview)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/core/wipe/check", wrapper.WipeCheckWipe)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/core/wipe/success", wrapper.WipeWipeDone)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/login/v2", wrapper.ClientFlowLoginV2Init)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/login/v2/poll", wrapper.ClientFlowLoginV2Poll)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/ocs/v2.php/cloud/capabilities", wrapper.OcsGetCapabilities)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/ocs/v2.php/collaboration/resources/collections/search/{filter}", wrapper.CollaborationResourcesSearchCollections)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/ocs/v2.php/collaboration/resources/collections/{collectionId}", wrapper.CollaborationResourcesRemoveResource)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/ocs/v2.php/collaboration/resources/collections/{collectionId}", wrapper.CollaborationResourcesListCollection)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/ocs/v2.php/collaboration/resources/collections/{collectionId}", wrapper.CollaborationResourcesAddResource)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/ocs/v2.php/collaboration/resources/collections/{collectionId}", wrapper.CollaborationResourcesRenameCollection)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/ocs/v2.php/collaboration/resources/{baseResourceType}/{baseResourceId}", wrapper.CollaborationResourcesCreateCollectionOnResource)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/ocs/v2.php/collaboration/resources/{resourceType}/{resourceId}", wrapper.CollaborationResourcesGetCollectionsByResource)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/ocs/v2.php/core/apppassword", wrapper.AppPasswordDeleteAppPassword)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/ocs/v2.php/core/apppassword/rotate", wrapper.AppPasswordRotateAppPassword)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/ocs/v2.php/core/autocomplete/get", wrapper.AutoCompleteGet)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/ocs/v2.php/core/getapppassword", wrapper.AppPasswordGetAppPassword)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/ocs/v2.php/core/navigation/apps", wrapper.NavigationGetAppsNavigation)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/ocs/v2.php/core/navigation/settings", wrapper.NavigationGetSettingsNavigation)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/ocs/v2.php/core/whatsnew", wrapper.WhatsNewGet)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/ocs/v2.php/core/whatsnew", wrapper.WhatsNewDismiss)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/ocs/v2.php/hovercard/v1/{userId}", wrapper.HoverCardGetUser)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/ocs/v2.php/profile/{targetUserId}", wrapper.ProfileApiSetVisibility)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/ocs/v2.php/references/extract", wrapper.ReferenceApiExtract)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/ocs/v2.php/references/provider/{providerId}", wrapper.ReferenceApiTouchProvider)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/ocs/v2.php/references/providers", wrapper.ReferenceApiGetProvidersInfo)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/ocs/v2.php/references/resolve", wrapper.ReferenceApiResolveOne)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/ocs/v2.php/references/resolve", wrapper.ReferenceApiResolve)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/ocs/v2.php/search/providers", wrapper.UnifiedSearchGetProviders)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/ocs/v2.php/search/providers/{providerId}/search", wrapper.UnifiedSearchSearch)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/ocs/v2.php/translation/languages", wrapper.TranslationApiLanguages)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/ocs/v2.php/translation/translate", wrapper.TranslationApiTranslate)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/status.php", wrapper.GetStatus)
	})

	return r
}

type GuestAvatarGetAvatarRequestObject struct {
	GuestName string `json:"guestName"`
	Size      string `json:"size"`
	Params    GuestAvatarGetAvatarParams
}

type GuestAvatarGetAvatarResponseObject interface {
	VisitGuestAvatarGetAvatarResponse(w http.ResponseWriter) error
}

type GuestAvatarGetAvatar200ResponseHeaders struct {
	ContentDisposition string
}

type GuestAvatarGetAvatar200AsteriskResponse struct {
	Body          io.Reader
	Headers       GuestAvatarGetAvatar200ResponseHeaders
	ContentType   string
	ContentLength int64
}

func (response GuestAvatarGetAvatar200AsteriskResponse) VisitGuestAvatarGetAvatarResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Disposition", fmt.Sprint(response.Headers.ContentDisposition))
	w.Header().Set("Content-Type", response.ContentType)
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type GuestAvatarGetAvatar201ResponseHeaders struct {
	ContentDisposition string
}

type GuestAvatarGetAvatar201AsteriskResponse struct {
	Body          io.Reader
	Headers       GuestAvatarGetAvatar201ResponseHeaders
	ContentType   string
	ContentLength int64
}

func (response GuestAvatarGetAvatar201AsteriskResponse) VisitGuestAvatarGetAvatarResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Disposition", fmt.Sprint(response.Headers.ContentDisposition))
	w.Header().Set("Content-Type", response.ContentType)
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(201)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type GuestAvatarGetAvatar500Response struct {
}

func (response GuestAvatarGetAvatar500Response) VisitGuestAvatarGetAvatarResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type GuestAvatarGetAvatarDarkRequestObject struct {
	GuestName string `json:"guestName"`
	Size      string `json:"size"`
}

type GuestAvatarGetAvatarDarkResponseObject interface {
	VisitGuestAvatarGetAvatarDarkResponse(w http.ResponseWriter) error
}

type GuestAvatarGetAvatarDark200ResponseHeaders struct {
	ContentDisposition string
}

type GuestAvatarGetAvatarDark200AsteriskResponse struct {
	Body          io.Reader
	Headers       GuestAvatarGetAvatarDark200ResponseHeaders
	ContentType   string
	ContentLength int64
}

func (response GuestAvatarGetAvatarDark200AsteriskResponse) VisitGuestAvatarGetAvatarDarkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Disposition", fmt.Sprint(response.Headers.ContentDisposition))
	w.Header().Set("Content-Type", response.ContentType)
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type GuestAvatarGetAvatarDark201ResponseHeaders struct {
	ContentDisposition string
}

type GuestAvatarGetAvatarDark201AsteriskResponse struct {
	Body          io.Reader
	Headers       GuestAvatarGetAvatarDark201ResponseHeaders
	ContentType   string
	ContentLength int64
}

func (response GuestAvatarGetAvatarDark201AsteriskResponse) VisitGuestAvatarGetAvatarDarkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Disposition", fmt.Sprint(response.Headers.ContentDisposition))
	w.Header().Set("Content-Type", response.ContentType)
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(201)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type GuestAvatarGetAvatarDark500Response struct {
}

func (response GuestAvatarGetAvatarDark500Response) VisitGuestAvatarGetAvatarDarkResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type AvatarGetAvatarRequestObject struct {
	UserId string `json:"userId"`
	Size   int64  `json:"size"`
}

type AvatarGetAvatarResponseObject interface {
	VisitAvatarGetAvatarResponse(w http.ResponseWriter) error
}

type AvatarGetAvatar200ResponseHeaders struct {
	ContentDisposition string
	XNCIsCustomAvatar  int64
}

type AvatarGetAvatar200AsteriskResponse struct {
	Body          io.Reader
	Headers       AvatarGetAvatar200ResponseHeaders
	ContentType   string
	ContentLength int64
}

func (response AvatarGetAvatar200AsteriskResponse) VisitAvatarGetAvatarResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Disposition", fmt.Sprint(response.Headers.ContentDisposition))
	w.Header().Set("X-NC-IsCustomAvatar", fmt.Sprint(response.Headers.XNCIsCustomAvatar))
	w.Header().Set("Content-Type", response.ContentType)
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type AvatarGetAvatar404JSONResponse map[string]interface{}

func (response AvatarGetAvatar404JSONResponse) VisitAvatarGetAvatarResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type AvatarGetAvatarDarkRequestObject struct {
	UserId string `json:"userId"`
	Size   int64  `json:"size"`
}

type AvatarGetAvatarDarkResponseObject interface {
	VisitAvatarGetAvatarDarkResponse(w http.ResponseWriter) error
}

type AvatarGetAvatarDark200ResponseHeaders struct {
	ContentDisposition string
	XNCIsCustomAvatar  int64
}

type AvatarGetAvatarDark200AsteriskResponse struct {
	Body          io.Reader
	Headers       AvatarGetAvatarDark200ResponseHeaders
	ContentType   string
	ContentLength int64
}

func (response AvatarGetAvatarDark200AsteriskResponse) VisitAvatarGetAvatarDarkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Disposition", fmt.Sprint(response.Headers.ContentDisposition))
	w.Header().Set("X-NC-IsCustomAvatar", fmt.Sprint(response.Headers.XNCIsCustomAvatar))
	w.Header().Set("Content-Type", response.ContentType)
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type AvatarGetAvatarDark404JSONResponse map[string]interface{}

func (response AvatarGetAvatarDark404JSONResponse) VisitAvatarGetAvatarDarkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PreviewGetPreviewByFileIdRequestObject struct {
	Params PreviewGetPreviewByFileIdParams
}

type PreviewGetPreviewByFileIdResponseObject interface {
	VisitPreviewGetPreviewByFileIdResponse(w http.ResponseWriter) error
}

type PreviewGetPreviewByFileId200ResponseHeaders struct {
	ContentDisposition string
}

type PreviewGetPreviewByFileId200AsteriskResponse struct {
	Body          io.Reader
	Headers       PreviewGetPreviewByFileId200ResponseHeaders
	ContentType   string
	ContentLength int64
}

func (response PreviewGetPreviewByFileId200AsteriskResponse) VisitPreviewGetPreviewByFileIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Disposition", fmt.Sprint(response.Headers.ContentDisposition))
	w.Header().Set("Content-Type", response.ContentType)
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type PreviewGetPreviewByFileId400JSONResponse map[string]interface{}

func (response PreviewGetPreviewByFileId400JSONResponse) VisitPreviewGetPreviewByFileIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PreviewGetPreviewByFileId403JSONResponse map[string]interface{}

func (response PreviewGetPreviewByFileId403JSONResponse) VisitPreviewGetPreviewByFileIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PreviewGetPreviewByFileId404JSONResponse map[string]interface{}

func (response PreviewGetPreviewByFileId404JSONResponse) VisitPreviewGetPreviewByFileIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PreviewGetPreviewRequestObject struct {
	Params PreviewGetPreviewParams
}

type PreviewGetPreviewResponseObject interface {
	VisitPreviewGetPreviewResponse(w http.ResponseWriter) error
}

type PreviewGetPreview200ResponseHeaders struct {
	ContentDisposition string
}

type PreviewGetPreview200AsteriskResponse struct {
	Body          io.Reader
	Headers       PreviewGetPreview200ResponseHeaders
	ContentType   string
	ContentLength int64
}

func (response PreviewGetPreview200AsteriskResponse) VisitPreviewGetPreviewResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Disposition", fmt.Sprint(response.Headers.ContentDisposition))
	w.Header().Set("Content-Type", response.ContentType)
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type PreviewGetPreview400JSONResponse map[string]interface{}

func (response PreviewGetPreview400JSONResponse) VisitPreviewGetPreviewResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PreviewGetPreview403JSONResponse map[string]interface{}

func (response PreviewGetPreview403JSONResponse) VisitPreviewGetPreviewResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PreviewGetPreview404JSONResponse map[string]interface{}

func (response PreviewGetPreview404JSONResponse) VisitPreviewGetPreviewResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ReferencePreviewRequestObject struct {
	ReferenceId string `json:"referenceId"`
}

type ReferencePreviewResponseObject interface {
	VisitReferencePreviewResponse(w http.ResponseWriter) error
}

type ReferencePreview200ResponseHeaders struct {
	ContentDisposition string
}

type ReferencePreview200ImageResponse struct {
	Body          io.Reader
	Headers       ReferencePreview200ResponseHeaders
	ContentType   string
	ContentLength int64
}

func (response ReferencePreview200ImageResponse) VisitReferencePreviewResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Disposition", fmt.Sprint(response.Headers.ContentDisposition))
	w.Header().Set("Content-Type", response.ContentType)
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type ReferencePreview404JSONResponse string

func (response ReferencePreview404JSONResponse) VisitReferencePreviewResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type WipeCheckWipeRequestObject struct {
	Params WipeCheckWipeParams
}

type WipeCheckWipeResponseObject interface {
	VisitWipeCheckWipeResponse(w http.ResponseWriter) error
}

type WipeCheckWipe200JSONResponse struct {
	Wipe bool `json:"wipe"`
}

func (response WipeCheckWipe200JSONResponse) VisitWipeCheckWipeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type WipeCheckWipe404JSONResponse map[string]interface{}

func (response WipeCheckWipe404JSONResponse) VisitWipeCheckWipeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type WipeWipeDoneRequestObject struct {
	Params WipeWipeDoneParams
}

type WipeWipeDoneResponseObject interface {
	VisitWipeWipeDoneResponse(w http.ResponseWriter) error
}

type WipeWipeDone200JSONResponse map[string]interface{}

func (response WipeWipeDone200JSONResponse) VisitWipeWipeDoneResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type WipeWipeDone404JSONResponse map[string]interface{}

func (response WipeWipeDone404JSONResponse) VisitWipeWipeDoneResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ClientFlowLoginV2InitRequestObject struct {
}

type ClientFlowLoginV2InitResponseObject interface {
	VisitClientFlowLoginV2InitResponse(w http.ResponseWriter) error
}

type ClientFlowLoginV2Init200JSONResponse LoginFlowV2

func (response ClientFlowLoginV2Init200JSONResponse) VisitClientFlowLoginV2InitResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ClientFlowLoginV2PollRequestObject struct {
	Params ClientFlowLoginV2PollParams
}

type ClientFlowLoginV2PollResponseObject interface {
	VisitClientFlowLoginV2PollResponse(w http.ResponseWriter) error
}

type ClientFlowLoginV2Poll200JSONResponse LoginFlowV2Credentials

func (response ClientFlowLoginV2Poll200JSONResponse) VisitClientFlowLoginV2PollResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ClientFlowLoginV2Poll404JSONResponse map[string]interface{}

func (response ClientFlowLoginV2Poll404JSONResponse) VisitClientFlowLoginV2PollResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type OcsGetCapabilitiesRequestObject struct {
	Params OcsGetCapabilitiesParams
}

type OcsGetCapabilitiesResponseObject interface {
	VisitOcsGetCapabilitiesResponse(w http.ResponseWriter) error
}

type OcsGetCapabilities200JSONResponse struct {
	Ocs struct {
		Data struct {
			Capabilities map[string]map[string]interface{} `json:"capabilities"`
			Version      struct {
				Edition         string `json:"edition"`
				ExtendedSupport bool   `json:"extendedSupport"`
				Major           int64  `json:"major"`
				Micro           int64  `json:"micro"`
				Minor           int64  `json:"minor"`
				String          string `json:"string"`
			} `json:"version"`
		} `json:"data"`
		Meta OCSMeta `json:"meta"`
	} `json:"ocs"`
}

func (response OcsGetCapabilities200JSONResponse) VisitOcsGetCapabilitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CollaborationResourcesSearchCollectionsRequestObject struct {
	Filter string `json:"filter"`
	Params CollaborationResourcesSearchCollectionsParams
}

type CollaborationResourcesSearchCollectionsResponseObject interface {
	VisitCollaborationResourcesSearchCollectionsResponse(w http.ResponseWriter) error
}

type CollaborationResourcesSearchCollections200JSONResponse struct {
	Ocs struct {
		Data []Collection `json:"data"`
		Meta OCSMeta      `json:"meta"`
	} `json:"ocs"`
}

func (response CollaborationResourcesSearchCollections200JSONResponse) VisitCollaborationResourcesSearchCollectionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CollaborationResourcesSearchCollections404JSONResponse struct {
	Ocs struct {
		Data map[string]interface{} `json:"data"`
		Meta OCSMeta                `json:"meta"`
	} `json:"ocs"`
}

func (response CollaborationResourcesSearchCollections404JSONResponse) VisitCollaborationResourcesSearchCollectionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CollaborationResourcesRemoveResourceRequestObject struct {
	CollectionId int64 `json:"collectionId"`
	Params       CollaborationResourcesRemoveResourceParams
}

type CollaborationResourcesRemoveResourceResponseObject interface {
	VisitCollaborationResourcesRemoveResourceResponse(w http.ResponseWriter) error
}

type CollaborationResourcesRemoveResource200JSONResponse struct {
	Ocs struct {
		Data Collection `json:"data"`
		Meta OCSMeta    `json:"meta"`
	} `json:"ocs"`
}

func (response CollaborationResourcesRemoveResource200JSONResponse) VisitCollaborationResourcesRemoveResourceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CollaborationResourcesRemoveResource404JSONResponse struct {
	Ocs struct {
		Data map[string]interface{} `json:"data"`
		Meta OCSMeta                `json:"meta"`
	} `json:"ocs"`
}

func (response CollaborationResourcesRemoveResource404JSONResponse) VisitCollaborationResourcesRemoveResourceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CollaborationResourcesRemoveResource500JSONResponse struct {
	Ocs struct {
		Data map[string]interface{} `json:"data"`
		Meta OCSMeta                `json:"meta"`
	} `json:"ocs"`
}

func (response CollaborationResourcesRemoveResource500JSONResponse) VisitCollaborationResourcesRemoveResourceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CollaborationResourcesListCollectionRequestObject struct {
	CollectionId int64 `json:"collectionId"`
	Params       CollaborationResourcesListCollectionParams
}

type CollaborationResourcesListCollectionResponseObject interface {
	VisitCollaborationResourcesListCollectionResponse(w http.ResponseWriter) error
}

type CollaborationResourcesListCollection200JSONResponse struct {
	Ocs struct {
		Data Collection `json:"data"`
		Meta OCSMeta    `json:"meta"`
	} `json:"ocs"`
}

func (response CollaborationResourcesListCollection200JSONResponse) VisitCollaborationResourcesListCollectionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CollaborationResourcesListCollection404JSONResponse struct {
	Ocs struct {
		Data map[string]interface{} `json:"data"`
		Meta OCSMeta                `json:"meta"`
	} `json:"ocs"`
}

func (response CollaborationResourcesListCollection404JSONResponse) VisitCollaborationResourcesListCollectionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CollaborationResourcesListCollection500JSONResponse struct {
	Ocs struct {
		Data map[string]interface{} `json:"data"`
		Meta OCSMeta                `json:"meta"`
	} `json:"ocs"`
}

func (response CollaborationResourcesListCollection500JSONResponse) VisitCollaborationResourcesListCollectionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CollaborationResourcesAddResourceRequestObject struct {
	CollectionId int64 `json:"collectionId"`
	Params       CollaborationResourcesAddResourceParams
}

type CollaborationResourcesAddResourceResponseObject interface {
	VisitCollaborationResourcesAddResourceResponse(w http.ResponseWriter) error
}

type CollaborationResourcesAddResource200JSONResponse struct {
	Ocs struct {
		Data Collection `json:"data"`
		Meta OCSMeta    `json:"meta"`
	} `json:"ocs"`
}

func (response CollaborationResourcesAddResource200JSONResponse) VisitCollaborationResourcesAddResourceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CollaborationResourcesAddResource404JSONResponse struct {
	Ocs struct {
		Data map[string]interface{} `json:"data"`
		Meta OCSMeta                `json:"meta"`
	} `json:"ocs"`
}

func (response CollaborationResourcesAddResource404JSONResponse) VisitCollaborationResourcesAddResourceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CollaborationResourcesAddResource500JSONResponse struct {
	Ocs struct {
		Data map[string]interface{} `json:"data"`
		Meta OCSMeta                `json:"meta"`
	} `json:"ocs"`
}

func (response CollaborationResourcesAddResource500JSONResponse) VisitCollaborationResourcesAddResourceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CollaborationResourcesRenameCollectionRequestObject struct {
	CollectionId int64 `json:"collectionId"`
	Params       CollaborationResourcesRenameCollectionParams
}

type CollaborationResourcesRenameCollectionResponseObject interface {
	VisitCollaborationResourcesRenameCollectionResponse(w http.ResponseWriter) error
}

type CollaborationResourcesRenameCollection200JSONResponse struct {
	Ocs struct {
		Data Collection `json:"data"`
		Meta OCSMeta    `json:"meta"`
	} `json:"ocs"`
}

func (response CollaborationResourcesRenameCollection200JSONResponse) VisitCollaborationResourcesRenameCollectionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CollaborationResourcesRenameCollection404JSONResponse struct {
	Ocs struct {
		Data map[string]interface{} `json:"data"`
		Meta OCSMeta                `json:"meta"`
	} `json:"ocs"`
}

func (response CollaborationResourcesRenameCollection404JSONResponse) VisitCollaborationResourcesRenameCollectionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CollaborationResourcesRenameCollection500JSONResponse struct {
	Ocs struct {
		Data map[string]interface{} `json:"data"`
		Meta OCSMeta                `json:"meta"`
	} `json:"ocs"`
}

func (response CollaborationResourcesRenameCollection500JSONResponse) VisitCollaborationResourcesRenameCollectionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CollaborationResourcesCreateCollectionOnResourceRequestObject struct {
	BaseResourceType string `json:"baseResourceType"`
	BaseResourceId   string `json:"baseResourceId"`
	Params           CollaborationResourcesCreateCollectionOnResourceParams
}

type CollaborationResourcesCreateCollectionOnResourceResponseObject interface {
	VisitCollaborationResourcesCreateCollectionOnResourceResponse(w http.ResponseWriter) error
}

type CollaborationResourcesCreateCollectionOnResource200JSONResponse struct {
	Ocs struct {
		Data Collection `json:"data"`
		Meta OCSMeta    `json:"meta"`
	} `json:"ocs"`
}

func (response CollaborationResourcesCreateCollectionOnResource200JSONResponse) VisitCollaborationResourcesCreateCollectionOnResourceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CollaborationResourcesCreateCollectionOnResource400JSONResponse struct {
	Ocs struct {
		Data map[string]interface{} `json:"data"`
		Meta OCSMeta                `json:"meta"`
	} `json:"ocs"`
}

func (response CollaborationResourcesCreateCollectionOnResource400JSONResponse) VisitCollaborationResourcesCreateCollectionOnResourceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CollaborationResourcesCreateCollectionOnResource404JSONResponse struct {
	Ocs struct {
		Data map[string]interface{} `json:"data"`
		Meta OCSMeta                `json:"meta"`
	} `json:"ocs"`
}

func (response CollaborationResourcesCreateCollectionOnResource404JSONResponse) VisitCollaborationResourcesCreateCollectionOnResourceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CollaborationResourcesCreateCollectionOnResource500JSONResponse struct {
	Ocs struct {
		Data map[string]interface{} `json:"data"`
		Meta OCSMeta                `json:"meta"`
	} `json:"ocs"`
}

func (response CollaborationResourcesCreateCollectionOnResource500JSONResponse) VisitCollaborationResourcesCreateCollectionOnResourceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CollaborationResourcesGetCollectionsByResourceRequestObject struct {
	ResourceType string `json:"resourceType"`
	ResourceId   string `json:"resourceId"`
	Params       CollaborationResourcesGetCollectionsByResourceParams
}

type CollaborationResourcesGetCollectionsByResourceResponseObject interface {
	VisitCollaborationResourcesGetCollectionsByResourceResponse(w http.ResponseWriter) error
}

type CollaborationResourcesGetCollectionsByResource200JSONResponse struct {
	Ocs struct {
		Data []Collection `json:"data"`
		Meta OCSMeta      `json:"meta"`
	} `json:"ocs"`
}

func (response CollaborationResourcesGetCollectionsByResource200JSONResponse) VisitCollaborationResourcesGetCollectionsByResourceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CollaborationResourcesGetCollectionsByResource404JSONResponse struct {
	Ocs struct {
		Data map[string]interface{} `json:"data"`
		Meta OCSMeta                `json:"meta"`
	} `json:"ocs"`
}

func (response CollaborationResourcesGetCollectionsByResource404JSONResponse) VisitCollaborationResourcesGetCollectionsByResourceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type AppPasswordDeleteAppPasswordRequestObject struct {
	Params AppPasswordDeleteAppPasswordParams
}

type AppPasswordDeleteAppPasswordResponseObject interface {
	VisitAppPasswordDeleteAppPasswordResponse(w http.ResponseWriter) error
}

type AppPasswordDeleteAppPassword200JSONResponse struct {
	Ocs struct {
		Data map[string]interface{} `json:"data"`
		Meta OCSMeta                `json:"meta"`
	} `json:"ocs"`
}

func (response AppPasswordDeleteAppPassword200JSONResponse) VisitAppPasswordDeleteAppPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AppPasswordDeleteAppPassword403TextResponse string

func (response AppPasswordDeleteAppPassword403TextResponse) VisitAppPasswordDeleteAppPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(403)

	_, err := w.Write([]byte(response))
	return err
}

type AppPasswordRotateAppPasswordRequestObject struct {
	Params AppPasswordRotateAppPasswordParams
}

type AppPasswordRotateAppPasswordResponseObject interface {
	VisitAppPasswordRotateAppPasswordResponse(w http.ResponseWriter) error
}

type AppPasswordRotateAppPassword200JSONResponse struct {
	Ocs struct {
		Data struct {
			Apppassword string `json:"apppassword"`
		} `json:"data"`
		Meta OCSMeta `json:"meta"`
	} `json:"ocs"`
}

func (response AppPasswordRotateAppPassword200JSONResponse) VisitAppPasswordRotateAppPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AppPasswordRotateAppPassword403TextResponse string

func (response AppPasswordRotateAppPassword403TextResponse) VisitAppPasswordRotateAppPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(403)

	_, err := w.Write([]byte(response))
	return err
}

type AutoCompleteGetRequestObject struct {
	Params AutoCompleteGetParams
}

type AutoCompleteGetResponseObject interface {
	VisitAutoCompleteGetResponse(w http.ResponseWriter) error
}

type AutoCompleteGet200JSONResponse struct {
	Ocs struct {
		Data []AutocompleteResult `json:"data"`
		Meta OCSMeta              `json:"meta"`
	} `json:"ocs"`
}

func (response AutoCompleteGet200JSONResponse) VisitAutoCompleteGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AppPasswordGetAppPasswordRequestObject struct {
	Params AppPasswordGetAppPasswordParams
}

type AppPasswordGetAppPasswordResponseObject interface {
	VisitAppPasswordGetAppPasswordResponse(w http.ResponseWriter) error
}

type AppPasswordGetAppPassword200JSONResponse struct {
	Ocs struct {
		Data struct {
			Apppassword string `json:"apppassword"`
		} `json:"data"`
		Meta OCSMeta `json:"meta"`
	} `json:"ocs"`
}

func (response AppPasswordGetAppPassword200JSONResponse) VisitAppPasswordGetAppPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AppPasswordGetAppPassword403TextResponse string

func (response AppPasswordGetAppPassword403TextResponse) VisitAppPasswordGetAppPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(403)

	_, err := w.Write([]byte(response))
	return err
}

type NavigationGetAppsNavigationRequestObject struct {
	Params NavigationGetAppsNavigationParams
}

type NavigationGetAppsNavigationResponseObject interface {
	VisitNavigationGetAppsNavigationResponse(w http.ResponseWriter) error
}

type NavigationGetAppsNavigation200JSONResponse struct {
	Ocs struct {
		Data []NavigationEntry `json:"data"`
		Meta OCSMeta           `json:"meta"`
	} `json:"ocs"`
}

func (response NavigationGetAppsNavigation200JSONResponse) VisitNavigationGetAppsNavigationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type NavigationGetAppsNavigation304JSONResponse struct {
	Ocs struct {
		Data map[string]interface{} `json:"data"`
		Meta OCSMeta                `json:"meta"`
	} `json:"ocs"`
}

func (response NavigationGetAppsNavigation304JSONResponse) VisitNavigationGetAppsNavigationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(304)

	return json.NewEncoder(w).Encode(response)
}

type NavigationGetSettingsNavigationRequestObject struct {
	Params NavigationGetSettingsNavigationParams
}

type NavigationGetSettingsNavigationResponseObject interface {
	VisitNavigationGetSettingsNavigationResponse(w http.ResponseWriter) error
}

type NavigationGetSettingsNavigation200JSONResponse struct {
	Ocs struct {
		Data []NavigationEntry `json:"data"`
		Meta OCSMeta           `json:"meta"`
	} `json:"ocs"`
}

func (response NavigationGetSettingsNavigation200JSONResponse) VisitNavigationGetSettingsNavigationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type NavigationGetSettingsNavigation304JSONResponse struct {
	Ocs struct {
		Data map[string]interface{} `json:"data"`
		Meta OCSMeta                `json:"meta"`
	} `json:"ocs"`
}

func (response NavigationGetSettingsNavigation304JSONResponse) VisitNavigationGetSettingsNavigationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(304)

	return json.NewEncoder(w).Encode(response)
}

type WhatsNewGetRequestObject struct {
	Params WhatsNewGetParams
}

type WhatsNewGetResponseObject interface {
	VisitWhatsNewGetResponse(w http.ResponseWriter) error
}

type WhatsNewGet200JSONResponse struct {
	Ocs struct {
		Data struct {
			ChangelogURL string `json:"changelogURL"`
			Product      string `json:"product"`
			Version      string `json:"version"`
			WhatsNew     struct {
				Admin   []string `json:"admin"`
				Regular []string `json:"regular"`
			} `json:"whatsNew"`
		} `json:"data"`
		Meta OCSMeta `json:"meta"`
	} `json:"ocs"`
}

func (response WhatsNewGet200JSONResponse) VisitWhatsNewGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type WhatsNewGet204JSONResponse struct {
	Ocs struct {
		Data map[string]interface{} `json:"data"`
		Meta OCSMeta                `json:"meta"`
	} `json:"ocs"`
}

func (response WhatsNewGet204JSONResponse) VisitWhatsNewGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(204)

	return json.NewEncoder(w).Encode(response)
}

type WhatsNewDismissRequestObject struct {
	Params WhatsNewDismissParams
}

type WhatsNewDismissResponseObject interface {
	VisitWhatsNewDismissResponse(w http.ResponseWriter) error
}

type WhatsNewDismiss200JSONResponse struct {
	Ocs struct {
		Data map[string]interface{} `json:"data"`
		Meta OCSMeta                `json:"meta"`
	} `json:"ocs"`
}

func (response WhatsNewDismiss200JSONResponse) VisitWhatsNewDismissResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type WhatsNewDismiss500TextResponse string

func (response WhatsNewDismiss500TextResponse) VisitWhatsNewDismissResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

type HoverCardGetUserRequestObject struct {
	UserId string `json:"userId"`
	Params HoverCardGetUserParams
}

type HoverCardGetUserResponseObject interface {
	VisitHoverCardGetUserResponse(w http.ResponseWriter) error
}

type HoverCardGetUser200JSONResponse struct {
	Ocs struct {
		Data struct {
			Actions     []ContactsAction `json:"actions"`
			DisplayName string           `json:"displayName"`
			UserId      string           `json:"userId"`
		} `json:"data"`
		Meta OCSMeta `json:"meta"`
	} `json:"ocs"`
}

func (response HoverCardGetUser200JSONResponse) VisitHoverCardGetUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type HoverCardGetUser404JSONResponse struct {
	Ocs struct {
		Data map[string]interface{} `json:"data"`
		Meta OCSMeta                `json:"meta"`
	} `json:"ocs"`
}

func (response HoverCardGetUser404JSONResponse) VisitHoverCardGetUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ProfileApiSetVisibilityRequestObject struct {
	TargetUserId string `json:"targetUserId"`
	Params       ProfileApiSetVisibilityParams
}

type ProfileApiSetVisibilityResponseObject interface {
	VisitProfileApiSetVisibilityResponse(w http.ResponseWriter) error
}

type ProfileApiSetVisibility200JSONResponse struct {
	Ocs struct {
		Data map[string]interface{} `json:"data"`
		Meta OCSMeta                `json:"meta"`
	} `json:"ocs"`
}

func (response ProfileApiSetVisibility200JSONResponse) VisitProfileApiSetVisibilityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ProfileApiSetVisibility400TextResponse string

func (response ProfileApiSetVisibility400TextResponse) VisitProfileApiSetVisibilityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(400)

	_, err := w.Write([]byte(response))
	return err
}

type ProfileApiSetVisibility403TextResponse string

func (response ProfileApiSetVisibility403TextResponse) VisitProfileApiSetVisibilityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(403)

	_, err := w.Write([]byte(response))
	return err
}

type ProfileApiSetVisibility404TextResponse string

func (response ProfileApiSetVisibility404TextResponse) VisitProfileApiSetVisibilityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(404)

	_, err := w.Write([]byte(response))
	return err
}

type ReferenceApiExtractRequestObject struct {
	Params ReferenceApiExtractParams
}

type ReferenceApiExtractResponseObject interface {
	VisitReferenceApiExtractResponse(w http.ResponseWriter) error
}

type ReferenceApiExtract200JSONResponse struct {
	Ocs struct {
		Data struct {
			References map[string]Reference `json:"references"`
		} `json:"data"`
		Meta OCSMeta `json:"meta"`
	} `json:"ocs"`
}

func (response ReferenceApiExtract200JSONResponse) VisitReferenceApiExtractResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReferenceApiTouchProviderRequestObject struct {
	ProviderId string `json:"providerId"`
	Params     ReferenceApiTouchProviderParams
}

type ReferenceApiTouchProviderResponseObject interface {
	VisitReferenceApiTouchProviderResponse(w http.ResponseWriter) error
}

type ReferenceApiTouchProvider200JSONResponse struct {
	Ocs struct {
		Data struct {
			Success bool `json:"success"`
		} `json:"data"`
		Meta OCSMeta `json:"meta"`
	} `json:"ocs"`
}

func (response ReferenceApiTouchProvider200JSONResponse) VisitReferenceApiTouchProviderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReferenceApiGetProvidersInfoRequestObject struct {
	Params ReferenceApiGetProvidersInfoParams
}

type ReferenceApiGetProvidersInfoResponseObject interface {
	VisitReferenceApiGetProvidersInfoResponse(w http.ResponseWriter) error
}

type ReferenceApiGetProvidersInfo200JSONResponse struct {
	Ocs struct {
		Data []ReferenceProvider `json:"data"`
		Meta OCSMeta             `json:"meta"`
	} `json:"ocs"`
}

func (response ReferenceApiGetProvidersInfo200JSONResponse) VisitReferenceApiGetProvidersInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReferenceApiResolveOneRequestObject struct {
	Params ReferenceApiResolveOneParams
}

type ReferenceApiResolveOneResponseObject interface {
	VisitReferenceApiResolveOneResponse(w http.ResponseWriter) error
}

type ReferenceApiResolveOne200JSONResponse struct {
	Ocs struct {
		Data struct {
			References map[string]Reference `json:"references"`
		} `json:"data"`
		Meta OCSMeta `json:"meta"`
	} `json:"ocs"`
}

func (response ReferenceApiResolveOne200JSONResponse) VisitReferenceApiResolveOneResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReferenceApiResolveRequestObject struct {
	Params ReferenceApiResolveParams
}

type ReferenceApiResolveResponseObject interface {
	VisitReferenceApiResolveResponse(w http.ResponseWriter) error
}

type ReferenceApiResolve200JSONResponse struct {
	Ocs struct {
		Data struct {
			References map[string]Reference `json:"references"`
		} `json:"data"`
		Meta OCSMeta `json:"meta"`
	} `json:"ocs"`
}

func (response ReferenceApiResolve200JSONResponse) VisitReferenceApiResolveResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UnifiedSearchGetProvidersRequestObject struct {
	Params UnifiedSearchGetProvidersParams
}

type UnifiedSearchGetProvidersResponseObject interface {
	VisitUnifiedSearchGetProvidersResponse(w http.ResponseWriter) error
}

type UnifiedSearchGetProviders200JSONResponse struct {
	Ocs struct {
		Data []UnifiedSearchProvider `json:"data"`
		Meta OCSMeta                 `json:"meta"`
	} `json:"ocs"`
}

func (response UnifiedSearchGetProviders200JSONResponse) VisitUnifiedSearchGetProvidersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UnifiedSearchSearchRequestObject struct {
	ProviderId string `json:"providerId"`
	Params     UnifiedSearchSearchParams
}

type UnifiedSearchSearchResponseObject interface {
	VisitUnifiedSearchSearchResponse(w http.ResponseWriter) error
}

type UnifiedSearchSearch200JSONResponse struct {
	Ocs struct {
		Data UnifiedSearchResult `json:"data"`
		Meta OCSMeta             `json:"meta"`
	} `json:"ocs"`
}

func (response UnifiedSearchSearch200JSONResponse) VisitUnifiedSearchSearchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UnifiedSearchSearch400JSONResponse struct {
	Ocs struct {
		Data map[string]interface{} `json:"data"`
		Meta OCSMeta                `json:"meta"`
	} `json:"ocs"`
}

func (response UnifiedSearchSearch400JSONResponse) VisitUnifiedSearchSearchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type TranslationApiLanguagesRequestObject struct {
	Params TranslationApiLanguagesParams
}

type TranslationApiLanguagesResponseObject interface {
	VisitTranslationApiLanguagesResponse(w http.ResponseWriter) error
}

type TranslationApiLanguages200JSONResponse struct {
	Ocs struct {
		Data struct {
			LanguageDetection bool `json:"languageDetection"`
			Languages         []struct {
				From      string `json:"from"`
				FromLabel string `json:"fromLabel"`
				To        string `json:"to"`
				ToLabel   string `json:"toLabel"`
			} `json:"languages"`
		} `json:"data"`
		Meta OCSMeta `json:"meta"`
	} `json:"ocs"`
}

func (response TranslationApiLanguages200JSONResponse) VisitTranslationApiLanguagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type TranslationApiTranslateRequestObject struct {
	Params TranslationApiTranslateParams
}

type TranslationApiTranslateResponseObject interface {
	VisitTranslationApiTranslateResponse(w http.ResponseWriter) error
}

type TranslationApiTranslate200JSONResponse struct {
	Ocs struct {
		Data struct {
			From *string `json:"from"`
			Text string  `json:"text"`
		} `json:"data"`
		Meta OCSMeta `json:"meta"`
	} `json:"ocs"`
}

func (response TranslationApiTranslate200JSONResponse) VisitTranslationApiTranslateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type TranslationApiTranslate400JSONResponse struct {
	Ocs struct {
		Data struct {
			From    *string `json:"from"`
			Message string  `json:"message"`
		} `json:"data"`
		Meta OCSMeta `json:"meta"`
	} `json:"ocs"`
}

func (response TranslationApiTranslate400JSONResponse) VisitTranslationApiTranslateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type TranslationApiTranslate412JSONResponse struct {
	Ocs struct {
		Data struct {
			From    *string `json:"from"`
			Message string  `json:"message"`
		} `json:"data"`
		Meta OCSMeta `json:"meta"`
	} `json:"ocs"`
}

func (response TranslationApiTranslate412JSONResponse) VisitTranslationApiTranslateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type TranslationApiTranslate500JSONResponse struct {
	Ocs struct {
		Data struct {
			From    *string `json:"from"`
			Message string  `json:"message"`
		} `json:"data"`
		Meta OCSMeta `json:"meta"`
	} `json:"ocs"`
}

func (response TranslationApiTranslate500JSONResponse) VisitTranslationApiTranslateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetStatusRequestObject struct {
}

type GetStatusResponseObject interface {
	VisitGetStatusResponse(w http.ResponseWriter) error
}

type GetStatus200JSONResponse Status

func (response GetStatus200JSONResponse) VisitGetStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Returns a guest avatar image response
	// (GET /avatar/guest/{guestName}/{size})
	GuestAvatarGetAvatar(ctx context.Context, request GuestAvatarGetAvatarRequestObject) (GuestAvatarGetAvatarResponseObject, error)
	// Returns a dark guest avatar image response
	// (GET /avatar/guest/{guestName}/{size}/dark)
	GuestAvatarGetAvatarDark(ctx context.Context, request GuestAvatarGetAvatarDarkRequestObject) (GuestAvatarGetAvatarDarkResponseObject, error)
	// Get the avatar
	// (GET /avatar/{userId}/{size})
	AvatarGetAvatar(ctx context.Context, request AvatarGetAvatarRequestObject) (AvatarGetAvatarResponseObject, error)
	// Get the dark avatar
	// (GET /avatar/{userId}/{size}/dark)
	AvatarGetAvatarDark(ctx context.Context, request AvatarGetAvatarDarkRequestObject) (AvatarGetAvatarDarkResponseObject, error)
	// Get a preview by file ID
	// (GET /core/preview)
	PreviewGetPreviewByFileId(ctx context.Context, request PreviewGetPreviewByFileIdRequestObject) (PreviewGetPreviewByFileIdResponseObject, error)
	// Get a preview by file ID
	// (GET /core/preview.png)
	PreviewGetPreview(ctx context.Context, request PreviewGetPreviewRequestObject) (PreviewGetPreviewResponseObject, error)
	// Get a preview for a reference
	// (GET /core/references/preview/{referenceId})
	ReferencePreview(ctx context.Context, request ReferencePreviewRequestObject) (ReferencePreviewResponseObject, error)
	// Check if the device should be wiped
	// (POST /core/wipe/check)
	WipeCheckWipe(ctx context.Context, request WipeCheckWipeRequestObject) (WipeCheckWipeResponseObject, error)
	// Finish the wipe
	// (POST /core/wipe/success)
	WipeWipeDone(ctx context.Context, request WipeWipeDoneRequestObject) (WipeWipeDoneResponseObject, error)
	// Init a login flow
	// (POST /login/v2)
	ClientFlowLoginV2Init(ctx context.Context, request ClientFlowLoginV2InitRequestObject) (ClientFlowLoginV2InitResponseObject, error)
	// Poll the login flow credentials
	// (POST /login/v2/poll)
	ClientFlowLoginV2Poll(ctx context.Context, request ClientFlowLoginV2PollRequestObject) (ClientFlowLoginV2PollResponseObject, error)
	// Get the capabilities
	// (GET /ocs/v2.php/cloud/capabilities)
	OcsGetCapabilities(ctx context.Context, request OcsGetCapabilitiesRequestObject) (OcsGetCapabilitiesResponseObject, error)
	// Search for collections
	// (GET /ocs/v2.php/collaboration/resources/collections/search/{filter})
	CollaborationResourcesSearchCollections(ctx context.Context, request CollaborationResourcesSearchCollectionsRequestObject) (CollaborationResourcesSearchCollectionsResponseObject, error)
	// Remove a resource from a collection
	// (DELETE /ocs/v2.php/collaboration/resources/collections/{collectionId})
	CollaborationResourcesRemoveResource(ctx context.Context, request CollaborationResourcesRemoveResourceRequestObject) (CollaborationResourcesRemoveResourceResponseObject, error)
	// Get a collection
	// (GET /ocs/v2.php/collaboration/resources/collections/{collectionId})
	CollaborationResourcesListCollection(ctx context.Context, request CollaborationResourcesListCollectionRequestObject) (CollaborationResourcesListCollectionResponseObject, error)
	// Add a resource to a collection
	// (POST /ocs/v2.php/collaboration/resources/collections/{collectionId})
	CollaborationResourcesAddResource(ctx context.Context, request CollaborationResourcesAddResourceRequestObject) (CollaborationResourcesAddResourceResponseObject, error)
	// Rename a collection
	// (PUT /ocs/v2.php/collaboration/resources/collections/{collectionId})
	CollaborationResourcesRenameCollection(ctx context.Context, request CollaborationResourcesRenameCollectionRequestObject) (CollaborationResourcesRenameCollectionResponseObject, error)
	// Create a collection for a resource
	// (POST /ocs/v2.php/collaboration/resources/{baseResourceType}/{baseResourceId})
	CollaborationResourcesCreateCollectionOnResource(ctx context.Context, request CollaborationResourcesCreateCollectionOnResourceRequestObject) (CollaborationResourcesCreateCollectionOnResourceResponseObject, error)
	// Get collections by resource
	// (GET /ocs/v2.php/collaboration/resources/{resourceType}/{resourceId})
	CollaborationResourcesGetCollectionsByResource(ctx context.Context, request CollaborationResourcesGetCollectionsByResourceRequestObject) (CollaborationResourcesGetCollectionsByResourceResponseObject, error)
	// Delete app password
	// (DELETE /ocs/v2.php/core/apppassword)
	AppPasswordDeleteAppPassword(ctx context.Context, request AppPasswordDeleteAppPasswordRequestObject) (AppPasswordDeleteAppPasswordResponseObject, error)
	// Rotate app password
	// (POST /ocs/v2.php/core/apppassword/rotate)
	AppPasswordRotateAppPassword(ctx context.Context, request AppPasswordRotateAppPasswordRequestObject) (AppPasswordRotateAppPasswordResponseObject, error)
	// Autocomplete a query
	// (GET /ocs/v2.php/core/autocomplete/get)
	AutoCompleteGet(ctx context.Context, request AutoCompleteGetRequestObject) (AutoCompleteGetResponseObject, error)
	// Create app password
	// (GET /ocs/v2.php/core/getapppassword)
	AppPasswordGetAppPassword(ctx context.Context, request AppPasswordGetAppPasswordRequestObject) (AppPasswordGetAppPasswordResponseObject, error)
	// Get the apps navigation
	// (GET /ocs/v2.php/core/navigation/apps)
	NavigationGetAppsNavigation(ctx context.Context, request NavigationGetAppsNavigationRequestObject) (NavigationGetAppsNavigationResponseObject, error)
	// Get the settings navigation
	// (GET /ocs/v2.php/core/navigation/settings)
	NavigationGetSettingsNavigation(ctx context.Context, request NavigationGetSettingsNavigationRequestObject) (NavigationGetSettingsNavigationResponseObject, error)
	// Get the changes
	// (GET /ocs/v2.php/core/whatsnew)
	WhatsNewGet(ctx context.Context, request WhatsNewGetRequestObject) (WhatsNewGetResponseObject, error)
	// Dismiss the changes
	// (POST /ocs/v2.php/core/whatsnew)
	WhatsNewDismiss(ctx context.Context, request WhatsNewDismissRequestObject) (WhatsNewDismissResponseObject, error)
	// Get the user details for a hovercard
	// (GET /ocs/v2.php/hovercard/v1/{userId})
	HoverCardGetUser(ctx context.Context, request HoverCardGetUserRequestObject) (HoverCardGetUserResponseObject, error)
	// Update the visiblity of a parameter
	// (PUT /ocs/v2.php/profile/{targetUserId})
	ProfileApiSetVisibility(ctx context.Context, request ProfileApiSetVisibilityRequestObject) (ProfileApiSetVisibilityResponseObject, error)
	// Extract references from a text
	// (POST /ocs/v2.php/references/extract)
	ReferenceApiExtract(ctx context.Context, request ReferenceApiExtractRequestObject) (ReferenceApiExtractResponseObject, error)
	// Touch a provider
	// (PUT /ocs/v2.php/references/provider/{providerId})
	ReferenceApiTouchProvider(ctx context.Context, request ReferenceApiTouchProviderRequestObject) (ReferenceApiTouchProviderResponseObject, error)
	// Get the providers
	// (GET /ocs/v2.php/references/providers)
	ReferenceApiGetProvidersInfo(ctx context.Context, request ReferenceApiGetProvidersInfoRequestObject) (ReferenceApiGetProvidersInfoResponseObject, error)
	// Resolve a reference
	// (GET /ocs/v2.php/references/resolve)
	ReferenceApiResolveOne(ctx context.Context, request ReferenceApiResolveOneRequestObject) (ReferenceApiResolveOneResponseObject, error)
	// Resolve multiple references
	// (POST /ocs/v2.php/references/resolve)
	ReferenceApiResolve(ctx context.Context, request ReferenceApiResolveRequestObject) (ReferenceApiResolveResponseObject, error)
	// Get the providers for unified search
	// (GET /ocs/v2.php/search/providers)
	UnifiedSearchGetProviders(ctx context.Context, request UnifiedSearchGetProvidersRequestObject) (UnifiedSearchGetProvidersResponseObject, error)
	// Search
	// (GET /ocs/v2.php/search/providers/{providerId}/search)
	UnifiedSearchSearch(ctx context.Context, request UnifiedSearchSearchRequestObject) (UnifiedSearchSearchResponseObject, error)
	// Get the list of supported languages
	// (GET /ocs/v2.php/translation/languages)
	TranslationApiLanguages(ctx context.Context, request TranslationApiLanguagesRequestObject) (TranslationApiLanguagesResponseObject, error)
	// Translate a text
	// (POST /ocs/v2.php/translation/translate)
	TranslationApiTranslate(ctx context.Context, request TranslationApiTranslateRequestObject) (TranslationApiTranslateResponseObject, error)

	// (GET /status.php)
	GetStatus(ctx context.Context, request GetStatusRequestObject) (GetStatusResponseObject, error)
}

type StrictHandlerFunc = runtime.StrictHttpHandlerFunc
type StrictMiddlewareFunc = runtime.StrictHttpMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GuestAvatarGetAvatar operation middleware
func (sh *strictHandler) GuestAvatarGetAvatar(w http.ResponseWriter, r *http.Request, guestName string, size string, params GuestAvatarGetAvatarParams) {
	var request GuestAvatarGetAvatarRequestObject

	request.GuestName = guestName
	request.Size = size
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GuestAvatarGetAvatar(ctx, request.(GuestAvatarGetAvatarRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GuestAvatarGetAvatar")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GuestAvatarGetAvatarResponseObject); ok {
		if err := validResponse.VisitGuestAvatarGetAvatarResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GuestAvatarGetAvatarDark operation middleware
func (sh *strictHandler) GuestAvatarGetAvatarDark(w http.ResponseWriter, r *http.Request, guestName string, size string) {
	var request GuestAvatarGetAvatarDarkRequestObject

	request.GuestName = guestName
	request.Size = size

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GuestAvatarGetAvatarDark(ctx, request.(GuestAvatarGetAvatarDarkRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GuestAvatarGetAvatarDark")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GuestAvatarGetAvatarDarkResponseObject); ok {
		if err := validResponse.VisitGuestAvatarGetAvatarDarkResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// AvatarGetAvatar operation middleware
func (sh *strictHandler) AvatarGetAvatar(w http.ResponseWriter, r *http.Request, userId string, size int64) {
	var request AvatarGetAvatarRequestObject

	request.UserId = userId
	request.Size = size

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AvatarGetAvatar(ctx, request.(AvatarGetAvatarRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AvatarGetAvatar")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AvatarGetAvatarResponseObject); ok {
		if err := validResponse.VisitAvatarGetAvatarResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// AvatarGetAvatarDark operation middleware
func (sh *strictHandler) AvatarGetAvatarDark(w http.ResponseWriter, r *http.Request, userId string, size int64) {
	var request AvatarGetAvatarDarkRequestObject

	request.UserId = userId
	request.Size = size

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AvatarGetAvatarDark(ctx, request.(AvatarGetAvatarDarkRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AvatarGetAvatarDark")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AvatarGetAvatarDarkResponseObject); ok {
		if err := validResponse.VisitAvatarGetAvatarDarkResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// PreviewGetPreviewByFileId operation middleware
func (sh *strictHandler) PreviewGetPreviewByFileId(w http.ResponseWriter, r *http.Request, params PreviewGetPreviewByFileIdParams) {
	var request PreviewGetPreviewByFileIdRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PreviewGetPreviewByFileId(ctx, request.(PreviewGetPreviewByFileIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PreviewGetPreviewByFileId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PreviewGetPreviewByFileIdResponseObject); ok {
		if err := validResponse.VisitPreviewGetPreviewByFileIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// PreviewGetPreview operation middleware
func (sh *strictHandler) PreviewGetPreview(w http.ResponseWriter, r *http.Request, params PreviewGetPreviewParams) {
	var request PreviewGetPreviewRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PreviewGetPreview(ctx, request.(PreviewGetPreviewRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PreviewGetPreview")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PreviewGetPreviewResponseObject); ok {
		if err := validResponse.VisitPreviewGetPreviewResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// ReferencePreview operation middleware
func (sh *strictHandler) ReferencePreview(w http.ResponseWriter, r *http.Request, referenceId string) {
	var request ReferencePreviewRequestObject

	request.ReferenceId = referenceId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ReferencePreview(ctx, request.(ReferencePreviewRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReferencePreview")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ReferencePreviewResponseObject); ok {
		if err := validResponse.VisitReferencePreviewResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// WipeCheckWipe operation middleware
func (sh *strictHandler) WipeCheckWipe(w http.ResponseWriter, r *http.Request, params WipeCheckWipeParams) {
	var request WipeCheckWipeRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.WipeCheckWipe(ctx, request.(WipeCheckWipeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WipeCheckWipe")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(WipeCheckWipeResponseObject); ok {
		if err := validResponse.VisitWipeCheckWipeResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// WipeWipeDone operation middleware
func (sh *strictHandler) WipeWipeDone(w http.ResponseWriter, r *http.Request, params WipeWipeDoneParams) {
	var request WipeWipeDoneRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.WipeWipeDone(ctx, request.(WipeWipeDoneRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WipeWipeDone")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(WipeWipeDoneResponseObject); ok {
		if err := validResponse.VisitWipeWipeDoneResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// ClientFlowLoginV2Init operation middleware
func (sh *strictHandler) ClientFlowLoginV2Init(w http.ResponseWriter, r *http.Request) {
	var request ClientFlowLoginV2InitRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ClientFlowLoginV2Init(ctx, request.(ClientFlowLoginV2InitRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ClientFlowLoginV2Init")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ClientFlowLoginV2InitResponseObject); ok {
		if err := validResponse.VisitClientFlowLoginV2InitResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// ClientFlowLoginV2Poll operation middleware
func (sh *strictHandler) ClientFlowLoginV2Poll(w http.ResponseWriter, r *http.Request, params ClientFlowLoginV2PollParams) {
	var request ClientFlowLoginV2PollRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ClientFlowLoginV2Poll(ctx, request.(ClientFlowLoginV2PollRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ClientFlowLoginV2Poll")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ClientFlowLoginV2PollResponseObject); ok {
		if err := validResponse.VisitClientFlowLoginV2PollResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// OcsGetCapabilities operation middleware
func (sh *strictHandler) OcsGetCapabilities(w http.ResponseWriter, r *http.Request, params OcsGetCapabilitiesParams) {
	var request OcsGetCapabilitiesRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.OcsGetCapabilities(ctx, request.(OcsGetCapabilitiesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "OcsGetCapabilities")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(OcsGetCapabilitiesResponseObject); ok {
		if err := validResponse.VisitOcsGetCapabilitiesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// CollaborationResourcesSearchCollections operation middleware
func (sh *strictHandler) CollaborationResourcesSearchCollections(w http.ResponseWriter, r *http.Request, filter string, params CollaborationResourcesSearchCollectionsParams) {
	var request CollaborationResourcesSearchCollectionsRequestObject

	request.Filter = filter
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CollaborationResourcesSearchCollections(ctx, request.(CollaborationResourcesSearchCollectionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CollaborationResourcesSearchCollections")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CollaborationResourcesSearchCollectionsResponseObject); ok {
		if err := validResponse.VisitCollaborationResourcesSearchCollectionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// CollaborationResourcesRemoveResource operation middleware
func (sh *strictHandler) CollaborationResourcesRemoveResource(w http.ResponseWriter, r *http.Request, collectionId int64, params CollaborationResourcesRemoveResourceParams) {
	var request CollaborationResourcesRemoveResourceRequestObject

	request.CollectionId = collectionId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CollaborationResourcesRemoveResource(ctx, request.(CollaborationResourcesRemoveResourceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CollaborationResourcesRemoveResource")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CollaborationResourcesRemoveResourceResponseObject); ok {
		if err := validResponse.VisitCollaborationResourcesRemoveResourceResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// CollaborationResourcesListCollection operation middleware
func (sh *strictHandler) CollaborationResourcesListCollection(w http.ResponseWriter, r *http.Request, collectionId int64, params CollaborationResourcesListCollectionParams) {
	var request CollaborationResourcesListCollectionRequestObject

	request.CollectionId = collectionId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CollaborationResourcesListCollection(ctx, request.(CollaborationResourcesListCollectionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CollaborationResourcesListCollection")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CollaborationResourcesListCollectionResponseObject); ok {
		if err := validResponse.VisitCollaborationResourcesListCollectionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// CollaborationResourcesAddResource operation middleware
func (sh *strictHandler) CollaborationResourcesAddResource(w http.ResponseWriter, r *http.Request, collectionId int64, params CollaborationResourcesAddResourceParams) {
	var request CollaborationResourcesAddResourceRequestObject

	request.CollectionId = collectionId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CollaborationResourcesAddResource(ctx, request.(CollaborationResourcesAddResourceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CollaborationResourcesAddResource")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CollaborationResourcesAddResourceResponseObject); ok {
		if err := validResponse.VisitCollaborationResourcesAddResourceResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// CollaborationResourcesRenameCollection operation middleware
func (sh *strictHandler) CollaborationResourcesRenameCollection(w http.ResponseWriter, r *http.Request, collectionId int64, params CollaborationResourcesRenameCollectionParams) {
	var request CollaborationResourcesRenameCollectionRequestObject

	request.CollectionId = collectionId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CollaborationResourcesRenameCollection(ctx, request.(CollaborationResourcesRenameCollectionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CollaborationResourcesRenameCollection")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CollaborationResourcesRenameCollectionResponseObject); ok {
		if err := validResponse.VisitCollaborationResourcesRenameCollectionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// CollaborationResourcesCreateCollectionOnResource operation middleware
func (sh *strictHandler) CollaborationResourcesCreateCollectionOnResource(w http.ResponseWriter, r *http.Request, baseResourceType string, baseResourceId string, params CollaborationResourcesCreateCollectionOnResourceParams) {
	var request CollaborationResourcesCreateCollectionOnResourceRequestObject

	request.BaseResourceType = baseResourceType
	request.BaseResourceId = baseResourceId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CollaborationResourcesCreateCollectionOnResource(ctx, request.(CollaborationResourcesCreateCollectionOnResourceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CollaborationResourcesCreateCollectionOnResource")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CollaborationResourcesCreateCollectionOnResourceResponseObject); ok {
		if err := validResponse.VisitCollaborationResourcesCreateCollectionOnResourceResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// CollaborationResourcesGetCollectionsByResource operation middleware
func (sh *strictHandler) CollaborationResourcesGetCollectionsByResource(w http.ResponseWriter, r *http.Request, resourceType string, resourceId string, params CollaborationResourcesGetCollectionsByResourceParams) {
	var request CollaborationResourcesGetCollectionsByResourceRequestObject

	request.ResourceType = resourceType
	request.ResourceId = resourceId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CollaborationResourcesGetCollectionsByResource(ctx, request.(CollaborationResourcesGetCollectionsByResourceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CollaborationResourcesGetCollectionsByResource")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CollaborationResourcesGetCollectionsByResourceResponseObject); ok {
		if err := validResponse.VisitCollaborationResourcesGetCollectionsByResourceResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// AppPasswordDeleteAppPassword operation middleware
func (sh *strictHandler) AppPasswordDeleteAppPassword(w http.ResponseWriter, r *http.Request, params AppPasswordDeleteAppPasswordParams) {
	var request AppPasswordDeleteAppPasswordRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AppPasswordDeleteAppPassword(ctx, request.(AppPasswordDeleteAppPasswordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AppPasswordDeleteAppPassword")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AppPasswordDeleteAppPasswordResponseObject); ok {
		if err := validResponse.VisitAppPasswordDeleteAppPasswordResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// AppPasswordRotateAppPassword operation middleware
func (sh *strictHandler) AppPasswordRotateAppPassword(w http.ResponseWriter, r *http.Request, params AppPasswordRotateAppPasswordParams) {
	var request AppPasswordRotateAppPasswordRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AppPasswordRotateAppPassword(ctx, request.(AppPasswordRotateAppPasswordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AppPasswordRotateAppPassword")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AppPasswordRotateAppPasswordResponseObject); ok {
		if err := validResponse.VisitAppPasswordRotateAppPasswordResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// AutoCompleteGet operation middleware
func (sh *strictHandler) AutoCompleteGet(w http.ResponseWriter, r *http.Request, params AutoCompleteGetParams) {
	var request AutoCompleteGetRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AutoCompleteGet(ctx, request.(AutoCompleteGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AutoCompleteGet")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AutoCompleteGetResponseObject); ok {
		if err := validResponse.VisitAutoCompleteGetResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// AppPasswordGetAppPassword operation middleware
func (sh *strictHandler) AppPasswordGetAppPassword(w http.ResponseWriter, r *http.Request, params AppPasswordGetAppPasswordParams) {
	var request AppPasswordGetAppPasswordRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AppPasswordGetAppPassword(ctx, request.(AppPasswordGetAppPasswordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AppPasswordGetAppPassword")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AppPasswordGetAppPasswordResponseObject); ok {
		if err := validResponse.VisitAppPasswordGetAppPasswordResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// NavigationGetAppsNavigation operation middleware
func (sh *strictHandler) NavigationGetAppsNavigation(w http.ResponseWriter, r *http.Request, params NavigationGetAppsNavigationParams) {
	var request NavigationGetAppsNavigationRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.NavigationGetAppsNavigation(ctx, request.(NavigationGetAppsNavigationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "NavigationGetAppsNavigation")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(NavigationGetAppsNavigationResponseObject); ok {
		if err := validResponse.VisitNavigationGetAppsNavigationResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// NavigationGetSettingsNavigation operation middleware
func (sh *strictHandler) NavigationGetSettingsNavigation(w http.ResponseWriter, r *http.Request, params NavigationGetSettingsNavigationParams) {
	var request NavigationGetSettingsNavigationRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.NavigationGetSettingsNavigation(ctx, request.(NavigationGetSettingsNavigationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "NavigationGetSettingsNavigation")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(NavigationGetSettingsNavigationResponseObject); ok {
		if err := validResponse.VisitNavigationGetSettingsNavigationResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// WhatsNewGet operation middleware
func (sh *strictHandler) WhatsNewGet(w http.ResponseWriter, r *http.Request, params WhatsNewGetParams) {
	var request WhatsNewGetRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.WhatsNewGet(ctx, request.(WhatsNewGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WhatsNewGet")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(WhatsNewGetResponseObject); ok {
		if err := validResponse.VisitWhatsNewGetResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// WhatsNewDismiss operation middleware
func (sh *strictHandler) WhatsNewDismiss(w http.ResponseWriter, r *http.Request, params WhatsNewDismissParams) {
	var request WhatsNewDismissRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.WhatsNewDismiss(ctx, request.(WhatsNewDismissRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WhatsNewDismiss")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(WhatsNewDismissResponseObject); ok {
		if err := validResponse.VisitWhatsNewDismissResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// HoverCardGetUser operation middleware
func (sh *strictHandler) HoverCardGetUser(w http.ResponseWriter, r *http.Request, userId string, params HoverCardGetUserParams) {
	var request HoverCardGetUserRequestObject

	request.UserId = userId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.HoverCardGetUser(ctx, request.(HoverCardGetUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "HoverCardGetUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(HoverCardGetUserResponseObject); ok {
		if err := validResponse.VisitHoverCardGetUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// ProfileApiSetVisibility operation middleware
func (sh *strictHandler) ProfileApiSetVisibility(w http.ResponseWriter, r *http.Request, targetUserId string, params ProfileApiSetVisibilityParams) {
	var request ProfileApiSetVisibilityRequestObject

	request.TargetUserId = targetUserId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ProfileApiSetVisibility(ctx, request.(ProfileApiSetVisibilityRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ProfileApiSetVisibility")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ProfileApiSetVisibilityResponseObject); ok {
		if err := validResponse.VisitProfileApiSetVisibilityResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// ReferenceApiExtract operation middleware
func (sh *strictHandler) ReferenceApiExtract(w http.ResponseWriter, r *http.Request, params ReferenceApiExtractParams) {
	var request ReferenceApiExtractRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ReferenceApiExtract(ctx, request.(ReferenceApiExtractRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReferenceApiExtract")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ReferenceApiExtractResponseObject); ok {
		if err := validResponse.VisitReferenceApiExtractResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// ReferenceApiTouchProvider operation middleware
func (sh *strictHandler) ReferenceApiTouchProvider(w http.ResponseWriter, r *http.Request, providerId string, params ReferenceApiTouchProviderParams) {
	var request ReferenceApiTouchProviderRequestObject

	request.ProviderId = providerId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ReferenceApiTouchProvider(ctx, request.(ReferenceApiTouchProviderRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReferenceApiTouchProvider")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ReferenceApiTouchProviderResponseObject); ok {
		if err := validResponse.VisitReferenceApiTouchProviderResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// ReferenceApiGetProvidersInfo operation middleware
func (sh *strictHandler) ReferenceApiGetProvidersInfo(w http.ResponseWriter, r *http.Request, params ReferenceApiGetProvidersInfoParams) {
	var request ReferenceApiGetProvidersInfoRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ReferenceApiGetProvidersInfo(ctx, request.(ReferenceApiGetProvidersInfoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReferenceApiGetProvidersInfo")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ReferenceApiGetProvidersInfoResponseObject); ok {
		if err := validResponse.VisitReferenceApiGetProvidersInfoResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// ReferenceApiResolveOne operation middleware
func (sh *strictHandler) ReferenceApiResolveOne(w http.ResponseWriter, r *http.Request, params ReferenceApiResolveOneParams) {
	var request ReferenceApiResolveOneRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ReferenceApiResolveOne(ctx, request.(ReferenceApiResolveOneRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReferenceApiResolveOne")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ReferenceApiResolveOneResponseObject); ok {
		if err := validResponse.VisitReferenceApiResolveOneResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// ReferenceApiResolve operation middleware
func (sh *strictHandler) ReferenceApiResolve(w http.ResponseWriter, r *http.Request, params ReferenceApiResolveParams) {
	var request ReferenceApiResolveRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ReferenceApiResolve(ctx, request.(ReferenceApiResolveRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReferenceApiResolve")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ReferenceApiResolveResponseObject); ok {
		if err := validResponse.VisitReferenceApiResolveResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// UnifiedSearchGetProviders operation middleware
func (sh *strictHandler) UnifiedSearchGetProviders(w http.ResponseWriter, r *http.Request, params UnifiedSearchGetProvidersParams) {
	var request UnifiedSearchGetProvidersRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UnifiedSearchGetProviders(ctx, request.(UnifiedSearchGetProvidersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UnifiedSearchGetProviders")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UnifiedSearchGetProvidersResponseObject); ok {
		if err := validResponse.VisitUnifiedSearchGetProvidersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// UnifiedSearchSearch operation middleware
func (sh *strictHandler) UnifiedSearchSearch(w http.ResponseWriter, r *http.Request, providerId string, params UnifiedSearchSearchParams) {
	var request UnifiedSearchSearchRequestObject

	request.ProviderId = providerId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UnifiedSearchSearch(ctx, request.(UnifiedSearchSearchRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UnifiedSearchSearch")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UnifiedSearchSearchResponseObject); ok {
		if err := validResponse.VisitUnifiedSearchSearchResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// TranslationApiLanguages operation middleware
func (sh *strictHandler) TranslationApiLanguages(w http.ResponseWriter, r *http.Request, params TranslationApiLanguagesParams) {
	var request TranslationApiLanguagesRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.TranslationApiLanguages(ctx, request.(TranslationApiLanguagesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TranslationApiLanguages")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(TranslationApiLanguagesResponseObject); ok {
		if err := validResponse.VisitTranslationApiLanguagesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// TranslationApiTranslate operation middleware
func (sh *strictHandler) TranslationApiTranslate(w http.ResponseWriter, r *http.Request, params TranslationApiTranslateParams) {
	var request TranslationApiTranslateRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.TranslationApiTranslate(ctx, request.(TranslationApiTranslateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TranslationApiTranslate")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(TranslationApiTranslateResponseObject); ok {
		if err := validResponse.VisitTranslationApiTranslateResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetStatus operation middleware
func (sh *strictHandler) GetStatus(w http.ResponseWriter, r *http.Request) {
	var request GetStatusRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetStatus(ctx, request.(GetStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetStatus")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetStatusResponseObject); ok {
		if err := validResponse.VisitGetStatusResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}
