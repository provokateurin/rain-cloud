// Package user_status provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package user_status

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/go-chi/chi/v5"
)

const (
	Basic_authScopes  = "basic_auth.Scopes"
	Bearer_authScopes = "bearer_auth.Scopes"
)

// Defines values for ClearAtType.
const (
	EndOf  ClearAtType = "end-of"
	Period ClearAtType = "period"
)

// Defines values for ClearAtTimeType.
const (
	Day  ClearAtTimeType = "day"
	Week ClearAtTimeType = "week"
)

// Capabilities defines model for Capabilities.
type Capabilities struct {
	UserStatus struct {
		Enabled       bool `json:"enabled"`
		Restore       bool `json:"restore"`
		SupportsEmoji bool `json:"supports_emoji"`
	} `json:"user_status"`
}

// ClearAt defines model for ClearAt.
type ClearAt struct {
	Time ClearAt_Time `json:"time"`
	Type ClearAtType  `json:"type"`
}

// ClearAtTime0 defines model for .
type ClearAtTime0 = int64

// ClearAt_Time defines model for ClearAt.Time.
type ClearAt_Time struct {
	union json.RawMessage
}

// ClearAtType defines model for ClearAt.Type.
type ClearAtType string

// ClearAtTimeType defines model for ClearAtTimeType.
type ClearAtTimeType string

// OCSMeta defines model for OCSMeta.
type OCSMeta struct {
	Itemsperpage *string `json:"itemsperpage,omitempty"`
	Message      *string `json:"message,omitempty"`
	Status       string  `json:"status"`
	Statuscode   int     `json:"statuscode"`
	Totalitems   *string `json:"totalitems,omitempty"`
}

// Predefined defines model for Predefined.
type Predefined struct {
	ClearAt ClearAt `json:"clearAt"`
	Icon    string  `json:"icon"`
	Id      string  `json:"id"`
	Message string  `json:"message"`
	Visible *bool   `json:"visible"`
}

// Private defines model for Private.
type Private struct {
	ClearAt             *int64  `json:"clearAt"`
	Icon                *string `json:"icon"`
	Message             *string `json:"message"`
	MessageId           *string `json:"messageId"`
	MessageIsPredefined bool    `json:"messageIsPredefined"`
	Status              string  `json:"status"`
	StatusIsUserDefined bool    `json:"statusIsUserDefined"`
	UserId              string  `json:"userId"`
}

// Public defines model for Public.
type Public struct {
	ClearAt *int64  `json:"clearAt"`
	Icon    *string `json:"icon"`
	Message *string `json:"message"`
	Status  string  `json:"status"`
	UserId  string  `json:"userId"`
}

// HeartbeatHeartbeatParams defines parameters for HeartbeatHeartbeat.
type HeartbeatHeartbeatParams struct {
	// Status Only online, away
	Status        string `form:"status" json:"status"`
	OCSAPIRequest string `json:"OCS-APIRequest"`
}

// PredefinedStatusFindAllParams defines parameters for PredefinedStatusFindAll.
type PredefinedStatusFindAllParams struct {
	OCSAPIRequest string `json:"OCS-APIRequest"`
}

// StatusesFindAllParams defines parameters for StatusesFindAll.
type StatusesFindAllParams struct {
	// Limit Maximum number of statuses to find
	Limit *int64 `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Offset for finding statuses
	Offset        *int64 `form:"offset,omitempty" json:"offset,omitempty"`
	OCSAPIRequest string `json:"OCS-APIRequest"`
}

// StatusesFindParams defines parameters for StatusesFind.
type StatusesFindParams struct {
	OCSAPIRequest string `json:"OCS-APIRequest"`
}

// UserStatusGetStatusParams defines parameters for UserStatusGetStatus.
type UserStatusGetStatusParams struct {
	OCSAPIRequest string `json:"OCS-APIRequest"`
}

// UserStatusClearMessageParams defines parameters for UserStatusClearMessage.
type UserStatusClearMessageParams struct {
	OCSAPIRequest string `json:"OCS-APIRequest"`
}

// UserStatusSetCustomMessageParams defines parameters for UserStatusSetCustomMessage.
type UserStatusSetCustomMessageParams struct {
	// StatusIcon Icon of the status
	StatusIcon *string `form:"statusIcon,omitempty" json:"statusIcon,omitempty"`

	// Message Message of the status
	Message *string `form:"message,omitempty" json:"message,omitempty"`

	// ClearAt When the message should be cleared
	ClearAt       *int64 `form:"clearAt,omitempty" json:"clearAt,omitempty"`
	OCSAPIRequest string `json:"OCS-APIRequest"`
}

// UserStatusSetPredefinedMessageParams defines parameters for UserStatusSetPredefinedMessage.
type UserStatusSetPredefinedMessageParams struct {
	// MessageId ID of the predefined message
	MessageId string `form:"messageId" json:"messageId"`

	// ClearAt When the message should be cleared
	ClearAt       *int64 `form:"clearAt,omitempty" json:"clearAt,omitempty"`
	OCSAPIRequest string `json:"OCS-APIRequest"`
}

// UserStatusRevertStatusParams defines parameters for UserStatusRevertStatus.
type UserStatusRevertStatusParams struct {
	OCSAPIRequest string `json:"OCS-APIRequest"`
}

// UserStatusSetStatusParams defines parameters for UserStatusSetStatus.
type UserStatusSetStatusParams struct {
	// StatusType The new status type
	StatusType    string `form:"statusType" json:"statusType"`
	OCSAPIRequest string `json:"OCS-APIRequest"`
}

// AsClearAtTime0 returns the union data inside the ClearAt_Time as a ClearAtTime0
func (t ClearAt_Time) AsClearAtTime0() (ClearAtTime0, error) {
	var body ClearAtTime0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromClearAtTime0 overwrites any union data inside the ClearAt_Time as the provided ClearAtTime0
func (t *ClearAt_Time) FromClearAtTime0(v ClearAtTime0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeClearAtTime0 performs a merge with any union data inside the ClearAt_Time, using the provided ClearAtTime0
func (t *ClearAt_Time) MergeClearAtTime0(v ClearAtTime0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsClearAtTimeType returns the union data inside the ClearAt_Time as a ClearAtTimeType
func (t ClearAt_Time) AsClearAtTimeType() (ClearAtTimeType, error) {
	var body ClearAtTimeType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromClearAtTimeType overwrites any union data inside the ClearAt_Time as the provided ClearAtTimeType
func (t *ClearAt_Time) FromClearAtTimeType(v ClearAtTimeType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeClearAtTimeType performs a merge with any union data inside the ClearAt_Time, using the provided ClearAtTimeType
func (t *ClearAt_Time) MergeClearAtTimeType(v ClearAtTimeType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t ClearAt_Time) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ClearAt_Time) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Keep the current status alive
	// (PUT /ocs/v2.php/apps/user_status/api/v1/heartbeat)
	HeartbeatHeartbeat(w http.ResponseWriter, r *http.Request, params HeartbeatHeartbeatParams)
	// Get all predefined messages
	// (GET /ocs/v2.php/apps/user_status/api/v1/predefined_statuses)
	PredefinedStatusFindAll(w http.ResponseWriter, r *http.Request, params PredefinedStatusFindAllParams)
	// Find statuses of users
	// (GET /ocs/v2.php/apps/user_status/api/v1/statuses)
	StatusesFindAll(w http.ResponseWriter, r *http.Request, params StatusesFindAllParams)
	// Find the status of a user
	// (GET /ocs/v2.php/apps/user_status/api/v1/statuses/{userId})
	StatusesFind(w http.ResponseWriter, r *http.Request, userId string, params StatusesFindParams)
	// Get the status of the current user
	// (GET /ocs/v2.php/apps/user_status/api/v1/user_status)
	UserStatusGetStatus(w http.ResponseWriter, r *http.Request, params UserStatusGetStatusParams)
	// Clear the message of the current user
	// (DELETE /ocs/v2.php/apps/user_status/api/v1/user_status/message)
	UserStatusClearMessage(w http.ResponseWriter, r *http.Request, params UserStatusClearMessageParams)
	// Set the message to a custom message for the current user
	// (PUT /ocs/v2.php/apps/user_status/api/v1/user_status/message/custom)
	UserStatusSetCustomMessage(w http.ResponseWriter, r *http.Request, params UserStatusSetCustomMessageParams)
	// Set the message to a predefined message for the current user
	// (PUT /ocs/v2.php/apps/user_status/api/v1/user_status/message/predefined)
	UserStatusSetPredefinedMessage(w http.ResponseWriter, r *http.Request, params UserStatusSetPredefinedMessageParams)
	// Revert the status to the previous status
	// (DELETE /ocs/v2.php/apps/user_status/api/v1/user_status/revert/{messageId})
	UserStatusRevertStatus(w http.ResponseWriter, r *http.Request, messageId string, params UserStatusRevertStatusParams)
	// Update the status type of the current user
	// (PUT /ocs/v2.php/apps/user_status/api/v1/user_status/status)
	UserStatusSetStatus(w http.ResponseWriter, r *http.Request, params UserStatusSetStatusParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// HeartbeatHeartbeat operation middleware
func (siw *ServerInterfaceWrapper) HeartbeatHeartbeat(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params HeartbeatHeartbeatParams

	// ------------- Required query parameter "status" -------------

	if paramValue := r.URL.Query().Get("status"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "status"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.HeartbeatHeartbeat(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PredefinedStatusFindAll operation middleware
func (siw *ServerInterfaceWrapper) PredefinedStatusFindAll(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PredefinedStatusFindAllParams

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PredefinedStatusFindAll(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// StatusesFindAll operation middleware
func (siw *ServerInterfaceWrapper) StatusesFindAll(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params StatusesFindAllParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.StatusesFindAll(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// StatusesFind operation middleware
func (siw *ServerInterfaceWrapper) StatusesFind(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, chi.URLParam(r, "userId"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params StatusesFindParams

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.StatusesFind(w, r, userId, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UserStatusGetStatus operation middleware
func (siw *ServerInterfaceWrapper) UserStatusGetStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UserStatusGetStatusParams

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserStatusGetStatus(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UserStatusClearMessage operation middleware
func (siw *ServerInterfaceWrapper) UserStatusClearMessage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UserStatusClearMessageParams

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserStatusClearMessage(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UserStatusSetCustomMessage operation middleware
func (siw *ServerInterfaceWrapper) UserStatusSetCustomMessage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UserStatusSetCustomMessageParams

	// ------------- Optional query parameter "statusIcon" -------------

	err = runtime.BindQueryParameter("form", true, false, "statusIcon", r.URL.Query(), &params.StatusIcon)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "statusIcon", Err: err})
		return
	}

	// ------------- Optional query parameter "message" -------------

	err = runtime.BindQueryParameter("form", true, false, "message", r.URL.Query(), &params.Message)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "message", Err: err})
		return
	}

	// ------------- Optional query parameter "clearAt" -------------

	err = runtime.BindQueryParameter("form", true, false, "clearAt", r.URL.Query(), &params.ClearAt)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "clearAt", Err: err})
		return
	}

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserStatusSetCustomMessage(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UserStatusSetPredefinedMessage operation middleware
func (siw *ServerInterfaceWrapper) UserStatusSetPredefinedMessage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UserStatusSetPredefinedMessageParams

	// ------------- Required query parameter "messageId" -------------

	if paramValue := r.URL.Query().Get("messageId"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "messageId"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "messageId", r.URL.Query(), &params.MessageId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "messageId", Err: err})
		return
	}

	// ------------- Optional query parameter "clearAt" -------------

	err = runtime.BindQueryParameter("form", true, false, "clearAt", r.URL.Query(), &params.ClearAt)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "clearAt", Err: err})
		return
	}

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserStatusSetPredefinedMessage(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UserStatusRevertStatus operation middleware
func (siw *ServerInterfaceWrapper) UserStatusRevertStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "messageId" -------------
	var messageId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "messageId", runtime.ParamLocationPath, chi.URLParam(r, "messageId"), &messageId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "messageId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UserStatusRevertStatusParams

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserStatusRevertStatus(w, r, messageId, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UserStatusSetStatus operation middleware
func (siw *ServerInterfaceWrapper) UserStatusSetStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UserStatusSetStatusParams

	// ------------- Required query parameter "statusType" -------------

	if paramValue := r.URL.Query().Get("statusType"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "statusType"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "statusType", r.URL.Query(), &params.StatusType)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "statusType", Err: err})
		return
	}

	headers := r.Header

	// ------------- Required header parameter "OCS-APIRequest" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OCS-APIRequest")]; found {
		var OCSAPIRequest string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OCS-APIRequest", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OCS-APIRequest", runtime.ParamLocationHeader, valueList[0], &OCSAPIRequest)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OCS-APIRequest", Err: err})
			return
		}

		params.OCSAPIRequest = OCSAPIRequest

	} else {
		err := fmt.Errorf("Header parameter OCS-APIRequest is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "OCS-APIRequest", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserStatusSetStatus(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/ocs/v2.php/apps/user_status/api/v1/heartbeat", wrapper.HeartbeatHeartbeat)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/ocs/v2.php/apps/user_status/api/v1/predefined_statuses", wrapper.PredefinedStatusFindAll)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/ocs/v2.php/apps/user_status/api/v1/statuses", wrapper.StatusesFindAll)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/ocs/v2.php/apps/user_status/api/v1/statuses/{userId}", wrapper.StatusesFind)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/ocs/v2.php/apps/user_status/api/v1/user_status", wrapper.UserStatusGetStatus)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/ocs/v2.php/apps/user_status/api/v1/user_status/message", wrapper.UserStatusClearMessage)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/ocs/v2.php/apps/user_status/api/v1/user_status/message/custom", wrapper.UserStatusSetCustomMessage)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/ocs/v2.php/apps/user_status/api/v1/user_status/message/predefined", wrapper.UserStatusSetPredefinedMessage)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/ocs/v2.php/apps/user_status/api/v1/user_status/revert/{messageId}", wrapper.UserStatusRevertStatus)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/ocs/v2.php/apps/user_status/api/v1/user_status/status", wrapper.UserStatusSetStatus)
	})

	return r
}

type HeartbeatHeartbeatRequestObject struct {
	Params HeartbeatHeartbeatParams
}

type HeartbeatHeartbeatResponseObject interface {
	VisitHeartbeatHeartbeatResponse(w http.ResponseWriter) error
}

type HeartbeatHeartbeat200JSONResponse struct {
	Ocs struct {
		Data Private `json:"data"`
		Meta OCSMeta `json:"meta"`
	} `json:"ocs"`
}

func (response HeartbeatHeartbeat200JSONResponse) VisitHeartbeatHeartbeatResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type HeartbeatHeartbeat204JSONResponse struct {
	Ocs struct {
		Data map[string]interface{} `json:"data"`
		Meta OCSMeta                `json:"meta"`
	} `json:"ocs"`
}

func (response HeartbeatHeartbeat204JSONResponse) VisitHeartbeatHeartbeatResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(204)

	return json.NewEncoder(w).Encode(response)
}

type HeartbeatHeartbeat400JSONResponse struct {
	Ocs struct {
		Data map[string]interface{} `json:"data"`
		Meta OCSMeta                `json:"meta"`
	} `json:"ocs"`
}

func (response HeartbeatHeartbeat400JSONResponse) VisitHeartbeatHeartbeatResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type HeartbeatHeartbeat500JSONResponse struct {
	Ocs struct {
		Data map[string]interface{} `json:"data"`
		Meta OCSMeta                `json:"meta"`
	} `json:"ocs"`
}

func (response HeartbeatHeartbeat500JSONResponse) VisitHeartbeatHeartbeatResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PredefinedStatusFindAllRequestObject struct {
	Params PredefinedStatusFindAllParams
}

type PredefinedStatusFindAllResponseObject interface {
	VisitPredefinedStatusFindAllResponse(w http.ResponseWriter) error
}

type PredefinedStatusFindAll200JSONResponse struct {
	Ocs struct {
		Data []Predefined `json:"data"`
		Meta OCSMeta      `json:"meta"`
	} `json:"ocs"`
}

func (response PredefinedStatusFindAll200JSONResponse) VisitPredefinedStatusFindAllResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type StatusesFindAllRequestObject struct {
	Params StatusesFindAllParams
}

type StatusesFindAllResponseObject interface {
	VisitStatusesFindAllResponse(w http.ResponseWriter) error
}

type StatusesFindAll200JSONResponse struct {
	Ocs struct {
		Data []Public `json:"data"`
		Meta OCSMeta  `json:"meta"`
	} `json:"ocs"`
}

func (response StatusesFindAll200JSONResponse) VisitStatusesFindAllResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type StatusesFindRequestObject struct {
	UserId string `json:"userId"`
	Params StatusesFindParams
}

type StatusesFindResponseObject interface {
	VisitStatusesFindResponse(w http.ResponseWriter) error
}

type StatusesFind200JSONResponse struct {
	Ocs struct {
		Data Public  `json:"data"`
		Meta OCSMeta `json:"meta"`
	} `json:"ocs"`
}

func (response StatusesFind200JSONResponse) VisitStatusesFindResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type StatusesFind404TextResponse string

func (response StatusesFind404TextResponse) VisitStatusesFindResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(404)

	_, err := w.Write([]byte(response))
	return err
}

type UserStatusGetStatusRequestObject struct {
	Params UserStatusGetStatusParams
}

type UserStatusGetStatusResponseObject interface {
	VisitUserStatusGetStatusResponse(w http.ResponseWriter) error
}

type UserStatusGetStatus200JSONResponse struct {
	Ocs struct {
		Data Private `json:"data"`
		Meta OCSMeta `json:"meta"`
	} `json:"ocs"`
}

func (response UserStatusGetStatus200JSONResponse) VisitUserStatusGetStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UserStatusGetStatus404TextResponse string

func (response UserStatusGetStatus404TextResponse) VisitUserStatusGetStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(404)

	_, err := w.Write([]byte(response))
	return err
}

type UserStatusClearMessageRequestObject struct {
	Params UserStatusClearMessageParams
}

type UserStatusClearMessageResponseObject interface {
	VisitUserStatusClearMessageResponse(w http.ResponseWriter) error
}

type UserStatusClearMessage200JSONResponse struct {
	Ocs struct {
		Data map[string]interface{} `json:"data"`
		Meta OCSMeta                `json:"meta"`
	} `json:"ocs"`
}

func (response UserStatusClearMessage200JSONResponse) VisitUserStatusClearMessageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UserStatusSetCustomMessageRequestObject struct {
	Params UserStatusSetCustomMessageParams
}

type UserStatusSetCustomMessageResponseObject interface {
	VisitUserStatusSetCustomMessageResponse(w http.ResponseWriter) error
}

type UserStatusSetCustomMessage200JSONResponse struct {
	Ocs struct {
		Data Private `json:"data"`
		Meta OCSMeta `json:"meta"`
	} `json:"ocs"`
}

func (response UserStatusSetCustomMessage200JSONResponse) VisitUserStatusSetCustomMessageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UserStatusSetCustomMessage400TextResponse string

func (response UserStatusSetCustomMessage400TextResponse) VisitUserStatusSetCustomMessageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(400)

	_, err := w.Write([]byte(response))
	return err
}

type UserStatusSetPredefinedMessageRequestObject struct {
	Params UserStatusSetPredefinedMessageParams
}

type UserStatusSetPredefinedMessageResponseObject interface {
	VisitUserStatusSetPredefinedMessageResponse(w http.ResponseWriter) error
}

type UserStatusSetPredefinedMessage200JSONResponse struct {
	Ocs struct {
		Data Private `json:"data"`
		Meta OCSMeta `json:"meta"`
	} `json:"ocs"`
}

func (response UserStatusSetPredefinedMessage200JSONResponse) VisitUserStatusSetPredefinedMessageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UserStatusSetPredefinedMessage400TextResponse string

func (response UserStatusSetPredefinedMessage400TextResponse) VisitUserStatusSetPredefinedMessageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(400)

	_, err := w.Write([]byte(response))
	return err
}

type UserStatusRevertStatusRequestObject struct {
	MessageId string `json:"messageId"`
	Params    UserStatusRevertStatusParams
}

type UserStatusRevertStatusResponseObject interface {
	VisitUserStatusRevertStatusResponse(w http.ResponseWriter) error
}

type UserStatusRevertStatus200JSONResponse struct {
	Ocs struct {
		Data Private `json:"data"`
		Meta OCSMeta `json:"meta"`
	} `json:"ocs"`
}

func (response UserStatusRevertStatus200JSONResponse) VisitUserStatusRevertStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UserStatusSetStatusRequestObject struct {
	Params UserStatusSetStatusParams
}

type UserStatusSetStatusResponseObject interface {
	VisitUserStatusSetStatusResponse(w http.ResponseWriter) error
}

type UserStatusSetStatus200JSONResponse struct {
	Ocs struct {
		Data Private `json:"data"`
		Meta OCSMeta `json:"meta"`
	} `json:"ocs"`
}

func (response UserStatusSetStatus200JSONResponse) VisitUserStatusSetStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UserStatusSetStatus400TextResponse string

func (response UserStatusSetStatus400TextResponse) VisitUserStatusSetStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(400)

	_, err := w.Write([]byte(response))
	return err
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Keep the current status alive
	// (PUT /ocs/v2.php/apps/user_status/api/v1/heartbeat)
	HeartbeatHeartbeat(ctx context.Context, request HeartbeatHeartbeatRequestObject) (HeartbeatHeartbeatResponseObject, error)
	// Get all predefined messages
	// (GET /ocs/v2.php/apps/user_status/api/v1/predefined_statuses)
	PredefinedStatusFindAll(ctx context.Context, request PredefinedStatusFindAllRequestObject) (PredefinedStatusFindAllResponseObject, error)
	// Find statuses of users
	// (GET /ocs/v2.php/apps/user_status/api/v1/statuses)
	StatusesFindAll(ctx context.Context, request StatusesFindAllRequestObject) (StatusesFindAllResponseObject, error)
	// Find the status of a user
	// (GET /ocs/v2.php/apps/user_status/api/v1/statuses/{userId})
	StatusesFind(ctx context.Context, request StatusesFindRequestObject) (StatusesFindResponseObject, error)
	// Get the status of the current user
	// (GET /ocs/v2.php/apps/user_status/api/v1/user_status)
	UserStatusGetStatus(ctx context.Context, request UserStatusGetStatusRequestObject) (UserStatusGetStatusResponseObject, error)
	// Clear the message of the current user
	// (DELETE /ocs/v2.php/apps/user_status/api/v1/user_status/message)
	UserStatusClearMessage(ctx context.Context, request UserStatusClearMessageRequestObject) (UserStatusClearMessageResponseObject, error)
	// Set the message to a custom message for the current user
	// (PUT /ocs/v2.php/apps/user_status/api/v1/user_status/message/custom)
	UserStatusSetCustomMessage(ctx context.Context, request UserStatusSetCustomMessageRequestObject) (UserStatusSetCustomMessageResponseObject, error)
	// Set the message to a predefined message for the current user
	// (PUT /ocs/v2.php/apps/user_status/api/v1/user_status/message/predefined)
	UserStatusSetPredefinedMessage(ctx context.Context, request UserStatusSetPredefinedMessageRequestObject) (UserStatusSetPredefinedMessageResponseObject, error)
	// Revert the status to the previous status
	// (DELETE /ocs/v2.php/apps/user_status/api/v1/user_status/revert/{messageId})
	UserStatusRevertStatus(ctx context.Context, request UserStatusRevertStatusRequestObject) (UserStatusRevertStatusResponseObject, error)
	// Update the status type of the current user
	// (PUT /ocs/v2.php/apps/user_status/api/v1/user_status/status)
	UserStatusSetStatus(ctx context.Context, request UserStatusSetStatusRequestObject) (UserStatusSetStatusResponseObject, error)
}

type StrictHandlerFunc = runtime.StrictHttpHandlerFunc
type StrictMiddlewareFunc = runtime.StrictHttpMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// HeartbeatHeartbeat operation middleware
func (sh *strictHandler) HeartbeatHeartbeat(w http.ResponseWriter, r *http.Request, params HeartbeatHeartbeatParams) {
	var request HeartbeatHeartbeatRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.HeartbeatHeartbeat(ctx, request.(HeartbeatHeartbeatRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "HeartbeatHeartbeat")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(HeartbeatHeartbeatResponseObject); ok {
		if err := validResponse.VisitHeartbeatHeartbeatResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// PredefinedStatusFindAll operation middleware
func (sh *strictHandler) PredefinedStatusFindAll(w http.ResponseWriter, r *http.Request, params PredefinedStatusFindAllParams) {
	var request PredefinedStatusFindAllRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PredefinedStatusFindAll(ctx, request.(PredefinedStatusFindAllRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PredefinedStatusFindAll")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PredefinedStatusFindAllResponseObject); ok {
		if err := validResponse.VisitPredefinedStatusFindAllResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// StatusesFindAll operation middleware
func (sh *strictHandler) StatusesFindAll(w http.ResponseWriter, r *http.Request, params StatusesFindAllParams) {
	var request StatusesFindAllRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.StatusesFindAll(ctx, request.(StatusesFindAllRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "StatusesFindAll")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(StatusesFindAllResponseObject); ok {
		if err := validResponse.VisitStatusesFindAllResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// StatusesFind operation middleware
func (sh *strictHandler) StatusesFind(w http.ResponseWriter, r *http.Request, userId string, params StatusesFindParams) {
	var request StatusesFindRequestObject

	request.UserId = userId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.StatusesFind(ctx, request.(StatusesFindRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "StatusesFind")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(StatusesFindResponseObject); ok {
		if err := validResponse.VisitStatusesFindResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// UserStatusGetStatus operation middleware
func (sh *strictHandler) UserStatusGetStatus(w http.ResponseWriter, r *http.Request, params UserStatusGetStatusParams) {
	var request UserStatusGetStatusRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UserStatusGetStatus(ctx, request.(UserStatusGetStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UserStatusGetStatus")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UserStatusGetStatusResponseObject); ok {
		if err := validResponse.VisitUserStatusGetStatusResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// UserStatusClearMessage operation middleware
func (sh *strictHandler) UserStatusClearMessage(w http.ResponseWriter, r *http.Request, params UserStatusClearMessageParams) {
	var request UserStatusClearMessageRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UserStatusClearMessage(ctx, request.(UserStatusClearMessageRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UserStatusClearMessage")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UserStatusClearMessageResponseObject); ok {
		if err := validResponse.VisitUserStatusClearMessageResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// UserStatusSetCustomMessage operation middleware
func (sh *strictHandler) UserStatusSetCustomMessage(w http.ResponseWriter, r *http.Request, params UserStatusSetCustomMessageParams) {
	var request UserStatusSetCustomMessageRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UserStatusSetCustomMessage(ctx, request.(UserStatusSetCustomMessageRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UserStatusSetCustomMessage")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UserStatusSetCustomMessageResponseObject); ok {
		if err := validResponse.VisitUserStatusSetCustomMessageResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// UserStatusSetPredefinedMessage operation middleware
func (sh *strictHandler) UserStatusSetPredefinedMessage(w http.ResponseWriter, r *http.Request, params UserStatusSetPredefinedMessageParams) {
	var request UserStatusSetPredefinedMessageRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UserStatusSetPredefinedMessage(ctx, request.(UserStatusSetPredefinedMessageRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UserStatusSetPredefinedMessage")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UserStatusSetPredefinedMessageResponseObject); ok {
		if err := validResponse.VisitUserStatusSetPredefinedMessageResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// UserStatusRevertStatus operation middleware
func (sh *strictHandler) UserStatusRevertStatus(w http.ResponseWriter, r *http.Request, messageId string, params UserStatusRevertStatusParams) {
	var request UserStatusRevertStatusRequestObject

	request.MessageId = messageId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UserStatusRevertStatus(ctx, request.(UserStatusRevertStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UserStatusRevertStatus")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UserStatusRevertStatusResponseObject); ok {
		if err := validResponse.VisitUserStatusRevertStatusResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// UserStatusSetStatus operation middleware
func (sh *strictHandler) UserStatusSetStatus(w http.ResponseWriter, r *http.Request, params UserStatusSetStatusParams) {
	var request UserStatusSetStatusRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UserStatusSetStatus(ctx, request.(UserStatusSetStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UserStatusSetStatus")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UserStatusSetStatusResponseObject); ok {
		if err := validResponse.VisitUserStatusSetStatusResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}
